
pec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005770  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CFGFLASH      00000400  08006000  08006000  00016000  2**10
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006400  08006400  000200ec  2**0
                  CONTENTS
  5 .ARM          00000000  08006400  08006400  000200ec  2**0
                  CONTENTS
  6 .preinit_array 00000000  08006400  08006400  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000ec  20000000  08006408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000045c  200000f0  080064f4  000200f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  080064f4  0002054c  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 14 .debug_info   000110c2  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033c2  00000000  00000000  00031219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  000345e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c38  00000000  00000000  000355d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001471d  00000000  00000000  00036210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000193b0  00000000  00000000  0004a92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006ab44  00000000  00000000  00063cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ed0  00000000  00000000  000ce824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000d26f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f0 	.word	0x200000f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005818 	.word	0x08005818

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f4 	.word	0x200000f4
 8000104:	08005818 	.word	0x08005818

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f002 f830 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f809 	bl	8000252 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8e2 	bl	8000408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8b0 	bl	80003a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000248:	f000 f85a 	bl	8000300 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  extern int app_main( void );
  app_main();
 800024c:	f000 fba1 	bl	8000992 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x1c>

08000252 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000252:	b590      	push	{r4, r7, lr}
 8000254:	b095      	sub	sp, #84	; 0x54
 8000256:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000258:	2420      	movs	r4, #32
 800025a:	193b      	adds	r3, r7, r4
 800025c:	0018      	movs	r0, r3
 800025e:	2330      	movs	r3, #48	; 0x30
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f004 fc34 	bl	8004ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	2310      	movs	r3, #16
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f004 fc2c 	bl	8004ad0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	003b      	movs	r3, r7
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f004 fc25 	bl	8004ad0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	0021      	movs	r1, r4
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2202      	movs	r2, #2
 800028c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2201      	movs	r2, #1
 8000292:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2210      	movs	r2, #16
 8000298:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2200      	movs	r2, #0
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	0018      	movs	r0, r3
 80002a4:	f002 fd24 	bl	8002cf0 <HAL_RCC_OscConfig>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ac:	f000 f950 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	2110      	movs	r1, #16
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f003 f828 	bl	8003324 <HAL_RCC_ClockConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002d8:	f000 f93a 	bl	8000550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002dc:	003b      	movs	r3, r7
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	003b      	movs	r3, r7
 80002ea:	0018      	movs	r0, r3
 80002ec:	f003 f95e 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002f4:	f000 f92c 	bl	8000550 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b015      	add	sp, #84	; 0x54
 80002fe:	bd90      	pop	{r4, r7, pc}

08000300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	2308      	movs	r3, #8
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f004 fbdd 	bl	8004ad0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000316:	003b      	movs	r3, r7
 8000318:	0018      	movs	r0, r3
 800031a:	2308      	movs	r3, #8
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f004 fbd6 	bl	8004ad0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	05d2      	lsls	r2, r2, #23
 800032a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <MX_TIM2_Init+0xa0>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_TIM2_Init+0xa0>)
 800033a:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <MX_TIM2_Init+0xa4>)
 800033c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM2_Init+0xa0>)
 800034c:	0018      	movs	r0, r3
 800034e:	f003 f9fb 	bl	8003748 <HAL_TIM_Base_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000356:	f000 f8fb 	bl	8000550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035a:	2108      	movs	r1, #8
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	0152      	lsls	r2, r2, #5
 8000362:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000364:	187a      	adds	r2, r7, r1
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000368:	0011      	movs	r1, r2
 800036a:	0018      	movs	r0, r3
 800036c:	f003 fba4 	bl	8003ab8 <HAL_TIM_ConfigClockSource>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000374:	f000 f8ec 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000384:	003a      	movs	r2, r7
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000388:	0011      	movs	r1, r2
 800038a:	0018      	movs	r0, r3
 800038c:	f003 fdae 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000394:	f000 f8dc 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b006      	add	sp, #24
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000010c 	.word	0x2000010c
 80003a4:	0000ffff 	.word	0x0000ffff

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART1_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003b4:	2296      	movs	r2, #150	; 0x96
 80003b6:	0192      	lsls	r2, r2, #6
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f003 fde5 	bl	8003fbc <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f8ab 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000154 	.word	0x20000154
 8000404:	40013800 	.word	0x40013800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	240c      	movs	r4, #12
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2314      	movs	r3, #20
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f004 fb59 	bl	8004ad0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b48      	ldr	r3, [pc, #288]	; (8000540 <MX_GPIO_Init+0x138>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b47      	ldr	r3, [pc, #284]	; (8000540 <MX_GPIO_Init+0x138>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	03c9      	lsls	r1, r1, #15
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b44      	ldr	r3, [pc, #272]	; (8000540 <MX_GPIO_Init+0x138>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	03db      	lsls	r3, r3, #15
 8000434:	4013      	ands	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <MX_GPIO_Init+0x138>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b40      	ldr	r3, [pc, #256]	; (8000540 <MX_GPIO_Init+0x138>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0289      	lsls	r1, r1, #10
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <MX_GPIO_Init+0x138>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <MX_GPIO_Init+0x138>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b39      	ldr	r3, [pc, #228]	; (8000540 <MX_GPIO_Init+0x138>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	02c9      	lsls	r1, r1, #11
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b36      	ldr	r3, [pc, #216]	; (8000540 <MX_GPIO_Init+0x138>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	02db      	lsls	r3, r3, #11
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_RESET);
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2102      	movs	r1, #2
 800047a:	0018      	movs	r0, r3
 800047c:	f002 fbf4 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2203      	movs	r2, #3
 800048a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000492:	193b      	adds	r3, r7, r4
 8000494:	4a2b      	ldr	r2, [pc, #172]	; (8000544 <MX_GPIO_Init+0x13c>)
 8000496:	0019      	movs	r1, r3
 8000498:	0010      	movs	r0, r2
 800049a:	f002 fa7d 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXI1_Pin */
  GPIO_InitStruct.Pin = EXI1_Pin;
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2202      	movs	r2, #2
 80004a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2284      	movs	r2, #132	; 0x84
 80004aa:	0392      	lsls	r2, r2, #14
 80004ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	000c      	movs	r4, r1
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXI1_GPIO_Port, &GPIO_InitStruct);
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4a22      	ldr	r2, [pc, #136]	; (8000544 <MX_GPIO_Init+0x13c>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f002 fa6b 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	4a20      	ldr	r2, [pc, #128]	; (8000548 <MX_GPIO_Init+0x140>)
 80004c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2203      	movs	r2, #3
 80004cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	193a      	adds	r2, r7, r4
 80004d6:	2390      	movs	r3, #144	; 0x90
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fa5b 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_CT_Pin */
  GPIO_InitStruct.Pin = RS485_CT_Pin;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2201      	movs	r2, #1
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS485_CT_GPIO_Port, &GPIO_InitStruct);
 80004fa:	193a      	adds	r2, r7, r4
 80004fc:	2390      	movs	r3, #144	; 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fa48 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2203      	movs	r2, #3
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	193b      	adds	r3, r7, r4
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <MX_GPIO_Init+0x144>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f002 fa39 	bl	8002998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2103      	movs	r1, #3
 800052a:	2005      	movs	r0, #5
 800052c:	f001 fffc 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000530:	2005      	movs	r0, #5
 8000532:	f002 f80e 	bl	8002552 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b009      	add	sp, #36	; 0x24
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000
 8000544:	48001400 	.word	0x48001400
 8000548:	000006f1 	.word	0x000006f1
 800054c:	48000400 	.word	0x48000400

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	619a      	str	r2, [r3, #24]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0549      	lsls	r1, r1, #21
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_MspInit+0x44>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	055b      	lsls	r3, r3, #21
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d113      	bne.n	80005e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005be:	2101      	movs	r1, #1
 80005c0:	430a      	orrs	r2, r1
 80005c2:	61da      	str	r2, [r3, #28]
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2103      	movs	r1, #3
 80005d4:	200f      	movs	r0, #15
 80005d6:	f001 ffa7 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005da:	200f      	movs	r0, #15
 80005dc:	f001 ffb9 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b004      	add	sp, #16
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	2414      	movs	r4, #20
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2314      	movs	r3, #20
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f004 fa66 	bl	8004ad0 <memset>
  if(huart->Instance==USART1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <HAL_UART_MspInit+0xa0>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d13a      	bne.n	8000684 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000610:	699a      	ldr	r2, [r3, #24]
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	01c9      	lsls	r1, r1, #7
 8000618:	430a      	orrs	r2, r1
 800061a:	619a      	str	r2, [r3, #24]
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800061e:	699a      	ldr	r2, [r3, #24]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	01db      	lsls	r3, r3, #7
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0289      	lsls	r1, r1, #10
 8000634:	430a      	orrs	r2, r1
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	029b      	lsls	r3, r3, #10
 8000640:	4013      	ands	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2202      	movs	r2, #2
 8000652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2203      	movs	r2, #3
 800065e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	187a      	adds	r2, r7, r1
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f002 f992 	bl	8002998 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2103      	movs	r1, #3
 8000678:	201b      	movs	r0, #27
 800067a:	f001 ff55 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800067e:	201b      	movs	r0, #27
 8000680:	f001 ff67 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b00b      	add	sp, #44	; 0x2c
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f001 fe38 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXI1_Pin);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f002 faec 	bl	8002ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) !=RESET) {
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <TIM2_IRQHandler+0x54>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	2201      	movs	r2, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d118      	bne.n	8000718 <TIM2_IRQHandler+0x44>
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <TIM2_IRQHandler+0x54>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4013      	ands	r3, r2
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d111      	bne.n	8000718 <TIM2_IRQHandler+0x44>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <TIM2_IRQHandler+0x54>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2202      	movs	r2, #2
 80006fa:	4252      	negs	r2, r2
 80006fc:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <TIM2_IRQHandler+0x58>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	3b01      	subs	r3, #1
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <TIM2_IRQHandler+0x58>)
 8000708:	801a      	strh	r2, [r3, #0]
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <TIM2_IRQHandler+0x58>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <TIM2_IRQHandler+0x44>
		  pxMBPortCBTimerExpired();
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <TIM2_IRQHandler+0x5c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4798      	blx	r3
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <TIM2_IRQHandler+0x54>)
 800071a:	0018      	movs	r0, r3
 800071c:	f003 f8de 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	2000010c 	.word	0x2000010c
 800072c:	200002cc 	.word	0x200002cc
 8000730:	200002b8 	.word	0x200002b8

08000734 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <USART1_IRQHandler+0x78>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	2220      	movs	r2, #32
 8000742:	4013      	ands	r3, r2
 8000744:	3b20      	subs	r3, #32
 8000746:	425a      	negs	r2, r3
 8000748:	4153      	adcs	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	607b      	str	r3, [r7, #4]
	  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <USART1_IRQHandler+0x78>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2220      	movs	r2, #32
 8000756:	4013      	ands	r3, r2
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	4193      	sbcs	r3, r2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	603b      	str	r3, [r7, #0]

	  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d009      	beq.n	800077a <USART1_IRQHandler+0x46>
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <USART1_IRQHandler+0x46>
		pxMBFrameCBByteReceived();
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <USART1_IRQHandler+0x7c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4798      	blx	r3
		__HAL_UART_CLEAR_PEFLAG(&huart1);
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <USART1_IRQHandler+0x78>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2201      	movs	r2, #1
 8000778:	621a      	str	r2, [r3, #32]
	  }

	  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <USART1_IRQHandler+0x78>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	4013      	ands	r3, r2
 8000784:	2b80      	cmp	r3, #128	; 0x80
 8000786:	d108      	bne.n	800079a <USART1_IRQHandler+0x66>
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <USART1_IRQHandler+0x78>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	4013      	ands	r3, r2
 8000792:	d002      	beq.n	800079a <USART1_IRQHandler+0x66>
		pxMBFrameCBTransmitterEmpty();
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <USART1_IRQHandler+0x80>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4798      	blx	r3
	  }

	  __HAL_UART_CLEAR_FLAG(&huart1, 0xffffffff  );
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <USART1_IRQHandler+0x78>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2201      	movs	r2, #1
 80007a0:	4252      	negs	r2, r2
 80007a2:	621a      	str	r2, [r3, #32]
	  return;
 80007a4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000154 	.word	0x20000154
 80007b0:	200002b0 	.word	0x200002b0
 80007b4:	200002b4 	.word	0x200002b4

080007b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_kill>:

int _kill(int pid, int sig)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007ce:	f004 f9d5 	bl	8004b7c <__errno>
 80007d2:	0003      	movs	r3, r0
 80007d4:	2216      	movs	r2, #22
 80007d6:	601a      	str	r2, [r3, #0]
  return -1;
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_exit>:

void _exit (int status)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007ec:	2301      	movs	r3, #1
 80007ee:	425a      	negs	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff ffe5 	bl	80007c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007fa:	e7fe      	b.n	80007fa <_exit+0x16>

080007fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e00a      	b.n	8000824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800080e:	e000      	b.n	8000812 <_read+0x16>
 8000810:	bf00      	nop
 8000812:	0001      	movs	r1, r0
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf0      	blt.n	800080e <_read+0x12>
  }

  return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b006      	add	sp, #24
 8000834:	bd80      	pop	{r7, pc}

08000836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e009      	b.n	800085c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	e000      	b.n	8000856 <_write+0x20>
 8000854:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf1      	blt.n	8000848 <_write+0x12>
  }
  return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b006      	add	sp, #24
 800086c:	bd80      	pop	{r7, pc}

0800086e <_close>:

int _close(int file)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000876:	2301      	movs	r3, #1
 8000878:	425b      	negs	r3, r3
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}

08000882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0192      	lsls	r2, r2, #6
 8000892:	605a      	str	r2, [r3, #4]
  return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}

0800089e <_isatty>:

int _isatty(int file)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f004 f940 	bl	8004b7c <__errno>
 80008fc:	0003      	movs	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	18d2      	adds	r2, r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b006      	add	sp, #24
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20001000 	.word	0x20001000
 8000928:	00000400 	.word	0x00000400
 800092c:	200001dc 	.word	0x200001dc
 8000930:	20000550 	.word	0x20000550

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000942:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000944:	f7ff fff6 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	; (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800096e:	f004 f90b 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fc5f 	bl	8000234 <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   r0, =_estack
 8000978:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8000984:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 8000988:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800098c:	2000054c 	.word	0x2000054c

08000990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_IRQHandler>

08000992 <app_main>:

extern void load_config(void);
extern void modbusInit(void);

int app_main( void )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
	load_config();
 8000996:	f000 f80b 	bl	80009b0 <load_config>

	HAL_Delay(3);
 800099a:	2003      	movs	r0, #3
 800099c:	f001 fce2 	bl	8002364 <HAL_Delay>

	modbusInit();
 80009a0:	f000 f87c 	bl	8000a9c <modbusInit>

    HAL_Delay(2);
 80009a4:	2002      	movs	r0, #2
 80009a6:	f001 fcdd 	bl	8002364 <HAL_Delay>

    while(1){
    	eMBPoll();
 80009aa:	f000 ffef 	bl	800198c <eMBPoll>
    while(1){
 80009ae:	e7fc      	b.n	80009aa <app_main+0x18>

080009b0 <load_config>:

const uint8_t configFlash[1024] __attribute__((section("CFGFLASH"), aligned(0x400)));

Config_t config;

void load_config(void) {
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	memcpy(&config, (uint8_t*) configFlash, sizeof(Config_t));
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <load_config+0x48>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <load_config+0x4c>)
 80009b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009ba:	c313      	stmia	r3!, {r0, r1, r4}
 80009bc:	6811      	ldr	r1, [r2, #0]
 80009be:	6019      	str	r1, [r3, #0]
 80009c0:	8892      	ldrh	r2, [r2, #4]
 80009c2:	809a      	strh	r2, [r3, #4]
	if (config.flaga5a5 != 0xa5a5) {
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <load_config+0x48>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <load_config+0x50>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d011      	beq.n	80009f2 <load_config+0x42>
		config.flaga5a5 = 0xa5a5;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <load_config+0x48>)
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <load_config+0x54>)
 80009d2:	801a      	strh	r2, [r3, #0]
		config.firmware = FIRMWARE_VER;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <load_config+0x48>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	805a      	strh	r2, [r3, #2]
		config.addr = 0x2a;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <load_config+0x48>)
 80009dc:	222a      	movs	r2, #42	; 0x2a
 80009de:	809a      	strh	r2, [r3, #4]
		config.baudrate = 3;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <load_config+0x48>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	80da      	strh	r2, [r3, #6]
		config.parity = 0;
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <load_config+0x48>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	811a      	strh	r2, [r3, #8]
		config.stopbits = 0;
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <load_config+0x48>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	815a      	strh	r2, [r3, #10]
	}
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	200001e0 	.word	0x200001e0
 80009fc:	08006000 	.word	0x08006000
 8000a00:	0000a5a5 	.word	0x0000a5a5
 8000a04:	ffffa5a5 	.word	0xffffa5a5

08000a08 <save_config>:

void save_config() {
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
	uint32_t PageError = 0;				                    //设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
	FLASH_EraseInitTypeDef flashOperate;
	flashOperate.TypeErase = FLASH_TYPEERASE_PAGES;			//标明Flash执行页面只做擦除操作
 8000a12:	003b      	movs	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
	flashOperate.PageAddress = (uint32_t)configFlash;           //声明要擦除的地址
 8000a18:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <save_config+0x8c>)
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	605a      	str	r2, [r3, #4]
	flashOperate.NbPages = 1;
 8000a1e:	003b      	movs	r3, r7
 8000a20:	2201      	movs	r2, #1
 8000a22:	609a      	str	r2, [r3, #8]
	HAL_FLASH_Unlock();
 8000a24:	f001 fe4c 	bl	80026c0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&flashOperate, &PageError);
 8000a28:	230c      	movs	r3, #12
 8000a2a:	18fa      	adds	r2, r7, r3
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 ff05 	bl	8002840 <HAL_FLASHEx_Erase>

	uint16_t *p_data = (uint16_t*) &config;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <save_config+0x90>)
 8000a38:	61fb      	str	r3, [r7, #28]
	uint32_t p_flash = (uint32_t)configFlash;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <save_config+0x8c>)
 8000a3c:	61bb      	str	r3, [r7, #24]
	size_t size = sizeof(Config_t);
 8000a3e:	2312      	movs	r3, #18
 8000a40:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < size; i += 2) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	e01a      	b.n	8000a7e <save_config+0x76>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, p_flash, *p_data) == HAL_OK) {
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	001c      	movs	r4, r3
 8000a4e:	2300      	movs	r3, #0
 8000a50:	001d      	movs	r5, r3
 8000a52:	69b9      	ldr	r1, [r7, #24]
 8000a54:	0022      	movs	r2, r4
 8000a56:	002b      	movs	r3, r5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f001 fd9b 	bl	8002594 <HAL_FLASH_Program>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d106      	bne.n	8000a70 <save_config+0x68>
			p_flash += 2;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	3302      	adds	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
			p_data++;
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	e003      	b.n	8000a78 <save_config+0x70>
		} else {
			HAL_FLASH_Lock();
 8000a70:	f001 fe4c 	bl	800270c <HAL_FLASH_Lock>
			HAL_NVIC_SystemReset();
 8000a74:	f001 fd7d 	bl	8002572 <HAL_NVIC_SystemReset>
	for (int i = 0; i < size; i += 2) {
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d8e0      	bhi.n	8000a48 <save_config+0x40>
		}
	}

	HAL_FLASH_Lock();
 8000a86:	f001 fe41 	bl	800270c <HAL_FLASH_Lock>
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b008      	add	sp, #32
 8000a90:	bdb0      	pop	{r4, r5, r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	08006000 	.word	0x08006000
 8000a98:	200001e0 	.word	0x200001e0

08000a9c <modbusInit>:

static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void modbusInit(void)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af02      	add	r7, sp, #8
  eMBErrorCode eStatus = eMBInit( MB_RTU, config.addr, 3, 19200, MB_PAR_NONE );
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <modbusInit+0x34>)
 8000aa4:	889b      	ldrh	r3, [r3, #4]
 8000aa6:	b2d9      	uxtb	r1, r3
 8000aa8:	1dfc      	adds	r4, r7, #7
 8000aaa:	2396      	movs	r3, #150	; 0x96
 8000aac:	01db      	lsls	r3, r3, #7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	9200      	str	r2, [sp, #0]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 feb3 	bl	8001820 <eMBInit>
 8000aba:	0003      	movs	r3, r0
 8000abc:	7023      	strb	r3, [r4, #0]
  eStatus = eMBEnable();
 8000abe:	1dfc      	adds	r4, r7, #7
 8000ac0:	f000 ff46 	bl	8001950 <eMBEnable>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	7023      	strb	r3, [r4, #0]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b003      	add	sp, #12
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	200001e0 	.word	0x200001e0

08000ad4 <eMBRegInputCB>:
	return crc;
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT _usAddress, USHORT usNRegs )
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	0008      	movs	r0, r1
 8000ade:	0011      	movs	r1, r2
 8000ae0:	1cbb      	adds	r3, r7, #2
 8000ae2:	1c02      	adds	r2, r0, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	1c0a      	adds	r2, r1, #0
 8000aea:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000aec:	2317      	movs	r3, #23
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
    int             iRegIndex;
    USHORT usAddress = _usAddress - 1;
 8000af4:	210e      	movs	r1, #14
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	1cba      	adds	r2, r7, #2
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	3a01      	subs	r2, #1
 8000afe:	801a      	strh	r2, [r3, #0]

    if( ( usAddress == REG_INPUT_START )
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	881a      	ldrh	r2, [r3, #0]
 8000b04:	23fa      	movs	r3, #250	; 0xfa
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d12f      	bne.n	8000b6c <eMBRegInputCB+0x98>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	881a      	ldrh	r2, [r3, #0]
 8000b10:	003b      	movs	r3, r7
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <eMBRegInputCB+0xb0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	dc27      	bgt.n	8000b6c <eMBRegInputCB+0x98>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <eMBRegInputCB+0xb4>)
 8000b22:	8812      	ldrh	r2, [r2, #0]
 8000b24:	1a9b      	subs	r3, r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        while( usNRegs > 0 )
 8000b28:	e01b      	b.n	8000b62 <eMBRegInputCB+0x8e>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <eMBRegInputCB+0xb8>)
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	5ad3      	ldrh	r3, [r2, r3]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b3c:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b3e:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <eMBRegInputCB+0xb8>)
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	5ad1      	ldrh	r1, [r2, r3]
            *pucRegBuffer++ =
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b4e:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b50:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	3301      	adds	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
            usNRegs--;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	3a01      	subs	r2, #1
 8000b60:	801a      	strh	r2, [r3, #0]
        while( usNRegs > 0 )
 8000b62:	003b      	movs	r3, r7
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1df      	bne.n	8000b2a <eMBRegInputCB+0x56>
    if( ( usAddress == REG_INPUT_START )
 8000b6a:	e003      	b.n	8000b74 <eMBRegInputCB+0xa0>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000b6c:	2317      	movs	r3, #23
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 8000b74:	2317      	movs	r3, #23
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	781b      	ldrb	r3, [r3, #0]
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b006      	add	sp, #24
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	00000429 	.word	0x00000429
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	200001f4 	.word	0x200001f4

08000b90 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT _usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 8000b90:	b5b0      	push	{r4, r5, r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	000c      	movs	r4, r1
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	250a      	movs	r5, #10
 8000ba0:	197b      	adds	r3, r7, r5
 8000ba2:	1c22      	adds	r2, r4, #0
 8000ba4:	801a      	strh	r2, [r3, #0]
 8000ba6:	2408      	movs	r4, #8
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	1c02      	adds	r2, r0, #0
 8000bac:	801a      	strh	r2, [r3, #0]
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	1c0a      	adds	r2, r1, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
	eMBErrorCode    eStatus = MB_ENOERR;
 8000bb4:	231f      	movs	r3, #31
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
	int             iRegIndex;
	USHORT usAddress = _usAddress - 1;
 8000bbc:	2112      	movs	r1, #18
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	197a      	adds	r2, r7, r5
 8000bc2:	8812      	ldrh	r2, [r2, #0]
 8000bc4:	3a01      	subs	r2, #1
 8000bc6:	801a      	strh	r2, [r3, #0]

	if ( MB_REG_READ == eMode ){
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d133      	bne.n	8000c38 <eMBRegHoldingCB+0xa8>
		if( ( usAddress >= 0 ) && ( usAddress + usNRegs <= 9 ) )
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	881a      	ldrh	r2, [r3, #0]
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	dc27      	bgt.n	8000c2e <eMBRegHoldingCB+0x9e>
		{
			uint16_t *pread = (uint16_t *)&config;
 8000bde:	4b43      	ldr	r3, [pc, #268]	; (8000cec <eMBRegHoldingCB+0x15c>)
 8000be0:	61bb      	str	r3, [r7, #24]
			pread += usAddress;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	61bb      	str	r3, [r7, #24]
			while( usNRegs > 0 )
 8000bee:	e018      	b.n	8000c22 <eMBRegHoldingCB+0x92>
			{
				*pucRegBuffer++ =
					( unsigned char )( *pread >> 8 );
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	b299      	uxth	r1, r3
				*pucRegBuffer++ =
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60fa      	str	r2, [r7, #12]
					( unsigned char )( *pread >> 8 );
 8000bfe:	b2ca      	uxtb	r2, r1
				*pucRegBuffer++ =
 8000c00:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ =
					( unsigned char )( *pread & 0xFF );
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	8819      	ldrh	r1, [r3, #0]
				*pucRegBuffer++ =
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	60fa      	str	r2, [r7, #12]
					( unsigned char )( *pread & 0xFF );
 8000c0c:	b2ca      	uxtb	r2, r1
				*pucRegBuffer++ =
 8000c0e:	701a      	strb	r2, [r3, #0]
				pread++;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	3302      	adds	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
				usNRegs--;
 8000c16:	2108      	movs	r1, #8
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	881a      	ldrh	r2, [r3, #0]
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	3a01      	subs	r2, #1
 8000c20:	801a      	strh	r2, [r3, #0]
			while( usNRegs > 0 )
 8000c22:	2308      	movs	r3, #8
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e1      	bne.n	8000bf0 <eMBRegHoldingCB+0x60>
 8000c2c:	e056      	b.n	8000cdc <eMBRegHoldingCB+0x14c>
			}
		}else{
			eStatus = MB_ENOREG;
 8000c2e:	231f      	movs	r3, #31
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e051      	b.n	8000cdc <eMBRegHoldingCB+0x14c>
		}
	}else{
		if( ( usAddress >= 2 ) && ( usAddress + usNRegs <= 9 ) )
 8000c38:	2112      	movs	r1, #18
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d946      	bls.n	8000cd0 <eMBRegHoldingCB+0x140>
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	2008      	movs	r0, #8
 8000c48:	183b      	adds	r3, r7, r0
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	dc3e      	bgt.n	8000cd0 <eMBRegHoldingCB+0x140>
		{
			uint16_t *pw = (uint16_t *)&config;
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <eMBRegHoldingCB+0x15c>)
 8000c54:	617b      	str	r3, [r7, #20]
			pw += usAddress;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
			USHORT bkN = usNRegs;
 8000c62:	2310      	movs	r3, #16
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	183a      	adds	r2, r7, r0
 8000c68:	8812      	ldrh	r2, [r2, #0]
 8000c6a:	801a      	strh	r2, [r3, #0]
			while( usNRegs > 0 )
 8000c6c:	e018      	b.n	8000ca0 <eMBRegHoldingCB+0x110>
			{
				*pw = (uint16_t)((*pucRegBuffer++) << 8) + (uint8_t)(*pucRegBuffer++);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60fa      	str	r2, [r7, #12]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	1c59      	adds	r1, r3, #1
 8000c80:	60f9      	str	r1, [r7, #12]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	18d3      	adds	r3, r2, r3
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	801a      	strh	r2, [r3, #0]
				pw++;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3302      	adds	r3, #2
 8000c92:	617b      	str	r3, [r7, #20]
				usNRegs--;
 8000c94:	2108      	movs	r1, #8
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	881a      	ldrh	r2, [r3, #0]
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	801a      	strh	r2, [r3, #0]
			while( usNRegs > 0 )
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1e1      	bne.n	8000c6e <eMBRegHoldingCB+0xde>
			}
			save_config();
 8000caa:	f7ff fead 	bl	8000a08 <save_config>
			if( (usAddress + bkN >= 9) && (config.restart==0xffff) )
 8000cae:	2312      	movs	r3, #18
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	881a      	ldrh	r2, [r3, #0]
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	18d3      	adds	r3, r2, r3
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	dd0c      	ble.n	8000cda <eMBRegHoldingCB+0x14a>
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <eMBRegHoldingCB+0x15c>)
 8000cc2:	8a1b      	ldrh	r3, [r3, #16]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <eMBRegHoldingCB+0x160>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d107      	bne.n	8000cda <eMBRegHoldingCB+0x14a>
				HAL_NVIC_SystemReset();
 8000cca:	f001 fc52 	bl	8002572 <HAL_NVIC_SystemReset>
		{
 8000cce:	e004      	b.n	8000cda <eMBRegHoldingCB+0x14a>

		}else{
			eStatus = MB_ENOREG;
 8000cd0:	231f      	movs	r3, #31
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e000      	b.n	8000cdc <eMBRegHoldingCB+0x14c>
		{
 8000cda:	46c0      	nop			; (mov r8, r8)
		}
	}

	return eStatus;
 8000cdc:	231f      	movs	r3, #31
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b008      	add	sp, #32
 8000ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	200001e0 	.word	0x200001e0
 8000cf0:	0000ffff 	.word	0x0000ffff

08000cf4 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	000c      	movs	r4, r1
 8000cfe:	0010      	movs	r0, r2
 8000d00:	0019      	movs	r1, r3
 8000d02:	230a      	movs	r3, #10
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	1c22      	adds	r2, r4, #0
 8000d08:	801a      	strh	r2, [r3, #0]
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	1c02      	adds	r2, r0, #0
 8000d10:	801a      	strh	r2, [r3, #0]
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	1c0a      	adds	r2, r1, #0
 8000d16:	701a      	strb	r2, [r3, #0]
    return MB_ENOREG;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b005      	add	sp, #20
 8000d20:	bd90      	pop	{r4, r7, pc}

08000d22 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	0008      	movs	r0, r1
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	1cbb      	adds	r3, r7, #2
 8000d30:	1c02      	adds	r2, r0, #0
 8000d32:	801a      	strh	r2, [r3, #0]
 8000d34:	003b      	movs	r3, r7
 8000d36:	1c0a      	adds	r2, r1, #0
 8000d38:	801a      	strh	r2, [r3, #0]
    return MB_ENOREG;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8000d4e:	2316      	movs	r3, #22
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	2b05      	cmp	r3, #5
 8000d5c:	d000      	beq.n	8000d60 <eMBFuncReadCoils+0x1c>
 8000d5e:	e091      	b.n	8000e84 <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2014      	movs	r0, #20
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	0212      	lsls	r2, r2, #8
 8000d6e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3302      	adds	r3, #2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b299      	uxth	r1, r3
 8000d78:	183b      	adds	r3, r7, r0
 8000d7a:	183a      	adds	r2, r7, r0
 8000d7c:	8812      	ldrh	r2, [r2, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	183b      	adds	r3, r7, r0
 8000d88:	3201      	adds	r2, #1
 8000d8a:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3303      	adds	r3, #3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	2012      	movs	r0, #18
 8000d96:	183b      	adds	r3, r7, r0
 8000d98:	0212      	lsls	r2, r2, #8
 8000d9a:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b299      	uxth	r1, r3
 8000da4:	183b      	adds	r3, r7, r0
 8000da6:	183a      	adds	r2, r7, r0
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8000dae:	183b      	adds	r3, r7, r0
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d061      	beq.n	8000e7a <eMBFuncReadCoils+0x136>
 8000db6:	0001      	movs	r1, r0
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	23fa      	movs	r3, #250	; 0xfa
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d25a      	bcs.n	8000e7a <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	60fa      	str	r2, [r7, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	2207      	movs	r2, #7
 8000dea:	4013      	ands	r3, r2
 8000dec:	d009      	beq.n	8000e02 <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	2317      	movs	r3, #23
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	3201      	adds	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e007      	b.n	8000e12 <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8000e02:	2312      	movs	r3, #18
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	2317      	movs	r3, #23
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	60fa      	str	r2, [r7, #12]
 8000e18:	2217      	movs	r2, #23
 8000e1a:	18ba      	adds	r2, r7, r2
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8000e2c:	250b      	movs	r5, #11
 8000e2e:	197c      	adds	r4, r7, r5
 8000e30:	2312      	movs	r3, #18
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	881a      	ldrh	r2, [r3, #0]
 8000e36:	2314      	movs	r3, #20
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	8819      	ldrh	r1, [r3, #0]
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f7ff ff58 	bl	8000cf4 <eMBRegCoilsCB>
 8000e44:	0003      	movs	r3, r0
 8000e46:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000e48:	197b      	adds	r3, r7, r5
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d009      	beq.n	8000e64 <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000e50:	2316      	movs	r3, #22
 8000e52:	18fc      	adds	r4, r7, r3
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fcb5 	bl	80017c8 <prveMBError2Exception>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000e62:	e013      	b.n	8000e8c <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	881a      	ldrh	r2, [r3, #0]
 8000e68:	2317      	movs	r3, #23
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	18d3      	adds	r3, r2, r3
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8000e78:	e008      	b.n	8000e8c <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000e7a:	2316      	movs	r3, #22
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	2203      	movs	r2, #3
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e003      	b.n	8000e8c <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000e84:	2316      	movs	r3, #22
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	2203      	movs	r2, #3
 8000e8a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000e8c:	2316      	movs	r3, #22
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	781b      	ldrb	r3, [r3, #0]
}
 8000e92:	0018      	movs	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b006      	add	sp, #24
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}

08000e9a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8000e9a:	b5b0      	push	{r4, r5, r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d155      	bne.n	8000f60 <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	200c      	movs	r0, #12
 8000ebe:	183b      	adds	r3, r7, r0
 8000ec0:	0212      	lsls	r2, r2, #8
 8000ec2:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	183a      	adds	r2, r7, r0
 8000ed0:	8812      	ldrh	r2, [r2, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	183b      	adds	r3, r7, r0
 8000edc:	3201      	adds	r2, #1
 8000ede:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d135      	bne.n	8000f56 <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3303      	adds	r3, #3
 8000eee:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8000ef0:	2bff      	cmp	r3, #255	; 0xff
 8000ef2:	d004      	beq.n	8000efe <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3303      	adds	r3, #3
 8000ef8:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d12b      	bne.n	8000f56 <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 8000efe:	2108      	movs	r1, #8
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d103      	bne.n	8000f18 <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e003      	b.n	8000f20 <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8000f20:	250b      	movs	r5, #11
 8000f22:	197c      	adds	r4, r7, r5
 8000f24:	230c      	movs	r3, #12
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	8819      	ldrh	r1, [r3, #0]
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	18f8      	adds	r0, r7, r3
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2201      	movs	r2, #1
 8000f32:	f7ff fedf 	bl	8000cf4 <eMBRegCoilsCB>
 8000f36:	0003      	movs	r3, r0
 8000f38:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000f3a:	197b      	adds	r3, r7, r5
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d012      	beq.n	8000f68 <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000f42:	230f      	movs	r3, #15
 8000f44:	18fc      	adds	r4, r7, r3
 8000f46:	197b      	adds	r3, r7, r5
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fc3c 	bl	80017c8 <prveMBError2Exception>
 8000f50:	0003      	movs	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000f54:	e008      	b.n	8000f68 <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e003      	b.n	8000f68 <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	2203      	movs	r2, #3
 8000f66:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bdb0      	pop	{r4, r5, r7, pc}

08000f76 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8000f76:	b5b0      	push	{r4, r5, r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8000f80:	230e      	movs	r3, #14
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d800      	bhi.n	8000f92 <eMBFuncWriteMultipleCoils+0x1c>
 8000f90:	e07a      	b.n	8001088 <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	183b      	adds	r3, r7, r0
 8000f9e:	0212      	lsls	r2, r2, #8
 8000fa0:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	183b      	adds	r3, r7, r0
 8000fac:	183a      	adds	r2, r7, r0
 8000fae:	8812      	ldrh	r2, [r2, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000fb4:	183b      	adds	r3, r7, r0
 8000fb6:	881a      	ldrh	r2, [r3, #0]
 8000fb8:	183b      	adds	r3, r7, r0
 8000fba:	3201      	adds	r2, #1
 8000fbc:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3303      	adds	r3, #3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	183b      	adds	r3, r7, r0
 8000fca:	0212      	lsls	r2, r2, #8
 8000fcc:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	183a      	adds	r2, r7, r0
 8000fda:	8812      	ldrh	r2, [r2, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	7952      	ldrb	r2, [r2, #5]
 8000fe8:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8000fea:	183b      	adds	r3, r7, r0
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2207      	movs	r2, #7
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d009      	beq.n	8001008 <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8000ff4:	183b      	adds	r3, r7, r0
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	3201      	adds	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e007      	b.n	8001018 <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8001008:	230a      	movs	r3, #10
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	b29a      	uxth	r2, r3
 8001012:	230f      	movs	r3, #15
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8001018:	210a      	movs	r1, #10
 800101a:	187b      	adds	r3, r7, r1
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d02d      	beq.n	800107e <eMBFuncWriteMultipleCoils+0x108>
 8001022:	187b      	adds	r3, r7, r1
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	23f6      	movs	r3, #246	; 0xf6
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	429a      	cmp	r2, r3
 800102c:	d827      	bhi.n	800107e <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 800102e:	230f      	movs	r3, #15
 8001030:	18fa      	adds	r2, r7, r3
 8001032:	2309      	movs	r3, #9
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d11f      	bne.n	800107e <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1d98      	adds	r0, r3, #6
 8001042:	2508      	movs	r5, #8
 8001044:	197c      	adds	r4, r7, r5
 8001046:	187b      	adds	r3, r7, r1
 8001048:	881a      	ldrh	r2, [r3, #0]
 800104a:	230c      	movs	r3, #12
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	8819      	ldrh	r1, [r3, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	f7ff fe4f 	bl	8000cf4 <eMBRegCoilsCB>
 8001056:	0003      	movs	r3, r0
 8001058:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800105a:	197b      	adds	r3, r7, r5
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d009      	beq.n	8001076 <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001062:	230e      	movs	r3, #14
 8001064:	18fc      	adds	r4, r7, r3
 8001066:	197b      	adds	r3, r7, r5
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fbac 	bl	80017c8 <prveMBError2Exception>
 8001070:	0003      	movs	r3, r0
 8001072:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001074:	e00c      	b.n	8001090 <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2205      	movs	r2, #5
 800107a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800107c:	e008      	b.n	8001090 <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800107e:	230e      	movs	r3, #14
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	2203      	movs	r2, #3
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e003      	b.n	8001090 <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001088:	230e      	movs	r3, #14
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2203      	movs	r2, #3
 800108e:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001090:	230e      	movs	r3, #14
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	781b      	ldrb	r3, [r3, #0]
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bdb0      	pop	{r4, r5, r7, pc}

0800109e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800109e:	b5b0      	push	{r4, r5, r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80010a8:	2316      	movs	r3, #22
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d000      	beq.n	80010ba <eMBFuncReadDiscreteInputs+0x1c>
 80010b8:	e091      	b.n	80011de <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3301      	adds	r3, #1
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	2014      	movs	r0, #20
 80010c4:	183b      	adds	r3, r7, r0
 80010c6:	0212      	lsls	r2, r2, #8
 80010c8:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3302      	adds	r3, #2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b299      	uxth	r1, r3
 80010d2:	183b      	adds	r3, r7, r0
 80010d4:	183a      	adds	r2, r7, r0
 80010d6:	8812      	ldrh	r2, [r2, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80010dc:	183b      	adds	r3, r7, r0
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	183b      	adds	r3, r7, r0
 80010e2:	3201      	adds	r2, #1
 80010e4:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3303      	adds	r3, #3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	2012      	movs	r0, #18
 80010f0:	183b      	adds	r3, r7, r0
 80010f2:	0212      	lsls	r2, r2, #8
 80010f4:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b299      	uxth	r1, r3
 80010fe:	183b      	adds	r3, r7, r0
 8001100:	183a      	adds	r2, r7, r0
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8001108:	183b      	adds	r3, r7, r0
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d061      	beq.n	80011d4 <eMBFuncReadDiscreteInputs+0x136>
 8001110:	0001      	movs	r1, r0
 8001112:	183b      	adds	r3, r7, r0
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	23fa      	movs	r3, #250	; 0xfa
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	429a      	cmp	r2, r3
 800111c:	d25a      	bcs.n	80011d4 <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	60fa      	str	r2, [r7, #12]
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b29a      	uxth	r2, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800113e:	187b      	adds	r3, r7, r1
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	d009      	beq.n	800115c <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8001148:	187b      	adds	r3, r7, r1
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	b29b      	uxth	r3, r3
 8001150:	b2da      	uxtb	r2, r3
 8001152:	2317      	movs	r3, #23
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	3201      	adds	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e007      	b.n	800116c <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 800115c:	2312      	movs	r3, #18
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	b29a      	uxth	r2, r3
 8001166:	2317      	movs	r3, #23
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60fa      	str	r2, [r7, #12]
 8001172:	2217      	movs	r2, #23
 8001174:	18ba      	adds	r2, r7, r2
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8001186:	250b      	movs	r5, #11
 8001188:	197c      	adds	r4, r7, r5
 800118a:	2312      	movs	r3, #18
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	2314      	movs	r3, #20
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	8819      	ldrh	r1, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fdc2 	bl	8000d22 <eMBRegDiscreteCB>
 800119e:	0003      	movs	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80011a2:	197b      	adds	r3, r7, r5
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80011aa:	2316      	movs	r3, #22
 80011ac:	18fc      	adds	r4, r7, r3
 80011ae:	197b      	adds	r3, r7, r5
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 fb08 	bl	80017c8 <prveMBError2Exception>
 80011b8:	0003      	movs	r3, r0
 80011ba:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80011bc:	e013      	b.n	80011e6 <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	2317      	movs	r3, #23
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	18d3      	adds	r3, r2, r3
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80011d2:	e008      	b.n	80011e6 <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80011d4:	2316      	movs	r3, #22
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2203      	movs	r2, #3
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e003      	b.n	80011e6 <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80011de:	2316      	movs	r3, #22
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2203      	movs	r2, #3
 80011e4:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80011e6:	2316      	movs	r3, #22
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b006      	add	sp, #24
 80011f2:	bdb0      	pop	{r4, r5, r7, pc}

080011f4 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 80011fe:	260f      	movs	r6, #15
 8001200:	19bb      	adds	r3, r7, r6
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	2b05      	cmp	r3, #5
 800120c:	d12f      	bne.n	800126e <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b29a      	uxth	r2, r3
 8001216:	200c      	movs	r0, #12
 8001218:	183b      	adds	r3, r7, r0
 800121a:	0212      	lsls	r2, r2, #8
 800121c:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3302      	adds	r3, #2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b299      	uxth	r1, r3
 8001226:	183b      	adds	r3, r7, r0
 8001228:	183a      	adds	r2, r7, r0
 800122a:	8812      	ldrh	r2, [r2, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001230:	183b      	adds	r3, r7, r0
 8001232:	881a      	ldrh	r2, [r3, #0]
 8001234:	0001      	movs	r1, r0
 8001236:	183b      	adds	r3, r7, r0
 8001238:	3201      	adds	r2, #1
 800123a:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1cd8      	adds	r0, r3, #3
 8001240:	250b      	movs	r5, #11
 8001242:	197c      	adds	r4, r7, r5
 8001244:	187b      	adds	r3, r7, r1
 8001246:	8819      	ldrh	r1, [r3, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	2201      	movs	r2, #1
 800124c:	f7ff fca0 	bl	8000b90 <eMBRegHoldingCB>
 8001250:	0003      	movs	r3, r0
 8001252:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001254:	197b      	adds	r3, r7, r5
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800125c:	19bc      	adds	r4, r7, r6
 800125e:	197b      	adds	r3, r7, r5
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	f000 fab0 	bl	80017c8 <prveMBError2Exception>
 8001268:	0003      	movs	r3, r0
 800126a:	7023      	strb	r3, [r4, #0]
 800126c:	e003      	b.n	8001276 <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800126e:	230f      	movs	r3, #15
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2203      	movs	r2, #3
 8001274:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	781b      	ldrb	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b005      	add	sp, #20
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001284 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800128e:	230f      	movs	r3, #15
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	2b05      	cmp	r3, #5
 800129c:	d962      	bls.n	8001364 <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3301      	adds	r3, #1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	200c      	movs	r0, #12
 80012a8:	183b      	adds	r3, r7, r0
 80012aa:	0212      	lsls	r2, r2, #8
 80012ac:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3302      	adds	r3, #2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b299      	uxth	r1, r3
 80012b6:	183b      	adds	r3, r7, r0
 80012b8:	183a      	adds	r2, r7, r0
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80012c0:	183b      	adds	r3, r7, r0
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	0005      	movs	r5, r0
 80012c6:	183b      	adds	r3, r7, r0
 80012c8:	3201      	adds	r2, #1
 80012ca:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3303      	adds	r3, #3
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	200a      	movs	r0, #10
 80012d6:	183b      	adds	r3, r7, r0
 80012d8:	0212      	lsls	r2, r2, #8
 80012da:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3304      	adds	r3, #4
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b299      	uxth	r1, r3
 80012e4:	183b      	adds	r3, r7, r0
 80012e6:	183a      	adds	r2, r7, r0
 80012e8:	8812      	ldrh	r2, [r2, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80012ee:	2409      	movs	r4, #9
 80012f0:	193b      	adds	r3, r7, r4
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	7952      	ldrb	r2, [r2, #5]
 80012f6:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 80012f8:	0001      	movs	r1, r0
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d02b      	beq.n	800135a <eMBFuncWriteMultipleHoldingRegister+0xd6>
 8001302:	187b      	adds	r3, r7, r1
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	2b78      	cmp	r3, #120	; 0x78
 8001308:	d827      	bhi.n	800135a <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800130a:	187b      	adds	r3, r7, r1
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	18db      	adds	r3, r3, r3
 8001312:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8001314:	193a      	adds	r2, r7, r4
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d11e      	bne.n	800135a <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1d98      	adds	r0, r3, #6
 8001320:	2608      	movs	r6, #8
 8001322:	19bc      	adds	r4, r7, r6
 8001324:	187b      	adds	r3, r7, r1
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	197b      	adds	r3, r7, r5
 800132a:	8819      	ldrh	r1, [r3, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	f7ff fc2f 	bl	8000b90 <eMBRegHoldingCB>
 8001332:	0003      	movs	r3, r0
 8001334:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001336:	19bb      	adds	r3, r7, r6
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800133e:	230f      	movs	r3, #15
 8001340:	18fc      	adds	r4, r7, r3
 8001342:	19bb      	adds	r3, r7, r6
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fa3e 	bl	80017c8 <prveMBError2Exception>
 800134c:	0003      	movs	r3, r0
 800134e:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001350:	e00c      	b.n	800136c <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2205      	movs	r2, #5
 8001356:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001358:	e008      	b.n	800136c <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800135a:	230f      	movs	r3, #15
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	2203      	movs	r2, #3
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e003      	b.n	800136c <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001364:	230f      	movs	r3, #15
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	2203      	movs	r2, #3
 800136a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800136c:	230f      	movs	r3, #15
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	0018      	movs	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	b005      	add	sp, #20
 8001378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800137a <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800137a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137c:	b087      	sub	sp, #28
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001384:	2317      	movs	r3, #23
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d000      	beq.n	8001396 <eMBFuncReadHoldingRegister+0x1c>
 8001394:	e075      	b.n	8001482 <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b29a      	uxth	r2, r3
 800139e:	2014      	movs	r0, #20
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	0212      	lsls	r2, r2, #8
 80013a4:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3302      	adds	r3, #2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b299      	uxth	r1, r3
 80013ae:	183b      	adds	r3, r7, r0
 80013b0:	183a      	adds	r2, r7, r0
 80013b2:	8812      	ldrh	r2, [r2, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80013b8:	183b      	adds	r3, r7, r0
 80013ba:	881a      	ldrh	r2, [r3, #0]
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	3201      	adds	r2, #1
 80013c0:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3303      	adds	r3, #3
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	2512      	movs	r5, #18
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	0212      	lsls	r2, r2, #8
 80013d0:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	197b      	adds	r3, r7, r5
 80013da:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80013dc:	197b      	adds	r3, r7, r5
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d049      	beq.n	8001478 <eMBFuncReadHoldingRegister+0xfe>
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b7d      	cmp	r3, #125	; 0x7d
 80013ea:	d845      	bhi.n	8001478 <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2200      	movs	r2, #0
 80013f4:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	60fa      	str	r2, [r7, #12]
 80013fc:	2203      	movs	r2, #3
 80013fe:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 800140c:	197b      	adds	r3, r7, r5
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b2d9      	uxtb	r1, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	60fa      	str	r2, [r7, #12]
 8001418:	1c0a      	adds	r2, r1, #0
 800141a:	1892      	adds	r2, r2, r2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800142c:	260b      	movs	r6, #11
 800142e:	19bc      	adds	r4, r7, r6
 8001430:	197b      	adds	r3, r7, r5
 8001432:	881a      	ldrh	r2, [r3, #0]
 8001434:	183b      	adds	r3, r7, r0
 8001436:	8819      	ldrh	r1, [r3, #0]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	2300      	movs	r3, #0
 800143c:	f7ff fba8 	bl	8000b90 <eMBRegHoldingCB>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001444:	19bb      	adds	r3, r7, r6
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d009      	beq.n	8001460 <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800144c:	2317      	movs	r3, #23
 800144e:	18fc      	adds	r4, r7, r3
 8001450:	19bb      	adds	r3, r7, r6
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	0018      	movs	r0, r3
 8001456:	f000 f9b7 	bl	80017c8 <prveMBError2Exception>
 800145a:	0003      	movs	r3, r0
 800145c:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800145e:	e014      	b.n	800148a <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	2312      	movs	r3, #18
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	18db      	adds	r3, r3, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001476:	e008      	b.n	800148a <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001478:	2317      	movs	r3, #23
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2203      	movs	r2, #3
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e003      	b.n	800148a <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001482:	2317      	movs	r3, #23
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2203      	movs	r2, #3
 8001488:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800148a:	2317      	movs	r3, #23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	781b      	ldrb	r3, [r3, #0]
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b007      	add	sp, #28
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001498 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80014a2:	2317      	movs	r3, #23
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d800      	bhi.n	80014b4 <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 80014b2:	e0d0      	b.n	8001656 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	2014      	movs	r0, #20
 80014be:	183b      	adds	r3, r7, r0
 80014c0:	0212      	lsls	r2, r2, #8
 80014c2:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3302      	adds	r3, #2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b299      	uxth	r1, r3
 80014cc:	183b      	adds	r3, r7, r0
 80014ce:	183a      	adds	r2, r7, r0
 80014d0:	8812      	ldrh	r2, [r2, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 80014d6:	183b      	adds	r3, r7, r0
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	0006      	movs	r6, r0
 80014dc:	183b      	adds	r3, r7, r0
 80014de:	3201      	adds	r2, #1
 80014e0:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3303      	adds	r3, #3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	2012      	movs	r0, #18
 80014ec:	183b      	adds	r3, r7, r0
 80014ee:	0212      	lsls	r2, r2, #8
 80014f0:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b299      	uxth	r1, r3
 80014fa:	183b      	adds	r3, r7, r0
 80014fc:	183a      	adds	r2, r7, r0
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3305      	adds	r3, #5
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b29a      	uxth	r2, r3
 800150c:	2410      	movs	r4, #16
 800150e:	193b      	adds	r3, r7, r4
 8001510:	0212      	lsls	r2, r2, #8
 8001512:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3306      	adds	r3, #6
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b299      	uxth	r1, r3
 800151c:	193b      	adds	r3, r7, r4
 800151e:	193a      	adds	r2, r7, r4
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 8001526:	193b      	adds	r3, r7, r4
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	193b      	adds	r3, r7, r4
 800152c:	3201      	adds	r2, #1
 800152e:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3307      	adds	r3, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b29a      	uxth	r2, r3
 8001538:	240e      	movs	r4, #14
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0212      	lsls	r2, r2, #8
 800153e:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3308      	adds	r3, #8
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b299      	uxth	r1, r3
 8001548:	193b      	adds	r3, r7, r4
 800154a:	193a      	adds	r2, r7, r4
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8001552:	220d      	movs	r2, #13
 8001554:	18bb      	adds	r3, r7, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	7a52      	ldrb	r2, [r2, #9]
 800155a:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 800155c:	183b      	adds	r3, r7, r0
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d100      	bne.n	8001566 <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 8001564:	e073      	b.n	800164e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8001566:	0005      	movs	r5, r0
 8001568:	183b      	adds	r3, r7, r0
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	2b7d      	cmp	r3, #125	; 0x7d
 800156e:	d900      	bls.n	8001572 <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 8001570:	e06d      	b.n	800164e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8001572:	0021      	movs	r1, r4
 8001574:	187b      	adds	r3, r7, r1
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d068      	beq.n	800164e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800157c:	187b      	adds	r3, r7, r1
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	2b79      	cmp	r3, #121	; 0x79
 8001582:	d864      	bhi.n	800164e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8001584:	187b      	adds	r3, r7, r1
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	005a      	lsls	r2, r3, #1
 800158a:	200d      	movs	r0, #13
 800158c:	183b      	adds	r3, r7, r0
 800158e:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8001590:	429a      	cmp	r2, r3
 8001592:	d15c      	bne.n	800164e <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	0018      	movs	r0, r3
 8001598:	300a      	adds	r0, #10
 800159a:	2216      	movs	r2, #22
 800159c:	18bc      	adds	r4, r7, r2
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	2310      	movs	r3, #16
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	8819      	ldrh	r1, [r3, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	f7ff faf1 	bl	8000b90 <eMBRegHoldingCB>
 80015ae:	0003      	movs	r3, r0
 80015b0:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80015b2:	2016      	movs	r0, #22
 80015b4:	183b      	adds	r3, r7, r0
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d139      	bne.n	8001630 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	2217      	movs	r2, #23
 80015ce:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80015dc:	197b      	adds	r3, r7, r5
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	1c0a      	adds	r2, r1, #0
 80015ea:	1892      	adds	r2, r2, r2
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80015fc:	183c      	adds	r4, r7, r0
 80015fe:	197b      	adds	r3, r7, r5
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	19bb      	adds	r3, r7, r6
 8001604:	8819      	ldrh	r1, [r3, #0]
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	2300      	movs	r3, #0
 800160a:	f7ff fac1 	bl	8000b90 <eMBRegHoldingCB>
 800160e:	0003      	movs	r3, r0
 8001610:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 8001612:	2016      	movs	r0, #22
 8001614:	183b      	adds	r3, r7, r0
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	197b      	adds	r3, r7, r5
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	18db      	adds	r3, r3, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8001630:	2216      	movs	r2, #22
 8001632:	18bb      	adds	r3, r7, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800163a:	2317      	movs	r3, #23
 800163c:	18fc      	adds	r4, r7, r3
 800163e:	18bb      	adds	r3, r7, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	0018      	movs	r0, r3
 8001644:	f000 f8c0 	bl	80017c8 <prveMBError2Exception>
 8001648:	0003      	movs	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800164c:	e003      	b.n	8001656 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800164e:	2317      	movs	r3, #23
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	2203      	movs	r2, #3
 8001654:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 8001656:	2317      	movs	r3, #23
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	781b      	ldrb	r3, [r3, #0]
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b007      	add	sp, #28
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001664 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800166e:	2317      	movs	r3, #23
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d000      	beq.n	8001680 <eMBFuncReadInputRegister+0x1c>
 800167e:	e07a      	b.n	8001776 <eMBFuncReadInputRegister+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3301      	adds	r3, #1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b29a      	uxth	r2, r3
 8001688:	2014      	movs	r0, #20
 800168a:	183b      	adds	r3, r7, r0
 800168c:	0212      	lsls	r2, r2, #8
 800168e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3302      	adds	r3, #2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b299      	uxth	r1, r3
 8001698:	183b      	adds	r3, r7, r0
 800169a:	183a      	adds	r2, r7, r0
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80016a2:	183b      	adds	r3, r7, r0
 80016a4:	881a      	ldrh	r2, [r3, #0]
 80016a6:	0005      	movs	r5, r0
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	3201      	adds	r2, #1
 80016ac:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3303      	adds	r3, #3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	2012      	movs	r0, #18
 80016b8:	183b      	adds	r3, r7, r0
 80016ba:	0212      	lsls	r2, r2, #8
 80016bc:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3304      	adds	r3, #4
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b299      	uxth	r1, r3
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	183a      	adds	r2, r7, r0
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80016d0:	183b      	adds	r3, r7, r0
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d049      	beq.n	800176c <eMBFuncReadInputRegister+0x108>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80016d8:	183b      	adds	r3, r7, r0
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b7c      	cmp	r3, #124	; 0x7c
 80016de:	d845      	bhi.n	800176c <eMBFuncReadInputRegister+0x108>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60fa      	str	r2, [r7, #12]
 80016f0:	2204      	movs	r2, #4
 80016f2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8001700:	183b      	adds	r3, r7, r0
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b2d9      	uxtb	r1, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	1c0a      	adds	r2, r1, #0
 800170e:	1892      	adds	r2, r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8001720:	260b      	movs	r6, #11
 8001722:	19bc      	adds	r4, r7, r6
 8001724:	183b      	adds	r3, r7, r0
 8001726:	881a      	ldrh	r2, [r3, #0]
 8001728:	197b      	adds	r3, r7, r5
 800172a:	8819      	ldrh	r1, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff f9d0 	bl	8000ad4 <eMBRegInputCB>
 8001734:	0003      	movs	r3, r0
 8001736:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001738:	19bb      	adds	r3, r7, r6
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d009      	beq.n	8001754 <eMBFuncReadInputRegister+0xf0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001740:	2317      	movs	r3, #23
 8001742:	18fc      	adds	r4, r7, r3
 8001744:	19bb      	adds	r3, r7, r6
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	0018      	movs	r0, r3
 800174a:	f000 f83d 	bl	80017c8 <prveMBError2Exception>
 800174e:	0003      	movs	r3, r0
 8001750:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001752:	e014      	b.n	800177e <eMBFuncReadInputRegister+0x11a>
            }
            else
            {
                *usLen += usRegCount * 2;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	881a      	ldrh	r2, [r3, #0]
 8001758:	2312      	movs	r3, #18
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	18db      	adds	r3, r3, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	b29a      	uxth	r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800176a:	e008      	b.n	800177e <eMBFuncReadInputRegister+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800176c:	2317      	movs	r3, #23
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2203      	movs	r2, #3
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e003      	b.n	800177e <eMBFuncReadInputRegister+0x11a>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001776:	2317      	movs	r3, #23
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	2203      	movs	r2, #3
 800177c:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800177e:	2317      	movs	r3, #23
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b007      	add	sp, #28
 800178a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800178c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1c58      	adds	r0, r3, #1
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <eMBFuncReportSlaveID+0x34>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	001a      	movs	r2, r3
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <eMBFuncReportSlaveID+0x38>)
 80017a2:	0019      	movs	r1, r3
 80017a4:	f003 fa17 	bl	8004bd6 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <eMBFuncReportSlaveID+0x34>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000298 	.word	0x20000298
 80017c4:	20000278 	.word	0x20000278

080017c8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	0002      	movs	r2, r0
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 80017d4:	1dfb      	adds	r3, r7, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d00f      	beq.n	80017fc <prveMBError2Exception+0x34>
 80017dc:	dc13      	bgt.n	8001806 <prveMBError2Exception+0x3e>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <prveMBError2Exception+0x20>
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d005      	beq.n	80017f2 <prveMBError2Exception+0x2a>
 80017e6:	e00e      	b.n	8001806 <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
            break;
 80017f0:	e00e      	b.n	8001810 <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80017f2:	230f      	movs	r3, #15
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
            break;
 80017fa:	e009      	b.n	8001810 <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2206      	movs	r2, #6
 8001802:	701a      	strb	r2, [r3, #0]
            break;
 8001804:	e004      	b.n	8001810 <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8001806:	230f      	movs	r3, #15
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2204      	movs	r2, #4
 800180c:	701a      	strb	r2, [r3, #0]
            break;
 800180e:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	0004      	movs	r4, r0
 8001828:	0008      	movs	r0, r1
 800182a:	0011      	movs	r1, r2
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	1c22      	adds	r2, r4, #0
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	1dbb      	adds	r3, r7, #6
 8001836:	1c02      	adds	r2, r0, #0
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	1d7b      	adds	r3, r7, #5
 800183c:	1c0a      	adds	r2, r1, #0
 800183e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001840:	230f      	movs	r3, #15
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <eMBInit+0x40>
 8001850:	1dbb      	adds	r3, r7, #6
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8001858:	1dbb      	adds	r3, r7, #6
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2bf7      	cmp	r3, #247	; 0xf7
 800185e:	d904      	bls.n	800186a <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e047      	b.n	80018fa <eMBInit+0xda>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <eMBInit+0xe8>)
 800186c:	1dba      	adds	r2, r7, #6
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d127      	bne.n	80018ca <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <eMBInit+0xec>)
 800187c:	4a24      	ldr	r2, [pc, #144]	; (8001910 <eMBInit+0xf0>)
 800187e:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <eMBInit+0xf4>)
 8001882:	4a25      	ldr	r2, [pc, #148]	; (8001918 <eMBInit+0xf8>)
 8001884:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8001886:	4b25      	ldr	r3, [pc, #148]	; (800191c <eMBInit+0xfc>)
 8001888:	4a25      	ldr	r2, [pc, #148]	; (8001920 <eMBInit+0x100>)
 800188a:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <eMBInit+0x104>)
 800188e:	4a26      	ldr	r2, [pc, #152]	; (8001928 <eMBInit+0x108>)
 8001890:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <eMBInit+0x10c>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <eMBInit+0x110>)
 800189a:	4a26      	ldr	r2, [pc, #152]	; (8001934 <eMBInit+0x114>)
 800189c:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <eMBInit+0x118>)
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <eMBInit+0x11c>)
 80018a2:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <eMBInit+0x120>)
 80018a6:	4a27      	ldr	r2, [pc, #156]	; (8001944 <eMBInit+0x124>)
 80018a8:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <eMBInit+0xe8>)
 80018ac:	7818      	ldrb	r0, [r3, #0]
 80018ae:	230f      	movs	r3, #15
 80018b0:	18fc      	adds	r4, r7, r3
 80018b2:	2320      	movs	r3, #32
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781d      	ldrb	r5, [r3, #0]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	1d7b      	adds	r3, r7, #5
 80018bc:	7819      	ldrb	r1, [r3, #0]
 80018be:	002b      	movs	r3, r5
 80018c0:	f000 faa0 	bl	8001e04 <eMBRTUInit>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
            break;
 80018c8:	e003      	b.n	80018d2 <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 80018ca:	230f      	movs	r3, #15
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 80018d2:	240f      	movs	r4, #15
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10e      	bne.n	80018fa <eMBInit+0xda>
        {
            if( !xMBPortEventInit(  ) )
 80018dc:	f000 f91e 	bl	8001b1c <xMBPortEventInit>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d103      	bne.n	80018ec <eMBInit+0xcc>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	2203      	movs	r2, #3
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e006      	b.n	80018fa <eMBInit+0xda>
            }
            else
            {
                eMBCurrentMode = eMode;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <eMBInit+0x128>)
 80018ee:	1dfa      	adds	r2, r7, #7
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <eMBInit+0x12c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	781b      	ldrb	r3, [r3, #0]
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bdb0      	pop	{r4, r5, r7, pc}
 8001908:	2000029a 	.word	0x2000029a
 800190c:	200002a0 	.word	0x200002a0
 8001910:	08001ea1 	.word	0x08001ea1
 8001914:	200002a4 	.word	0x200002a4
 8001918:	08001ec9 	.word	0x08001ec9
 800191c:	2000029c 	.word	0x2000029c
 8001920:	08001f99 	.word	0x08001f99
 8001924:	200002a8 	.word	0x200002a8
 8001928:	08001ee9 	.word	0x08001ee9
 800192c:	200002ac 	.word	0x200002ac
 8001930:	200002b0 	.word	0x200002b0
 8001934:	08002081 	.word	0x08002081
 8001938:	200002b4 	.word	0x200002b4
 800193c:	08002155 	.word	0x08002155
 8001940:	200002b8 	.word	0x200002b8
 8001944:	08002209 	.word	0x08002209
 8001948:	2000029b 	.word	0x2000029b
 800194c:	20000006 	.word	0x20000006

08001950 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8001956:	1dfb      	adds	r3, r7, #7
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <eMBEnable+0x34>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d106      	bne.n	8001972 <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <eMBEnable+0x38>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <eMBEnable+0x34>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e002      	b.n	8001978 <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	2206      	movs	r2, #6
 8001976:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	781b      	ldrb	r3, [r3, #0]
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000006 	.word	0x20000006
 8001988:	200002a0 	.word	0x200002a0

0800198c <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8001992:	1cfb      	adds	r3, r7, #3
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001998:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <eMBPoll+0x168>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 80019a0:	2306      	movs	r3, #6
 80019a2:	e0a3      	b.n	8001aec <eMBPoll+0x160>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f8da 	bl	8001b60 <xMBPortEventGet>
 80019ac:	0003      	movs	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d000      	beq.n	80019b4 <eMBPoll+0x28>
 80019b2:	e09a      	b.n	8001aea <eMBPoll+0x15e>
    {
        switch ( eEvent )
 80019b4:	1cbb      	adds	r3, r7, #2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d100      	bne.n	80019be <eMBPoll+0x32>
 80019bc:	e08e      	b.n	8001adc <eMBPoll+0x150>
 80019be:	dd00      	ble.n	80019c2 <eMBPoll+0x36>
 80019c0:	e093      	b.n	8001aea <eMBPoll+0x15e>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d024      	beq.n	8001a10 <eMBPoll+0x84>
 80019c6:	dd00      	ble.n	80019ca <eMBPoll+0x3e>
 80019c8:	e08f      	b.n	8001aea <eMBPoll+0x15e>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d100      	bne.n	80019d0 <eMBPoll+0x44>
 80019ce:	e087      	b.n	8001ae0 <eMBPoll+0x154>
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d000      	beq.n	80019d6 <eMBPoll+0x4a>
 80019d4:	e089      	b.n	8001aea <eMBPoll+0x15e>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80019d6:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <eMBPoll+0x16c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1cfc      	adds	r4, r7, #3
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <eMBPoll+0x170>)
 80019de:	4948      	ldr	r1, [pc, #288]	; (8001b00 <eMBPoll+0x174>)
 80019e0:	4848      	ldr	r0, [pc, #288]	; (8001b04 <eMBPoll+0x178>)
 80019e2:	4798      	blx	r3
 80019e4:	0003      	movs	r3, r0
 80019e6:	7023      	strb	r3, [r4, #0]
            if( eStatus == MB_ENOERR )
 80019e8:	1cfb      	adds	r3, r7, #3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d000      	beq.n	80019f2 <eMBPoll+0x66>
 80019f0:	e078      	b.n	8001ae4 <eMBPoll+0x158>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <eMBPoll+0x178>)
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <eMBPoll+0x17c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d004      	beq.n	8001a08 <eMBPoll+0x7c>
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <eMBPoll+0x178>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d000      	beq.n	8001a08 <eMBPoll+0x7c>
 8001a06:	e06d      	b.n	8001ae4 <eMBPoll+0x158>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f000 f893 	bl	8001b34 <xMBPortEventPost>
                }
            }
            break;
 8001a0e:	e069      	b.n	8001ae4 <eMBPoll+0x158>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8001a10:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <eMBPoll+0x174>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <eMBPoll+0x180>)
 8001a18:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <eMBPoll+0x184>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e020      	b.n	8001a68 <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <eMBPoll+0x188>)
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	00d2      	lsls	r2, r2, #3
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01e      	beq.n	8001a70 <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8001a32:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <eMBPoll+0x188>)
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	00d2      	lsls	r2, r2, #3
 8001a38:	5cd2      	ldrb	r2, [r2, r3]
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <eMBPoll+0x180>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d10f      	bne.n	8001a62 <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8001a42:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <eMBPoll+0x188>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	18d3      	adds	r3, r2, r3
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <eMBPoll+0x174>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	492a      	ldr	r1, [pc, #168]	; (8001afc <eMBPoll+0x170>)
 8001a54:	0018      	movs	r0, r3
 8001a56:	4790      	blx	r2
 8001a58:	0003      	movs	r3, r0
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <eMBPoll+0x184>)
 8001a5e:	701a      	strb	r2, [r3, #0]
                    break;
 8001a60:	e007      	b.n	8001a72 <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	dddb      	ble.n	8001a26 <eMBPoll+0x9a>
 8001a6e:	e000      	b.n	8001a72 <eMBPoll+0xe6>
                    break;
 8001a70:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <eMBPoll+0x178>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d036      	beq.n	8001ae8 <eMBPoll+0x15c>
            {
                if( eException != MB_EX_NONE )
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <eMBPoll+0x184>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01e      	beq.n	8001ac0 <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <eMBPoll+0x170>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <eMBPoll+0x180>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <eMBPoll+0x174>)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <eMBPoll+0x170>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	1c58      	adds	r0, r3, #1
 8001a96:	b284      	uxth	r4, r0
 8001a98:	4818      	ldr	r0, [pc, #96]	; (8001afc <eMBPoll+0x170>)
 8001a9a:	8004      	strh	r4, [r0, #0]
 8001a9c:	18cb      	adds	r3, r1, r3
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	4249      	negs	r1, r1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <eMBPoll+0x174>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <eMBPoll+0x170>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	b288      	uxth	r0, r1
 8001ab4:	4911      	ldr	r1, [pc, #68]	; (8001afc <eMBPoll+0x170>)
 8001ab6:	8008      	strh	r0, [r1, #0]
 8001ab8:	18d3      	adds	r3, r2, r3
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <eMBPoll+0x184>)
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <eMBPoll+0x18c>)
 8001ac2:	681d      	ldr	r5, [r3, #0]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <eMBPoll+0x17c>)
 8001ac6:	7818      	ldrb	r0, [r3, #0]
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <eMBPoll+0x174>)
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <eMBPoll+0x170>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	1cfc      	adds	r4, r7, #3
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	47a8      	blx	r5
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	7023      	strb	r3, [r4, #0]
            }
            break;
 8001ada:	e005      	b.n	8001ae8 <eMBPoll+0x15c>

        case EV_FRAME_SENT:
            break;
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	e004      	b.n	8001aea <eMBPoll+0x15e>
            break;
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	e002      	b.n	8001aea <eMBPoll+0x15e>
            break;
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	e000      	b.n	8001aea <eMBPoll+0x15e>
            break;
 8001ae8:	46c0      	nop			; (mov r8, r8)
        }
    }
    return MB_ENOERR;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bdb0      	pop	{r4, r5, r7, pc}
 8001af4:	20000006 	.word	0x20000006
 8001af8:	200002a8 	.word	0x200002a8
 8001afc:	200002c4 	.word	0x200002c4
 8001b00:	200002c0 	.word	0x200002c0
 8001b04:	200002bc 	.word	0x200002bc
 8001b08:	2000029a 	.word	0x2000029a
 8001b0c:	200002c6 	.word	0x200002c6
 8001b10:	200002c7 	.word	0x200002c7
 8001b14:	20000008 	.word	0x20000008
 8001b18:	2000029c 	.word	0x2000029c

08001b1c <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <xMBPortEventInit+0x14>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	200002c9 	.word	0x200002c9

08001b34 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	701a      	strb	r2, [r3, #0]
    xEventInQueue = TRUE;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <xMBPortEventPost+0x24>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <xMBPortEventPost+0x28>)
 8001b48:	1dfa      	adds	r2, r7, #7
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200002c9 	.word	0x200002c9
 8001b5c:	200002c8 	.word	0x200002c8

08001b60 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8001b68:	210f      	movs	r1, #15
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]

    if( xEventInQueue )
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <xMBPortEventGet+0x3c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <xMBPortEventGet+0x2c>
    {
        *eEvent = eQueuedEvent;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <xMBPortEventGet+0x40>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <xMBPortEventGet+0x3c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
    }
    return xEventHappened;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	781b      	ldrb	r3, [r3, #0]
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b004      	add	sp, #16
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	200002c9 	.word	0x200002c9
 8001ba0:	200002c8 	.word	0x200002c8

08001ba4 <vMBPortSerialEnable>:
#define hlpuart1 huart1
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	0002      	movs	r2, r0
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	1dbb      	adds	r3, r7, #6
 8001bb2:	1c0a      	adds	r2, r1, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00f      	beq.n	8001bde <vMBPortSerialEnable+0x3a>
	HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_RESET);
 8001bbe:	2390      	movs	r3, #144	; 0x90
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f001 f84e 	bl	8002c68 <HAL_GPIO_WritePin>
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <vMBPortSerialEnable+0x4a>
  } else {    
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2120      	movs	r1, #32
 8001bea:	438a      	bics	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
  }
  
  if (xTxEnable) {
 8001bee:	1dbb      	adds	r3, r7, #6
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00f      	beq.n	8001c16 <vMBPortSerialEnable+0x72>
	HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_SET);
 8001bf6:	2390      	movs	r3, #144	; 0x90
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 f832 	bl	8002c68 <HAL_GPIO_WritePin>
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_TXE);
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
  } else {
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_TXE);
  }  
}
 8001c14:	e007      	b.n	8001c26 <vMBPortSerialEnable+0x82>
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_TXE);
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <vMBPortSerialEnable+0x8c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	438a      	bics	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	20000154 	.word	0x20000154

08001c34 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	0004      	movs	r4, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	0010      	movs	r0, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	1c22      	adds	r2, r4, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	1c02      	adds	r2, r0, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	1d7b      	adds	r3, r7, #5
 8001c50:	1c0a      	adds	r2, r1, #0
 8001c52:	701a      	strb	r2, [r3, #0]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b003      	add	sp, #12
 8001c5c:	bd90      	pop	{r4, r7, pc}
	...

08001c60 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	0002      	movs	r2, r0
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	701a      	strb	r2, [r3, #0]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ucByte, 1, 10));
 8001c6c:	1df9      	adds	r1, r7, #7
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <xMBPortSerialPutByte+0x28>)
 8001c70:	230a      	movs	r3, #10
 8001c72:	2201      	movs	r2, #1
 8001c74:	f002 f9f6 	bl	8004064 <HAL_UART_Transmit>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	425a      	negs	r2, r3
 8001c7c:	4153      	adcs	r3, r2
 8001c7e:	b2db      	uxtb	r3, r3
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000154 	.word	0x20000154

08001c8c <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(hlpuart1.Instance->RDR & (uint8_t)0x00FF);
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <xMBPortSerialGetByte+0x20>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000154 	.word	0x20000154

08001cb0 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	1dbb      	adds	r3, r7, #6
 8001cba:	801a      	strh	r2, [r3, #0]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim2.Instance = TIM2;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <xMBPortTimersInit+0x7c>)
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	05d2      	lsls	r2, r2, #23
 8001cc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8001cc4:	f001 fc5c 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	4919      	ldr	r1, [pc, #100]	; (8001d30 <xMBPortTimersInit+0x80>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7fe fa25 	bl	800011c <__udivsi3>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <xMBPortTimersInit+0x7c>)
 8001cd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <xMBPortTimersInit+0x7c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <xMBPortTimersInit+0x7c>)
 8001ce2:	2231      	movs	r2, #49	; 0x31
 8001ce4:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <xMBPortTimersInit+0x84>)
 8001ce8:	1dba      	adds	r2, r7, #6
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	801a      	strh	r2, [r3, #0]
  
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <xMBPortTimersInit+0x7c>)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f001 fd29 	bl	8003748 <HAL_TIM_Base_Init>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d001      	beq.n	8001cfe <xMBPortTimersInit+0x4e>
  {
    return FALSE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e011      	b.n	8001d22 <xMBPortTimersInit+0x72>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cfe:	2108      	movs	r1, #8
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2220      	movs	r2, #32
 8001d04:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0c:	187a      	adds	r2, r7, r1
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <xMBPortTimersInit+0x7c>)
 8001d10:	0011      	movs	r1, r2
 8001d12:	0018      	movs	r0, r3
 8001d14:	f002 f8ea 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d001      	beq.n	8001d20 <xMBPortTimersInit+0x70>
  {
    return FALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <xMBPortTimersInit+0x72>
  }
  
  return TRUE;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b004      	add	sp, #16
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	2000010c 	.word	0x2000010c
 8001d30:	000f4240 	.word	0x000f4240
 8001d34:	200002ca 	.word	0x200002ca

08001d38 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <vMBPortTimersEnable+0x1c>)
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <vMBPortTimersEnable+0x20>)
 8001d42:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <vMBPortTimersEnable+0x24>)
 8001d46:	0018      	movs	r0, r3
 8001d48:	f001 fd4e 	bl	80037e8 <HAL_TIM_Base_Start_IT>
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	200002ca 	.word	0x200002ca
 8001d58:	200002cc 	.word	0x200002cc
 8001d5c:	2000010c 	.word	0x2000010c

08001d60 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim2);
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <vMBPortTimersDisable+0x14>)
 8001d66:	0018      	movs	r0, r3
 8001d68:	f001 fd8a 	bl	8003880 <HAL_TIM_Base_Stop_IT>
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	2000010c 	.word	0x2000010c

08001d78 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	000a      	movs	r2, r1
 8001d82:	1cbb      	adds	r3, r7, #2
 8001d84:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 8001d86:	230f      	movs	r3, #15
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 8001d8e:	230e      	movs	r3, #14
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 8001d96:	e019      	b.n	8001dcc <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	200e      	movs	r0, #14
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4053      	eors	r3, r2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <usMBCRC16+0x84>)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	7819      	ldrb	r1, [r3, #0]
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	200f      	movs	r0, #15
 8001db8:	183a      	adds	r2, r7, r0
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	404a      	eors	r2, r1
 8001dbe:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 8001dc0:	183b      	adds	r3, r7, r0
 8001dc2:	490f      	ldr	r1, [pc, #60]	; (8001e00 <usMBCRC16+0x88>)
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	188a      	adds	r2, r1, r2
 8001dc8:	7812      	ldrb	r2, [r2, #0]
 8001dca:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8001dcc:	1cbb      	adds	r3, r7, #2
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	1cba      	adds	r2, r7, #2
 8001dd2:	1e59      	subs	r1, r3, #1
 8001dd4:	8011      	strh	r1, [r2, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1de      	bne.n	8001d98 <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8001dda:	230f      	movs	r3, #15
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	230e      	movs	r3, #14
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	b29b      	uxth	r3, r3
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	08005928 	.word	0x08005928
 8001e00:	08005a28 	.word	0x08005a28

08001e04 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	0004      	movs	r4, r0
 8001e0c:	0008      	movs	r0, r1
 8001e0e:	603a      	str	r2, [r7, #0]
 8001e10:	0019      	movs	r1, r3
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	1c22      	adds	r2, r4, #0
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	1dbb      	adds	r3, r7, #6
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	1d7b      	adds	r3, r7, #5
 8001e20:	1c0a      	adds	r2, r1, #0
 8001e22:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001e24:	240f      	movs	r4, #15
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	46c0      	nop			; (mov r8, r8)

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8001e30:	1d7b      	adds	r3, r7, #5
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	6839      	ldr	r1, [r7, #0]
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	7818      	ldrb	r0, [r3, #0]
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	f7ff fef9 	bl	8001c34 <xMBPortSerialInit>
 8001e42:	0003      	movs	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d003      	beq.n	8001e50 <eMBRTUInit+0x4c>
    {
        eStatus = MB_EPORTERR;
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e01b      	b.n	8001e88 <eMBRTUInit+0x84>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	2396      	movs	r3, #150	; 0x96
 8001e54:	01db      	lsls	r3, r3, #7
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d902      	bls.n	8001e60 <eMBRTUInit+0x5c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8001e5a:	2323      	movs	r3, #35	; 0x23
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	e007      	b.n	8001e70 <eMBRTUInit+0x6c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	0019      	movs	r1, r3
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <eMBRTUInit+0x98>)
 8001e68:	f7fe f958 	bl	800011c <__udivsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ff1b 	bl	8001cb0 <xMBPortTimersInit>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <eMBRTUInit+0x84>
        {
            eStatus = MB_EPORTERR;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2203      	movs	r2, #3
 8001e86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e88:	b662      	cpsie	i
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b005      	add	sp, #20
 8001e98:	bd90      	pop	{r4, r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	00177fa0 	.word	0x00177fa0

08001ea0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <eMBRTUStart+0x24>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff fe77 	bl	8001ba4 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8001eb6:	f7ff ff3f 	bl	8001d38 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8001eba:	b662      	cpsie	i
}
 8001ebc:	46c0      	nop			; (mov r8, r8)

    EXIT_CRITICAL_SECTION(  );
}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200002cf 	.word	0x200002cf

08001ec8 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	46c0      	nop			; (mov r8, r8)
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fe66 	bl	8001ba4 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8001ed8:	f7ff ff42 	bl	8001d60 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8001edc:	b662      	cpsie	i
}
 8001ede:	46c0      	nop			; (mov r8, r8)
    EXIT_CRITICAL_SECTION(  );
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8001ef4:	2316      	movs	r3, #22
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001efc:	2317      	movs	r3, #23
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	46c0      	nop			; (mov r8, r8)

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <eMBRTUReceive+0x98>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d905      	bls.n	8001f1e <eMBRTUReceive+0x36>
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <eMBRTUReceive+0x9c>)
 8001f14:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <eMBRTUReceive+0xa0>)
 8001f16:	481d      	ldr	r0, [pc, #116]	; (8001f8c <eMBRTUReceive+0xa4>)
 8001f18:	219c      	movs	r1, #156	; 0x9c
 8001f1a:	f002 fc9b 	bl	8004854 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <eMBRTUReceive+0x98>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d91d      	bls.n	8001f64 <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <eMBRTUReceive+0x98>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <eMBRTUReceive+0xa8>)
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff ff20 	bl	8001d78 <usMBCRC16>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d113      	bne.n	8001f64 <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <eMBRTUReceive+0xa8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <eMBRTUReceive+0x98>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <eMBRTUReceive+0xac>)
 8001f58:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8001f5a:	2316      	movs	r3, #22
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e003      	b.n	8001f6c <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 8001f64:	2317      	movs	r3, #23
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2205      	movs	r2, #5
 8001f6a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f6c:	b662      	cpsie	i
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8001f70:	2317      	movs	r3, #23
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b006      	add	sp, #24
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	200003d6 	.word	0x200003d6
 8001f84:	08005830 	.word	0x08005830
 8001f88:	08005b28 	.word	0x08005b28
 8001f8c:	08005858 	.word	0x08005858
 8001f90:	200002d0 	.word	0x200002d0
 8001f94:	200002d1 	.word	0x200002d1

08001f98 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6039      	str	r1, [r7, #0]
 8001fa0:	0011      	movs	r1, r2
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	1c02      	adds	r2, r0, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	1c0a      	adds	r2, r1, #0
 8001fac:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001fae:	230f      	movs	r3, #15
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb6:	b672      	cpsid	i
}
 8001fb8:	46c0      	nop			; (mov r8, r8)

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <eMBRTUSend+0xd4>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d145      	bne.n	8002050 <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	1e5a      	subs	r2, r3, #1
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <eMBRTUSend+0xd8>)
 8001fca:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <eMBRTUSend+0xdc>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <eMBRTUSend+0xd8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1dfa      	adds	r2, r7, #7
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <eMBRTUSend+0xdc>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <eMBRTUSend+0xdc>)
 8001fec:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <eMBRTUSend+0xd8>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <eMBRTUSend+0xdc>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	250c      	movs	r5, #12
 8001ffa:	197c      	adds	r4, r7, r5
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f7ff feba 	bl	8001d78 <usMBCRC16>
 8002004:	0003      	movs	r3, r0
 8002006:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <eMBRTUSend+0xdc>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	b291      	uxth	r1, r2
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <eMBRTUSend+0xdc>)
 8002014:	8011      	strh	r1, [r2, #0]
 8002016:	001a      	movs	r2, r3
 8002018:	197b      	adds	r3, r7, r5
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b2d9      	uxtb	r1, r3
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <eMBRTUSend+0xe0>)
 8002020:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8002022:	197b      	adds	r3, r7, r5
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b299      	uxth	r1, r3
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <eMBRTUSend+0xdc>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	b290      	uxth	r0, r2
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <eMBRTUSend+0xdc>)
 8002036:	8010      	strh	r0, [r2, #0]
 8002038:	001a      	movs	r2, r3
 800203a:	b2c9      	uxtb	r1, r1
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <eMBRTUSend+0xe0>)
 800203e:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <eMBRTUSend+0xe4>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8002046:	2101      	movs	r1, #1
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff fdab 	bl	8001ba4 <vMBPortSerialEnable>
 800204e:	e003      	b.n	8002058 <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	2205      	movs	r2, #5
 8002056:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002058:	b662      	cpsie	i
}
 800205a:	46c0      	nop			; (mov r8, r8)
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 800205c:	230f      	movs	r3, #15
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bdb0      	pop	{r4, r5, r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	200002cf 	.word	0x200002cf
 8002070:	200003d0 	.word	0x200003d0
 8002074:	200003d4 	.word	0x200003d4
 8002078:	200002d0 	.word	0x200002d0
 800207c:	200002ce 	.word	0x200002ce

08002080 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <xMBRTUReceiveFSM+0xb8>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <xMBRTUReceiveFSM+0x22>
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <xMBRTUReceiveFSM+0xbc>)
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <xMBRTUReceiveFSM+0xc0>)
 800209a:	482a      	ldr	r0, [pc, #168]	; (8002144 <xMBRTUReceiveFSM+0xc4>)
 800209c:	21e6      	movs	r1, #230	; 0xe6
 800209e:	f002 fbd9 	bl	8004854 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff fdf1 	bl	8001c8c <xMBPortSerialGetByte>

    switch ( eRcvState )
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <xMBRTUReceiveFSM+0xc8>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d00b      	beq.n	80020cc <xMBRTUReceiveFSM+0x4c>
 80020b4:	dc3a      	bgt.n	800212c <xMBRTUReceiveFSM+0xac>
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d020      	beq.n	80020fc <xMBRTUReceiveFSM+0x7c>
 80020ba:	dc37      	bgt.n	800212c <xMBRTUReceiveFSM+0xac>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <xMBRTUReceiveFSM+0x46>
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d006      	beq.n	80020d2 <xMBRTUReceiveFSM+0x52>
 80020c4:	e032      	b.n	800212c <xMBRTUReceiveFSM+0xac>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 80020c6:	f7ff fe37 	bl	8001d38 <vMBPortTimersEnable>
        break;
 80020ca:	e02f      	b.n	800212c <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 80020cc:	f7ff fe34 	bl	8001d38 <vMBPortTimersEnable>
        break;
 80020d0:	e02c      	b.n	800212c <xMBRTUReceiveFSM+0xac>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <xMBRTUReceiveFSM+0xcc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <xMBRTUReceiveFSM+0xcc>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	b291      	uxth	r1, r2
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <xMBRTUReceiveFSM+0xcc>)
 80020e4:	8011      	strh	r1, [r2, #0]
 80020e6:	001a      	movs	r2, r3
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <xMBRTUReceiveFSM+0xd0>)
 80020ee:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <xMBRTUReceiveFSM+0xc8>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80020f6:	f7ff fe1f 	bl	8001d38 <vMBPortTimersEnable>
        break;
 80020fa:	e017      	b.n	800212c <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <xMBRTUReceiveFSM+0xcc>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	2bff      	cmp	r3, #255	; 0xff
 8002104:	d80c      	bhi.n	8002120 <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <xMBRTUReceiveFSM+0xcc>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	b291      	uxth	r1, r2
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <xMBRTUReceiveFSM+0xcc>)
 8002112:	8011      	strh	r1, [r2, #0]
 8002114:	001a      	movs	r2, r3
 8002116:	1dbb      	adds	r3, r7, #6
 8002118:	7819      	ldrb	r1, [r3, #0]
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <xMBRTUReceiveFSM+0xd0>)
 800211c:	5499      	strb	r1, [r3, r2]
 800211e:	e002      	b.n	8002126 <xMBRTUReceiveFSM+0xa6>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <xMBRTUReceiveFSM+0xc8>)
 8002122:	2203      	movs	r2, #3
 8002124:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8002126:	f7ff fe07 	bl	8001d38 <vMBPortTimersEnable>
        break;
 800212a:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200002ce 	.word	0x200002ce
 800213c:	08005874 	.word	0x08005874
 8002140:	08005b38 	.word	0x08005b38
 8002144:	08005858 	.word	0x08005858
 8002148:	200002cf 	.word	0x200002cf
 800214c:	200003d6 	.word	0x200003d6
 8002150:	200002d0 	.word	0x200002d0

08002154 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <xMBRTUTransmitFSM+0x98>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d006      	beq.n	8002178 <xMBRTUTransmitFSM+0x24>
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <xMBRTUTransmitFSM+0x9c>)
 800216c:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <xMBRTUTransmitFSM+0xa0>)
 800216e:	2122      	movs	r1, #34	; 0x22
 8002170:	31ff      	adds	r1, #255	; 0xff
 8002172:	4821      	ldr	r0, [pc, #132]	; (80021f8 <xMBRTUTransmitFSM+0xa4>)
 8002174:	f002 fb6e 	bl	8004854 <__assert_func>

    switch ( eSndState )
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <xMBRTUTransmitFSM+0xa8>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <xMBRTUTransmitFSM+0x34>
 8002182:	2b01      	cmp	r3, #1
 8002184:	d005      	beq.n	8002192 <xMBRTUTransmitFSM+0x3e>
 8002186:	e02b      	b.n	80021e0 <xMBRTUTransmitFSM+0x8c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8002188:	2100      	movs	r1, #0
 800218a:	2001      	movs	r0, #1
 800218c:	f7ff fd0a 	bl	8001ba4 <vMBPortSerialEnable>
        break;
 8002190:	e026      	b.n	80021e0 <xMBRTUTransmitFSM+0x8c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <xMBRTUTransmitFSM+0xac>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <xMBRTUTransmitFSM+0x70>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <xMBRTUTransmitFSM+0xb0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fd5b 	bl	8001c60 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <xMBRTUTransmitFSM+0xb0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <xMBRTUTransmitFSM+0xb0>)
 80021b2:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <xMBRTUTransmitFSM+0xac>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <xMBRTUTransmitFSM+0xac>)
 80021c0:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80021c2:	e00c      	b.n	80021de <xMBRTUTransmitFSM+0x8a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80021c4:	1dfc      	adds	r4, r7, #7
 80021c6:	2003      	movs	r0, #3
 80021c8:	f7ff fcb4 	bl	8001b34 <xMBPortEventPost>
 80021cc:	0003      	movs	r3, r0
 80021ce:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 80021d0:	2100      	movs	r1, #0
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff fce6 	bl	8001ba4 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <xMBRTUTransmitFSM+0xa8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
        break;
 80021de:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b003      	add	sp, #12
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	200002cf 	.word	0x200002cf
 80021f0:	08005890 	.word	0x08005890
 80021f4:	08005b4c 	.word	0x08005b4c
 80021f8:	08005858 	.word	0x08005858
 80021fc:	200002ce 	.word	0x200002ce
 8002200:	200003d4 	.word	0x200003d4
 8002204:	200003d0 	.word	0x200003d0

08002208 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <xMBRTUTimerT35Expired+0x84>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b03      	cmp	r3, #3
 800221c:	d029      	beq.n	8002272 <xMBRTUTimerT35Expired+0x6a>
 800221e:	dc12      	bgt.n	8002246 <xMBRTUTimerT35Expired+0x3e>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <xMBRTUTimerT35Expired+0x22>
 8002224:	2b02      	cmp	r3, #2
 8002226:	d007      	beq.n	8002238 <xMBRTUTimerT35Expired+0x30>
 8002228:	e00d      	b.n	8002246 <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800222a:	1dfc      	adds	r4, r7, #7
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff fc81 	bl	8001b34 <xMBPortEventPost>
 8002232:	0003      	movs	r3, r0
 8002234:	7023      	strb	r3, [r4, #0]
        break;
 8002236:	e01d      	b.n	8002274 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8002238:	1dfc      	adds	r4, r7, #7
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff fc7a 	bl	8001b34 <xMBPortEventPost>
 8002240:	0003      	movs	r3, r0
 8002242:	7023      	strb	r3, [r4, #0]
        break;
 8002244:	e016      	b.n	8002274 <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <xMBRTUTimerT35Expired+0x84>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d011      	beq.n	8002274 <xMBRTUTimerT35Expired+0x6c>
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <xMBRTUTimerT35Expired+0x84>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d00c      	beq.n	8002274 <xMBRTUTimerT35Expired+0x6c>
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <xMBRTUTimerT35Expired+0x84>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b03      	cmp	r3, #3
 8002262:	d007      	beq.n	8002274 <xMBRTUTimerT35Expired+0x6c>
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <xMBRTUTimerT35Expired+0x88>)
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <xMBRTUTimerT35Expired+0x8c>)
 8002268:	21ad      	movs	r1, #173	; 0xad
 800226a:	0049      	lsls	r1, r1, #1
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <xMBRTUTimerT35Expired+0x90>)
 800226e:	f002 faf1 	bl	8004854 <__assert_func>
        break;
 8002272:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8002274:	f7ff fd74 	bl	8001d60 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <xMBRTUTimerT35Expired+0x84>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b003      	add	sp, #12
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	200002cf 	.word	0x200002cf
 8002290:	080058ac 	.word	0x080058ac
 8002294:	08005b60 	.word	0x08005b60
 8002298:	08005858 	.word	0x08005858

0800229c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_Init+0x24>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_Init+0x24>)
 80022a6:	2110      	movs	r1, #16
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f809 	bl	80022c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b2:	f7fe f953 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	40022000 	.word	0x40022000

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_InitTick+0x5c>)
 80022ce:	681c      	ldr	r4, [r3, #0]
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_InitTick+0x60>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	0019      	movs	r1, r3
 80022d6:	23fa      	movs	r3, #250	; 0xfa
 80022d8:	0098      	lsls	r0, r3, #2
 80022da:	f7fd ff1f 	bl	800011c <__udivsi3>
 80022de:	0003      	movs	r3, r0
 80022e0:	0019      	movs	r1, r3
 80022e2:	0020      	movs	r0, r4
 80022e4:	f7fd ff1a 	bl	800011c <__udivsi3>
 80022e8:	0003      	movs	r3, r0
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f945 	bl	800257a <HAL_SYSTICK_Config>
 80022f0:	1e03      	subs	r3, r0, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e00f      	b.n	8002318 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d80b      	bhi.n	8002316 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	2301      	movs	r3, #1
 8002302:	425b      	negs	r3, r3
 8002304:	2200      	movs	r2, #0
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f90e 	bl	8002528 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_InitTick+0x64>)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b003      	add	sp, #12
 800231e:	bd90      	pop	{r4, r7, pc}
 8002320:	20000000 	.word	0x20000000
 8002324:	2000008c 	.word	0x2000008c
 8002328:	20000088 	.word	0x20000088

0800232c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x1c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	001a      	movs	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x20>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	18d2      	adds	r2, r2, r3
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_IncTick+0x20>)
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	2000008c 	.word	0x2000008c
 800234c:	200003d8 	.word	0x200003d8

08002350 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_GetTick+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	200003d8 	.word	0x200003d8

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fff0 	bl	8002350 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	001a      	movs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	189b      	adds	r3, r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	f7ff ffe0 	bl	8002350 <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	2000008c 	.word	0x2000008c

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	0002      	movs	r2, r0
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b7f      	cmp	r3, #127	; 0x7f
 80023be:	d809      	bhi.n	80023d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c0:	1dfb      	adds	r3, r7, #7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	231f      	movs	r3, #31
 80023c8:	401a      	ands	r2, r3
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_EnableIRQ+0x30>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	4091      	lsls	r1, r2
 80023d0:	000a      	movs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
  }
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	0002      	movs	r2, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b7f      	cmp	r3, #127	; 0x7f
 80023f4:	d828      	bhi.n	8002448 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f6:	4a2f      	ldr	r2, [pc, #188]	; (80024b4 <__NVIC_SetPriority+0xd4>)
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	33c0      	adds	r3, #192	; 0xc0
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	589b      	ldr	r3, [r3, r2]
 8002406:	1dfa      	adds	r2, r7, #7
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	0011      	movs	r1, r2
 800240c:	2203      	movs	r2, #3
 800240e:	400a      	ands	r2, r1
 8002410:	00d2      	lsls	r2, r2, #3
 8002412:	21ff      	movs	r1, #255	; 0xff
 8002414:	4091      	lsls	r1, r2
 8002416:	000a      	movs	r2, r1
 8002418:	43d2      	mvns	r2, r2
 800241a:	401a      	ands	r2, r3
 800241c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	401a      	ands	r2, r3
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	0018      	movs	r0, r3
 800242c:	2303      	movs	r3, #3
 800242e:	4003      	ands	r3, r0
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	481f      	ldr	r0, [pc, #124]	; (80024b4 <__NVIC_SetPriority+0xd4>)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b25b      	sxtb	r3, r3
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	430a      	orrs	r2, r1
 8002440:	33c0      	adds	r3, #192	; 0xc0
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002446:	e031      	b.n	80024ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <__NVIC_SetPriority+0xd8>)
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	0019      	movs	r1, r3
 8002450:	230f      	movs	r3, #15
 8002452:	400b      	ands	r3, r1
 8002454:	3b08      	subs	r3, #8
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3306      	adds	r3, #6
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	3304      	adds	r3, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1dfa      	adds	r2, r7, #7
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	0011      	movs	r1, r2
 8002468:	2203      	movs	r2, #3
 800246a:	400a      	ands	r2, r1
 800246c:	00d2      	lsls	r2, r2, #3
 800246e:	21ff      	movs	r1, #255	; 0xff
 8002470:	4091      	lsls	r1, r2
 8002472:	000a      	movs	r2, r1
 8002474:	43d2      	mvns	r2, r2
 8002476:	401a      	ands	r2, r3
 8002478:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	019b      	lsls	r3, r3, #6
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	401a      	ands	r2, r3
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	0018      	movs	r0, r3
 8002488:	2303      	movs	r3, #3
 800248a:	4003      	ands	r3, r0
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <__NVIC_SetPriority+0xd8>)
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	001c      	movs	r4, r3
 8002498:	230f      	movs	r3, #15
 800249a:	4023      	ands	r3, r4
 800249c:	3b08      	subs	r3, #8
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	430a      	orrs	r2, r1
 80024a2:	3306      	adds	r3, #6
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	18c3      	adds	r3, r0, r3
 80024a8:	3304      	adds	r3, #4
 80024aa:	601a      	str	r2, [r3, #0]
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b003      	add	sp, #12
 80024b2:	bd90      	pop	{r4, r7, pc}
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024c0:	f3bf 8f4f 	dsb	sy
}
 80024c4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_SystemReset+0x1c>)
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <__NVIC_SystemReset+0x20>)
 80024ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024cc:	f3bf 8f4f 	dsb	sy
}
 80024d0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	e7fd      	b.n	80024d2 <__NVIC_SystemReset+0x16>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	e000ed00 	.word	0xe000ed00
 80024dc:	05fa0004 	.word	0x05fa0004

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	045b      	lsls	r3, r3, #17
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d301      	bcc.n	80024f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f4:	2301      	movs	r3, #1
 80024f6:	e010      	b.n	800251a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <SysTick_Config+0x44>)
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	3a01      	subs	r2, #1
 80024fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002500:	2301      	movs	r3, #1
 8002502:	425b      	negs	r3, r3
 8002504:	2103      	movs	r1, #3
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ff6a 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x44>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x44>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	210f      	movs	r1, #15
 8002534:	187b      	adds	r3, r7, r1
 8002536:	1c02      	adds	r2, r0, #0
 8002538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	187b      	adds	r3, r7, r1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b25b      	sxtb	r3, r3
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff4b 	bl	80023e0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	0002      	movs	r2, r0
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b25b      	sxtb	r3, r3
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff21 	bl	80023ac <__NVIC_EnableIRQ>
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002576:	f7ff ffa1 	bl	80024bc <__NVIC_SystemReset>

0800257a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff ffab 	bl	80024e0 <SysTick_Config>
 800258a:	0003      	movs	r3, r0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603a      	str	r2, [r7, #0]
 80025a0:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025a2:	2317      	movs	r3, #23
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80025aa:	2316      	movs	r3, #22
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80025b2:	2315      	movs	r3, #21
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_FLASH_Program+0x120>)
 80025bc:	7e1b      	ldrb	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_FLASH_Program+0x32>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e072      	b.n	80026ac <HAL_FLASH_Program+0x118>
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_FLASH_Program+0x120>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025cc:	2317      	movs	r3, #23
 80025ce:	18fe      	adds	r6, r7, r3
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_FLASH_Program+0x124>)
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 f8c4 	bl	8002760 <FLASH_WaitForLastOperation>
 80025d8:	0003      	movs	r3, r0
 80025da:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80025dc:	2317      	movs	r3, #23
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d15c      	bne.n	80026a0 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d104      	bne.n	80025f6 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80025ec:	2315      	movs	r3, #21
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e00b      	b.n	800260e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d104      	bne.n	8002606 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80025fc:	2315      	movs	r3, #21
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e003      	b.n	800260e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002606:	2315      	movs	r3, #21
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2204      	movs	r2, #4
 800260c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800260e:	2316      	movs	r3, #22
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e039      	b.n	800268c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002618:	2116      	movs	r1, #22
 800261a:	187b      	adds	r3, r7, r1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	005a      	lsls	r2, r3, #1
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	18d0      	adds	r0, r2, r3
 8002624:	187b      	adds	r3, r7, r1
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	001a      	movs	r2, r3
 800262c:	3a20      	subs	r2, #32
 800262e:	2a00      	cmp	r2, #0
 8002630:	db03      	blt.n	800263a <HAL_FLASH_Program+0xa6>
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	40d1      	lsrs	r1, r2
 8002636:	000c      	movs	r4, r1
 8002638:	e008      	b.n	800264c <HAL_FLASH_Program+0xb8>
 800263a:	2220      	movs	r2, #32
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4091      	lsls	r1, r2
 8002642:	000a      	movs	r2, r1
 8002644:	6839      	ldr	r1, [r7, #0]
 8002646:	40d9      	lsrs	r1, r3
 8002648:	000c      	movs	r4, r1
 800264a:	4314      	orrs	r4, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	40da      	lsrs	r2, r3
 8002650:	0015      	movs	r5, r2
 8002652:	b2a3      	uxth	r3, r4
 8002654:	0019      	movs	r1, r3
 8002656:	f000 f867 	bl	8002728 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800265a:	2317      	movs	r3, #23
 800265c:	18fe      	adds	r6, r7, r3
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_FLASH_Program+0x124>)
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f87d 	bl	8002760 <FLASH_WaitForLastOperation>
 8002666:	0003      	movs	r3, r0
 8002668:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_FLASH_Program+0x128>)
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_FLASH_Program+0x128>)
 8002670:	2101      	movs	r1, #1
 8002672:	438a      	bics	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002676:	2317      	movs	r3, #23
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10e      	bne.n	800269e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8002680:	2116      	movs	r1, #22
 8002682:	187b      	adds	r3, r7, r1
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	187b      	adds	r3, r7, r1
 8002688:	3201      	adds	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	2316      	movs	r3, #22
 800268e:	18fa      	adds	r2, r7, r3
 8002690:	2315      	movs	r3, #21
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	7812      	ldrb	r2, [r2, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3bd      	bcc.n	8002618 <HAL_FLASH_Program+0x84>
 800269c:	e000      	b.n	80026a0 <HAL_FLASH_Program+0x10c>
      {
        break;
 800269e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_FLASH_Program+0x120>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	761a      	strb	r2, [r3, #24]

  return status;
 80026a6:	2317      	movs	r3, #23
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b007      	add	sp, #28
 80026b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b4:	200003e0 	.word	0x200003e0
 80026b8:	0000c350 	.word	0x0000c350
 80026bc:	40022000 	.word	0x40022000

080026c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	1dfb      	adds	r3, r7, #7
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_FLASH_Unlock+0x40>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00d      	beq.n	80026f2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_FLASH_Unlock+0x40>)
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_FLASH_Unlock+0x44>)
 80026da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_FLASH_Unlock+0x40>)
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_FLASH_Unlock+0x48>)
 80026e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_FLASH_Unlock+0x40>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	4013      	ands	r3, r2
 80026ea:	d002      	beq.n	80026f2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	781b      	ldrb	r3, [r3, #0]
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	40022000 	.word	0x40022000
 8002704:	45670123 	.word	0x45670123
 8002708:	cdef89ab 	.word	0xcdef89ab

0800270c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_FLASH_Lock+0x18>)
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_FLASH_Lock+0x18>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	430a      	orrs	r2, r1
 800271a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800271c:	2300      	movs	r3, #0
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40022000 	.word	0x40022000

08002728 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	000a      	movs	r2, r1
 8002732:	1cbb      	adds	r3, r7, #2
 8002734:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <FLASH_Program_HalfWord+0x30>)
 8002738:	2200      	movs	r2, #0
 800273a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <FLASH_Program_HalfWord+0x34>)
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <FLASH_Program_HalfWord+0x34>)
 8002742:	2101      	movs	r1, #1
 8002744:	430a      	orrs	r2, r1
 8002746:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1cba      	adds	r2, r7, #2
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	801a      	strh	r2, [r3, #0]
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200003e0 	.word	0x200003e0
 800275c:	40022000 	.word	0x40022000

08002760 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff fdf2 	bl	8002350 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002770:	e00f      	b.n	8002792 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3301      	adds	r3, #1
 8002776:	d00c      	beq.n	8002792 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <FLASH_WaitForLastOperation+0x2e>
 800277e:	f7ff fde7 	bl	8002350 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d201      	bcs.n	8002792 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e01f      	b.n	80027d2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <FLASH_WaitForLastOperation+0x7c>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	2b01      	cmp	r3, #1
 800279c:	d0e9      	beq.n	8002772 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <FLASH_WaitForLastOperation+0x7c>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d102      	bne.n	80027b0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <FLASH_WaitForLastOperation+0x7c>)
 80027ac:	2220      	movs	r2, #32
 80027ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <FLASH_WaitForLastOperation+0x7c>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2210      	movs	r2, #16
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d005      	beq.n	80027c8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <FLASH_WaitForLastOperation+0x7c>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2204      	movs	r2, #4
 80027c2:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d103      	bne.n	80027d0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027c8:	f000 f80a 	bl	80027e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	40022000 	.word	0x40022000

080027e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <FLASH_SetErrorCode+0x58>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2210      	movs	r2, #16
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d109      	bne.n	800280a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <FLASH_SetErrorCode+0x5c>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2202      	movs	r2, #2
 80027fc:	431a      	orrs	r2, r3
 80027fe:	4b0f      	ldr	r3, [pc, #60]	; (800283c <FLASH_SetErrorCode+0x5c>)
 8002800:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2210      	movs	r2, #16
 8002806:	4313      	orrs	r3, r2
 8002808:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <FLASH_SetErrorCode+0x58>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2204      	movs	r2, #4
 8002810:	4013      	ands	r3, r2
 8002812:	2b04      	cmp	r3, #4
 8002814:	d109      	bne.n	800282a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <FLASH_SetErrorCode+0x5c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	2201      	movs	r2, #1
 800281c:	431a      	orrs	r2, r3
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <FLASH_SetErrorCode+0x5c>)
 8002820:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2204      	movs	r2, #4
 8002826:	4313      	orrs	r3, r2
 8002828:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800282a:	4b03      	ldr	r3, [pc, #12]	; (8002838 <FLASH_SetErrorCode+0x58>)
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
}  
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40022000 	.word	0x40022000
 800283c:	200003e0 	.word	0x200003e0

08002840 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800284a:	230f      	movs	r3, #15
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002856:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_FLASHEx_Erase+0xe0>)
 8002858:	7e1b      	ldrb	r3, [r3, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_FLASHEx_Erase+0x22>
 800285e:	2302      	movs	r3, #2
 8002860:	e05a      	b.n	8002918 <HAL_FLASHEx_Erase+0xd8>
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_FLASHEx_Erase+0xe0>)
 8002864:	2201      	movs	r2, #1
 8002866:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d116      	bne.n	800289e <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_FLASHEx_Erase+0xe4>)
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff ff74 	bl	8002760 <FLASH_WaitForLastOperation>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d147      	bne.n	800290c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800287c:	f000 f856 	bl	800292c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002880:	230f      	movs	r3, #15
 8002882:	18fc      	adds	r4, r7, r3
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_FLASHEx_Erase+0xe4>)
 8002886:	0018      	movs	r0, r3
 8002888:	f7ff ff6a 	bl	8002760 <FLASH_WaitForLastOperation>
 800288c:	0003      	movs	r3, r0
 800288e:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <HAL_FLASHEx_Erase+0xe8>)
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_FLASHEx_Erase+0xe8>)
 8002896:	2104      	movs	r1, #4
 8002898:	438a      	bics	r2, r1
 800289a:	611a      	str	r2, [r3, #16]
 800289c:	e036      	b.n	800290c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_FLASHEx_Erase+0xe4>)
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <FLASH_WaitForLastOperation>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d130      	bne.n	800290c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4252      	negs	r2, r2
 80028b0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	e01f      	b.n	80028fa <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f84d 	bl	800295c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028c2:	250f      	movs	r5, #15
 80028c4:	197c      	adds	r4, r7, r5
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_FLASHEx_Erase+0xe4>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff ff49 	bl	8002760 <FLASH_WaitForLastOperation>
 80028ce:	0003      	movs	r3, r0
 80028d0:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_FLASHEx_Erase+0xe8>)
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_FLASHEx_Erase+0xe8>)
 80028d8:	2102      	movs	r1, #2
 80028da:	438a      	bics	r2, r1
 80028dc:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80028de:	197b      	adds	r3, r7, r5
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	601a      	str	r2, [r3, #0]
            break;
 80028ec:	e00e      	b.n	800290c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	00d2      	lsls	r2, r2, #3
 80028f4:	4694      	mov	ip, r2
 80028f6:	4463      	add	r3, ip
 80028f8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	029a      	lsls	r2, r3, #10
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d3d6      	bcc.n	80028ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HAL_FLASHEx_Erase+0xe0>)
 800290e:	2200      	movs	r2, #0
 8002910:	761a      	strb	r2, [r3, #24]

  return status;
 8002912:	230f      	movs	r3, #15
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	781b      	ldrb	r3, [r3, #0]
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bdb0      	pop	{r4, r5, r7, pc}
 8002920:	200003e0 	.word	0x200003e0
 8002924:	0000c350 	.word	0x0000c350
 8002928:	40022000 	.word	0x40022000

0800292c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <FLASH_MassErase+0x28>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <FLASH_MassErase+0x2c>)
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <FLASH_MassErase+0x2c>)
 800293c:	2104      	movs	r1, #4
 800293e:	430a      	orrs	r2, r1
 8002940:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <FLASH_MassErase+0x2c>)
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <FLASH_MassErase+0x2c>)
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	430a      	orrs	r2, r1
 800294c:	611a      	str	r2, [r3, #16]
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200003e0 	.word	0x200003e0
 8002958:	40022000 	.word	0x40022000

0800295c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <FLASH_PageErase+0x34>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <FLASH_PageErase+0x38>)
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <FLASH_PageErase+0x38>)
 8002970:	2102      	movs	r1, #2
 8002972:	430a      	orrs	r2, r1
 8002974:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <FLASH_PageErase+0x38>)
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <FLASH_PageErase+0x38>)
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <FLASH_PageErase+0x38>)
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	430a      	orrs	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200003e0 	.word	0x200003e0
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a6:	e149      	b.n	8002c3c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4091      	lsls	r1, r2
 80029b2:	000a      	movs	r2, r1
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d100      	bne.n	80029c0 <HAL_GPIO_Init+0x28>
 80029be:	e13a      	b.n	8002c36 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d005      	beq.n	80029d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d130      	bne.n	8002a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	409a      	lsls	r2, r3
 80029e6:	0013      	movs	r3, r2
 80029e8:	43da      	mvns	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	409a      	lsls	r2, r3
 80029fa:	0013      	movs	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0e:	2201      	movs	r2, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	43da      	mvns	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	2201      	movs	r2, #1
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d017      	beq.n	8002a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	409a      	lsls	r2, r3
 8002a54:	0013      	movs	r3, r2
 8002a56:	43da      	mvns	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	0013      	movs	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d123      	bne.n	8002aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	0092      	lsls	r2, r2, #2
 8002a8c:	58d3      	ldr	r3, [r2, r3]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2207      	movs	r2, #7
 8002a94:	4013      	ands	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2107      	movs	r1, #7
 8002aae:	400b      	ands	r3, r1
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	0092      	lsls	r2, r2, #2
 8002ac6:	6939      	ldr	r1, [r7, #16]
 8002ac8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	43da      	mvns	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	409a      	lsls	r2, r3
 8002af0:	0013      	movs	r3, r2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	029b      	lsls	r3, r3, #10
 8002b06:	4013      	ands	r3, r2
 8002b08:	d100      	bne.n	8002b0c <HAL_GPIO_Init+0x174>
 8002b0a:	e094      	b.n	8002c36 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0c:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_GPIO_Init+0x2bc>)
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_GPIO_Init+0x2bc>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	619a      	str	r2, [r3, #24]
 8002b18:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_GPIO_Init+0x2bc>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	589b      	ldr	r3, [r3, r2]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2203      	movs	r2, #3
 8002b36:	4013      	ands	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	43da      	mvns	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	2390      	movs	r3, #144	; 0x90
 8002b4c:	05db      	lsls	r3, r3, #23
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d00d      	beq.n	8002b6e <HAL_GPIO_Init+0x1d6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <HAL_GPIO_Init+0x2c4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0x1d2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <HAL_GPIO_Init+0x2c8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_Init+0x1ce>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x1d8>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x1d8>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x1d8>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	2103      	movs	r1, #3
 8002b74:	400a      	ands	r2, r1
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b80:	4935      	ldr	r1, [pc, #212]	; (8002c58 <HAL_GPIO_Init+0x2c0>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8e:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	035b      	lsls	r3, r3, #13
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	039b      	lsls	r3, r3, #14
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	029b      	lsls	r3, r3, #10
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	025b      	lsls	r3, r3, #9
 8002c24:	4013      	ands	r3, r2
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_GPIO_Init+0x2cc>)
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	40da      	lsrs	r2, r3
 8002c44:	1e13      	subs	r3, r2, #0
 8002c46:	d000      	beq.n	8002c4a <HAL_GPIO_Init+0x2b2>
 8002c48:	e6ae      	b.n	80029a8 <HAL_GPIO_Init+0x10>
  } 
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	48000400 	.word	0x48000400
 8002c60:	48000800 	.word	0x48000800
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	0008      	movs	r0, r1
 8002c72:	0011      	movs	r1, r2
 8002c74:	1cbb      	adds	r3, r7, #2
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	1c7b      	adds	r3, r7, #1
 8002c7c:	1c0a      	adds	r2, r1, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	1c7b      	adds	r3, r7, #1
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c88:	1cbb      	adds	r3, r7, #2
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c92:	1cbb      	adds	r3, r7, #2
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	0002      	movs	r2, r0
 8002cac:	1dbb      	adds	r3, r7, #6
 8002cae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	1dba      	adds	r2, r7, #6
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d008      	beq.n	8002cce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002cbe:	1dba      	adds	r2, r7, #6
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc4:	1dbb      	adds	r3, r7, #6
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f807 	bl	8002cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	1dbb      	adds	r3, r7, #6
 8002ce6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e301      	b.n	8003306 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <HAL_RCC_OscConfig+0x1e>
 8002d0c:	e08d      	b.n	8002e2a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d0e:	4bc3      	ldr	r3, [pc, #780]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	220c      	movs	r2, #12
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00e      	beq.n	8002d38 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d1a:	4bc0      	ldr	r3, [pc, #768]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	220c      	movs	r2, #12
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d116      	bne.n	8002d54 <HAL_RCC_OscConfig+0x64>
 8002d26:	4bbd      	ldr	r3, [pc, #756]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	025b      	lsls	r3, r3, #9
 8002d2e:	401a      	ands	r2, r3
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d10d      	bne.n	8002d54 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4bb8      	ldr	r3, [pc, #736]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	4013      	ands	r3, r2
 8002d42:	d100      	bne.n	8002d46 <HAL_RCC_OscConfig+0x56>
 8002d44:	e070      	b.n	8002e28 <HAL_RCC_OscConfig+0x138>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d000      	beq.n	8002d50 <HAL_RCC_OscConfig+0x60>
 8002d4e:	e06b      	b.n	8002e28 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e2d8      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x7c>
 8002d5c:	4baf      	ldr	r3, [pc, #700]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4bae      	ldr	r3, [pc, #696]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	0249      	lsls	r1, r1, #9
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e02f      	b.n	8002dcc <HAL_RCC_OscConfig+0xdc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCC_OscConfig+0x9e>
 8002d74:	4ba9      	ldr	r3, [pc, #676]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4ba8      	ldr	r3, [pc, #672]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d7a:	49a9      	ldr	r1, [pc, #676]	; (8003020 <HAL_RCC_OscConfig+0x330>)
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	4ba6      	ldr	r3, [pc, #664]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4ba5      	ldr	r3, [pc, #660]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d86:	49a7      	ldr	r1, [pc, #668]	; (8003024 <HAL_RCC_OscConfig+0x334>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e01e      	b.n	8002dcc <HAL_RCC_OscConfig+0xdc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d10e      	bne.n	8002db4 <HAL_RCC_OscConfig+0xc4>
 8002d96:	4ba1      	ldr	r3, [pc, #644]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4ba0      	ldr	r3, [pc, #640]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	02c9      	lsls	r1, r1, #11
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	4b9d      	ldr	r3, [pc, #628]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b9c      	ldr	r3, [pc, #624]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0249      	lsls	r1, r1, #9
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xdc>
 8002db4:	4b99      	ldr	r3, [pc, #612]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b98      	ldr	r3, [pc, #608]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002dba:	4999      	ldr	r1, [pc, #612]	; (8003020 <HAL_RCC_OscConfig+0x330>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4b96      	ldr	r3, [pc, #600]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b95      	ldr	r3, [pc, #596]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002dc6:	4997      	ldr	r1, [pc, #604]	; (8003024 <HAL_RCC_OscConfig+0x334>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d014      	beq.n	8002dfe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff fabc 	bl	8002350 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dde:	f7ff fab7 	bl	8002350 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e28a      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df0:	4b8a      	ldr	r3, [pc, #552]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0xee>
 8002dfc:	e015      	b.n	8002e2a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7ff faa7 	bl	8002350 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7ff faa2 	bl	8002350 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e275      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b80      	ldr	r3, [pc, #512]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	029b      	lsls	r3, r3, #10
 8002e22:	4013      	ands	r3, r2
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x118>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d100      	bne.n	8002e36 <HAL_RCC_OscConfig+0x146>
 8002e34:	e069      	b.n	8002f0a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e36:	4b79      	ldr	r3, [pc, #484]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e40:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	220c      	movs	r2, #12
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d11c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x196>
 8002e4c:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	025b      	lsls	r3, r3, #9
 8002e54:	4013      	ands	r3, r2
 8002e56:	d116      	bne.n	8002e86 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e58:	4b70      	ldr	r3, [pc, #448]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e24b      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	22f8      	movs	r2, #248	; 0xf8
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	00da      	lsls	r2, r3, #3
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e84:	e041      	b.n	8002f0a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d024      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b62      	ldr	r3, [pc, #392]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7ff fa59 	bl	8002350 <HAL_GetTick>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea4:	f7ff fa54 	bl	8002350 <HAL_GetTick>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e227      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b59      	ldr	r3, [pc, #356]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d0f1      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b56      	ldr	r3, [pc, #344]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	22f8      	movs	r2, #248	; 0xf8
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00da      	lsls	r2, r3, #3
 8002ed0:	4b52      	ldr	r3, [pc, #328]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e018      	b.n	8002f0a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b4f      	ldr	r3, [pc, #316]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7ff fa34 	bl	8002350 <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7ff fa2f 	bl	8002350 <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e202      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2202      	movs	r2, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d1f1      	bne.n	8002eee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4013      	ands	r3, r2
 8002f12:	d036      	beq.n	8002f82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d019      	beq.n	8002f50 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f20:	4b3e      	ldr	r3, [pc, #248]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f22:	2101      	movs	r1, #1
 8002f24:	430a      	orrs	r2, r1
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7ff fa12 	bl	8002350 <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f32:	f7ff fa0d 	bl	8002350 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1e0      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	2202      	movs	r2, #2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d0f1      	beq.n	8002f32 <HAL_RCC_OscConfig+0x242>
 8002f4e:	e018      	b.n	8002f82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f56:	2101      	movs	r1, #1
 8002f58:	438a      	bics	r2, r1
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7ff f9f8 	bl	8002350 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f66:	f7ff f9f3 	bl	8002350 <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1c6      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d1f1      	bne.n	8002f66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2204      	movs	r2, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <HAL_RCC_OscConfig+0x29e>
 8002f8c:	e0b4      	b.n	80030f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8e:	201f      	movs	r0, #31
 8002f90:	183b      	adds	r3, r7, r0
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	055b      	lsls	r3, r3, #21
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d110      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0549      	lsls	r1, r1, #21
 8002fac:	430a      	orrs	r2, r1
 8002fae:	61da      	str	r2, [r3, #28]
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fbe:	183b      	adds	r3, r7, r0
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d11a      	bne.n	8003006 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCC_OscConfig+0x338>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <HAL_RCC_OscConfig+0x338>)
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	0049      	lsls	r1, r1, #1
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7ff f9b7 	bl	8002350 <HAL_GetTick>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe8:	f7ff f9b2 	bl	8002350 <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e185      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x338>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4013      	ands	r3, r2
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10e      	bne.n	800302c <HAL_RCC_OscConfig+0x33c>
 800300e:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_RCC_OscConfig+0x32c>)
 8003014:	2101      	movs	r1, #1
 8003016:	430a      	orrs	r2, r1
 8003018:	621a      	str	r2, [r3, #32]
 800301a:	e035      	b.n	8003088 <HAL_RCC_OscConfig+0x398>
 800301c:	40021000 	.word	0x40021000
 8003020:	fffeffff 	.word	0xfffeffff
 8003024:	fffbffff 	.word	0xfffbffff
 8003028:	40007000 	.word	0x40007000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10c      	bne.n	800304e <HAL_RCC_OscConfig+0x35e>
 8003034:	4bb6      	ldr	r3, [pc, #728]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	4bb5      	ldr	r3, [pc, #724]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800303a:	2101      	movs	r1, #1
 800303c:	438a      	bics	r2, r1
 800303e:	621a      	str	r2, [r3, #32]
 8003040:	4bb3      	ldr	r3, [pc, #716]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	4bb2      	ldr	r3, [pc, #712]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003046:	2104      	movs	r1, #4
 8003048:	438a      	bics	r2, r1
 800304a:	621a      	str	r2, [r3, #32]
 800304c:	e01c      	b.n	8003088 <HAL_RCC_OscConfig+0x398>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x380>
 8003056:	4bae      	ldr	r3, [pc, #696]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	4bad      	ldr	r3, [pc, #692]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800305c:	2104      	movs	r1, #4
 800305e:	430a      	orrs	r2, r1
 8003060:	621a      	str	r2, [r3, #32]
 8003062:	4bab      	ldr	r3, [pc, #684]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	4baa      	ldr	r3, [pc, #680]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003068:	2101      	movs	r1, #1
 800306a:	430a      	orrs	r2, r1
 800306c:	621a      	str	r2, [r3, #32]
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0x398>
 8003070:	4ba7      	ldr	r3, [pc, #668]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	4ba6      	ldr	r3, [pc, #664]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003076:	2101      	movs	r1, #1
 8003078:	438a      	bics	r2, r1
 800307a:	621a      	str	r2, [r3, #32]
 800307c:	4ba4      	ldr	r3, [pc, #656]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	4ba3      	ldr	r3, [pc, #652]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003082:	2104      	movs	r1, #4
 8003084:	438a      	bics	r2, r1
 8003086:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d014      	beq.n	80030ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003090:	f7ff f95e 	bl	8002350 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	e009      	b.n	80030ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7ff f959 	bl	8002350 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	4a9b      	ldr	r2, [pc, #620]	; (8003314 <HAL_RCC_OscConfig+0x624>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e12b      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	4b98      	ldr	r3, [pc, #608]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	2202      	movs	r2, #2
 80030b4:	4013      	ands	r3, r2
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x3aa>
 80030b8:	e013      	b.n	80030e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7ff f949 	bl	8002350 <HAL_GetTick>
 80030be:	0003      	movs	r3, r0
 80030c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c2:	e009      	b.n	80030d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7ff f944 	bl	8002350 <HAL_GetTick>
 80030c8:	0002      	movs	r2, r0
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	4a91      	ldr	r2, [pc, #580]	; (8003314 <HAL_RCC_OscConfig+0x624>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e116      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d8:	4b8d      	ldr	r3, [pc, #564]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030e2:	231f      	movs	r3, #31
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	4b87      	ldr	r3, [pc, #540]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80030f2:	4989      	ldr	r1, [pc, #548]	; (8003318 <HAL_RCC_OscConfig+0x628>)
 80030f4:	400a      	ands	r2, r1
 80030f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2210      	movs	r2, #16
 80030fe:	4013      	ands	r3, r2
 8003100:	d063      	beq.n	80031ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d12a      	bne.n	8003160 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800310a:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800310c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310e:	4b80      	ldr	r3, [pc, #512]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003110:	2104      	movs	r1, #4
 8003112:	430a      	orrs	r2, r1
 8003114:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003116:	4b7e      	ldr	r3, [pc, #504]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311a:	4b7d      	ldr	r3, [pc, #500]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800311c:	2101      	movs	r1, #1
 800311e:	430a      	orrs	r2, r1
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7ff f915 	bl	8002350 <HAL_GetTick>
 8003126:	0003      	movs	r3, r0
 8003128:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800312c:	f7ff f910 	bl	8002350 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0e3      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800313e:	4b74      	ldr	r3, [pc, #464]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	2202      	movs	r2, #2
 8003144:	4013      	ands	r3, r2
 8003146:	d0f1      	beq.n	800312c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003148:	4b71      	ldr	r3, [pc, #452]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	22f8      	movs	r2, #248	; 0xf8
 800314e:	4393      	bics	r3, r2
 8003150:	0019      	movs	r1, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	00da      	lsls	r2, r3, #3
 8003158:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800315a:	430a      	orrs	r2, r1
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
 800315e:	e034      	b.n	80031ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	3305      	adds	r3, #5
 8003166:	d111      	bne.n	800318c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003168:	4b69      	ldr	r3, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800316a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316c:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800316e:	2104      	movs	r1, #4
 8003170:	438a      	bics	r2, r1
 8003172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	22f8      	movs	r2, #248	; 0xf8
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	00da      	lsls	r2, r3, #3
 8003184:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003186:	430a      	orrs	r2, r1
 8003188:	635a      	str	r2, [r3, #52]	; 0x34
 800318a:	e01e      	b.n	80031ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800318c:	4b60      	ldr	r3, [pc, #384]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800318e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003190:	4b5f      	ldr	r3, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003192:	2104      	movs	r1, #4
 8003194:	430a      	orrs	r2, r1
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003198:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	4b5c      	ldr	r3, [pc, #368]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800319e:	2101      	movs	r1, #1
 80031a0:	438a      	bics	r2, r1
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a4:	f7ff f8d4 	bl	8002350 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031ae:	f7ff f8cf 	bl	8002350 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0a2      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80031c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c4:	2202      	movs	r2, #2
 80031c6:	4013      	ands	r3, r2
 80031c8:	d1f1      	bne.n	80031ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d100      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4e4>
 80031d2:	e097      	b.n	8003304 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	220c      	movs	r2, #12
 80031da:	4013      	ands	r3, r2
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d100      	bne.n	80031e2 <HAL_RCC_OscConfig+0x4f2>
 80031e0:	e06b      	b.n	80032ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d14c      	bne.n	8003284 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b49      	ldr	r3, [pc, #292]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b48      	ldr	r3, [pc, #288]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80031f0:	494a      	ldr	r1, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x62c>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7ff f8ab 	bl	8002350 <HAL_GetTick>
 80031fa:	0003      	movs	r3, r0
 80031fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7ff f8a6 	bl	8002350 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e079      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	049b      	lsls	r3, r3, #18
 800321a:	4013      	ands	r3, r2
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	220f      	movs	r2, #15
 8003224:	4393      	bics	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800322e:	430a      	orrs	r2, r1
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
 8003232:	4b37      	ldr	r3, [pc, #220]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_RCC_OscConfig+0x630>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	431a      	orrs	r2, r3
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	0449      	lsls	r1, r1, #17
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7ff f879 	bl	8002350 <HAL_GetTick>
 800325e:	0003      	movs	r3, r0
 8003260:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7ff f874 	bl	8002350 <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e047      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	049b      	lsls	r3, r3, #18
 800327e:	4013      	ands	r3, r2
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x574>
 8003282:	e03f      	b.n	8003304 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 800328a:	4924      	ldr	r1, [pc, #144]	; (800331c <HAL_RCC_OscConfig+0x62c>)
 800328c:	400a      	ands	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7ff f85e 	bl	8002350 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7ff f859 	bl	8002350 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e02c      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	049b      	lsls	r3, r3, #18
 80032b4:	4013      	ands	r3, r2
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x5aa>
 80032b8:	e024      	b.n	8003304 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01f      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_OscConfig+0x620>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	401a      	ands	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	429a      	cmp	r2, r3
 80032e0:	d10e      	bne.n	8003300 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	220f      	movs	r2, #15
 80032e6:	401a      	ands	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	23f0      	movs	r3, #240	; 0xf0
 80032f4:	039b      	lsls	r3, r3, #14
 80032f6:	401a      	ands	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b008      	add	sp, #32
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40021000 	.word	0x40021000
 8003314:	00001388 	.word	0x00001388
 8003318:	efffffff 	.word	0xefffffff
 800331c:	feffffff 	.word	0xfeffffff
 8003320:	ffc2ffff 	.word	0xffc2ffff

08003324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b3      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	4013      	ands	r3, r2
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d911      	bls.n	800336a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4393      	bics	r3, r2
 800334e:	0019      	movs	r1, r3
 8003350:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003358:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d001      	beq.n	800336a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e09a      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d015      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2204      	movs	r2, #4
 800337a:	4013      	ands	r3, r2
 800337c:	d006      	beq.n	800338c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800337e:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 8003384:	21e0      	movs	r1, #224	; 0xe0
 8003386:	00c9      	lsls	r1, r1, #3
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	22f0      	movs	r2, #240	; 0xf0
 8003392:	4393      	bics	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	4b44      	ldr	r3, [pc, #272]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	d040      	beq.n	800342c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	4013      	ands	r3, r2
 80033bc:	d114      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06e      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	049b      	lsls	r3, r3, #18
 80033d2:	4013      	ands	r3, r2
 80033d4:	d108      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e062      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2202      	movs	r2, #2
 80033e0:	4013      	ands	r3, r2
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e05b      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2203      	movs	r2, #3
 80033ee:	4393      	bics	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe ffa8 	bl	8002350 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003404:	e009      	b.n	800341a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003406:	f7fe ffa3 	bl	8002350 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <HAL_RCC_ClockConfig+0x18c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e042      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	220c      	movs	r2, #12
 8003420:	401a      	ands	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1ec      	bne.n	8003406 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d211      	bcs.n	800345e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	4393      	bics	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCC_ClockConfig+0x184>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2201      	movs	r2, #1
 8003452:	4013      	ands	r3, r2
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d001      	beq.n	800345e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e020      	b.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2204      	movs	r2, #4
 8003464:	4013      	ands	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <HAL_RCC_ClockConfig+0x190>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800347c:	f000 f820 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8003480:	0001      	movs	r1, r0
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x188>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	220f      	movs	r2, #15
 800348a:	4013      	ands	r3, r2
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x194>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	000a      	movs	r2, r1
 8003492:	40da      	lsrs	r2, r3
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x198>)
 8003496:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003498:	2003      	movs	r0, #3
 800349a:	f7fe ff13 	bl	80022c4 <HAL_InitTick>
  
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40022000 	.word	0x40022000
 80034ac:	40021000 	.word	0x40021000
 80034b0:	00001388 	.word	0x00001388
 80034b4:	fffff8ff 	.word	0xfffff8ff
 80034b8:	08005910 	.word	0x08005910
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	220c      	movs	r2, #12
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x30>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ee:	e02c      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034f2:	613b      	str	r3, [r7, #16]
      break;
 80034f4:	e02c      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	220f      	movs	r2, #15
 80034fc:	4013      	ands	r3, r2
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003504:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	220f      	movs	r2, #15
 800350a:	4013      	ands	r3, r2
 800350c:	4a16      	ldr	r2, [pc, #88]	; (8003568 <HAL_RCC_GetSysClockFreq+0xa8>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	025b      	lsls	r3, r3, #9
 8003518:	4013      	ands	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4810      	ldr	r0, [pc, #64]	; (8003560 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003520:	f7fc fdfc 	bl	800011c <__udivsi3>
 8003524:	0003      	movs	r3, r0
 8003526:	001a      	movs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4353      	muls	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e009      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	000a      	movs	r2, r1
 8003534:	0152      	lsls	r2, r2, #5
 8003536:	1a52      	subs	r2, r2, r1
 8003538:	0193      	lsls	r3, r2, #6
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	185b      	adds	r3, r3, r1
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
      break;
 8003548:	e002      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003550:	693b      	ldr	r3, [r7, #16]
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b006      	add	sp, #24
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	40021000 	.word	0x40021000
 8003560:	007a1200 	.word	0x007a1200
 8003564:	08005b78 	.word	0x08005b78
 8003568:	08005b88 	.word	0x08005b88

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b02      	ldr	r3, [pc, #8]	; (800357c <HAL_RCC_GetHCLKFreq+0x10>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003584:	f7ff fff2 	bl	800356c <HAL_RCC_GetHCLKFreq>
 8003588:	0001      	movs	r1, r0
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	2207      	movs	r2, #7
 8003592:	4013      	ands	r3, r2
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	40d9      	lsrs	r1, r3
 800359a:	000b      	movs	r3, r1
}    
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08005920 	.word	0x08005920

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	4013      	ands	r3, r2
 80035c6:	d100      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80035c8:	e08e      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2017      	movs	r0, #23
 80035cc:	183b      	adds	r3, r7, r0
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b57      	ldr	r3, [pc, #348]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	055b      	lsls	r3, r3, #21
 80035da:	4013      	ands	r3, r2
 80035dc:	d110      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	4b54      	ldr	r3, [pc, #336]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0549      	lsls	r1, r1, #21
 80035e8:	430a      	orrs	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	055b      	lsls	r3, r3, #21
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	183b      	adds	r3, r7, r0
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	4b4c      	ldr	r3, [pc, #304]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4013      	ands	r3, r2
 800360a:	d11a      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360c:	4b49      	ldr	r3, [pc, #292]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	0049      	lsls	r1, r1, #1
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fe fe99 	bl	8002350 <HAL_GetTick>
 800361e:	0003      	movs	r3, r0
 8003620:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fe fe94 	bl	8002350 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e077      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4013      	ands	r3, r2
 8003640:	d0f0      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	23c0      	movs	r3, #192	; 0xc0
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d034      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	23c0      	movs	r3, #192	; 0xc0
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4013      	ands	r3, r2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d02c      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003664:	4b32      	ldr	r3, [pc, #200]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a33      	ldr	r2, [pc, #204]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800366a:	4013      	ands	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	4b2f      	ldr	r3, [pc, #188]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	0249      	lsls	r1, r1, #9
 8003678:	430a      	orrs	r2, r1
 800367a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367c:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003682:	492e      	ldr	r1, [pc, #184]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003684:	400a      	ands	r2, r1
 8003686:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	4013      	ands	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fe5b 	bl	8002350 <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e009      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fe56 	bl	8002350 <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e038      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036be:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036ce:	430a      	orrs	r2, r1
 80036d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d2:	2317      	movs	r3, #23
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036e2:	4918      	ldr	r1, [pc, #96]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	2203      	movs	r2, #3
 80036f8:	4393      	bics	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003702:	430a      	orrs	r2, r1
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2220      	movs	r2, #32
 800370c:	4013      	ands	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	2210      	movs	r2, #16
 8003716:	4393      	bics	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003720:	430a      	orrs	r2, r1
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b006      	add	sp, #24
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
 8003738:	fffffcff 	.word	0xfffffcff
 800373c:	fffeffff 	.word	0xfffeffff
 8003740:	00001388 	.word	0x00001388
 8003744:	efffffff 	.word	0xefffffff

08003748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e042      	b.n	80037e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223d      	movs	r2, #61	; 0x3d
 800375e:	5c9b      	ldrb	r3, [r3, r2]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	223c      	movs	r2, #60	; 0x3c
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0018      	movs	r0, r3
 8003772:	f7fc ff17 	bl	80005a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	223d      	movs	r2, #61	; 0x3d
 800377a:	2102      	movs	r1, #2
 800377c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	0019      	movs	r1, r3
 8003788:	0010      	movs	r0, r2
 800378a:	f000 fa91 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2246      	movs	r2, #70	; 0x46
 8003792:	2101      	movs	r1, #1
 8003794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	223e      	movs	r2, #62	; 0x3e
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223f      	movs	r2, #63	; 0x3f
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	2101      	movs	r1, #1
 80037ac:	5499      	strb	r1, [r3, r2]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2241      	movs	r2, #65	; 0x41
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2242      	movs	r2, #66	; 0x42
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2243      	movs	r2, #67	; 0x43
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2244      	movs	r2, #68	; 0x44
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2245      	movs	r2, #69	; 0x45
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223d      	movs	r2, #61	; 0x3d
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223d      	movs	r2, #61	; 0x3d
 80037f4:	5c9b      	ldrb	r3, [r3, r2]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e036      	b.n	800386e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	223d      	movs	r2, #61	; 0x3d
 8003804:	2102      	movs	r1, #2
 8003806:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2101      	movs	r1, #1
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_TIM_Base_Start_IT+0x90>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00a      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x50>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	05db      	lsls	r3, r3, #23
 800382a:	429a      	cmp	r2, r3
 800382c:	d004      	beq.n	8003838 <HAL_TIM_Base_Start_IT+0x50>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <HAL_TIM_Base_Start_IT+0x94>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d111      	bne.n	800385c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2207      	movs	r2, #7
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d010      	beq.n	800386c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	e007      	b.n	800386c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400

08003880 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	438a      	bics	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_TIM_Base_Stop_IT+0x54>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	d10d      	bne.n	80038c0 <HAL_TIM_Base_Stop_IT+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <HAL_TIM_Base_Stop_IT+0x58>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_Base_Stop_IT+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	438a      	bics	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	223d      	movs	r2, #61	; 0x3d
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	00001111 	.word	0x00001111
 80038d8:	00000444 	.word	0x00000444

080038dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d021      	beq.n	8003940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2202      	movs	r2, #2
 8003900:	4013      	ands	r3, r2
 8003902:	d01d      	beq.n	8003940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2203      	movs	r2, #3
 800390a:	4252      	negs	r2, r2
 800390c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2203      	movs	r2, #3
 800391c:	4013      	ands	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f9ac 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003928:	e007      	b.n	800393a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f99f 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 f9ab 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2204      	movs	r2, #4
 8003944:	4013      	ands	r3, r2
 8003946:	d022      	beq.n	800398e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2204      	movs	r2, #4
 800394c:	4013      	ands	r3, r2
 800394e:	d01e      	beq.n	800398e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2205      	movs	r2, #5
 8003956:	4252      	negs	r2, r2
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 f985 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003976:	e007      	b.n	8003988 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 f978 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f984 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2208      	movs	r2, #8
 8003992:	4013      	ands	r3, r2
 8003994:	d021      	beq.n	80039da <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2208      	movs	r2, #8
 800399a:	4013      	ands	r3, r2
 800399c:	d01d      	beq.n	80039da <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2209      	movs	r2, #9
 80039a4:	4252      	negs	r2, r2
 80039a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2204      	movs	r2, #4
 80039ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2203      	movs	r2, #3
 80039b6:	4013      	ands	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f95f 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 80039c2:	e007      	b.n	80039d4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 f952 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 f95e 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2210      	movs	r2, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d022      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2210      	movs	r2, #16
 80039e6:	4013      	ands	r3, r2
 80039e8:	d01e      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2211      	movs	r2, #17
 80039f0:	4252      	negs	r2, r2
 80039f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2208      	movs	r2, #8
 80039f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	23c0      	movs	r3, #192	; 0xc0
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4013      	ands	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 f938 	bl	8003c80 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e007      	b.n	8003a22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 f92b 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f000 f937 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d00c      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	d008      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4252      	negs	r2, r2
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f90b 	bl	8003c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d00c      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	4013      	ands	r3, r2
 8003a58:	d008      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2281      	movs	r2, #129	; 0x81
 8003a60:	4252      	negs	r2, r2
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 faa0 	bl	8003fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00c      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	; 0x40
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d008      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2241      	movs	r2, #65	; 0x41
 8003a82:	4252      	negs	r2, r2
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 f909 	bl	8003ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2220      	movs	r2, #32
 8003a92:	4013      	ands	r3, r2
 8003a94:	d00c      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d008      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2221      	movs	r2, #33	; 0x21
 8003aa4:	4252      	negs	r2, r2
 8003aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 fa76 	bl	8003f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	230f      	movs	r3, #15
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	223c      	movs	r2, #60	; 0x3c
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_ConfigClockSource+0x20>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0bc      	b.n	8003c52 <HAL_TIM_ConfigClockSource+0x19a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	223c      	movs	r2, #60	; 0x3c
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	223d      	movs	r2, #61	; 0x3d
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2277      	movs	r2, #119	; 0x77
 8003af4:	4393      	bics	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a58      	ldr	r2, [pc, #352]	; (8003c5c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	0192      	lsls	r2, r2, #6
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d040      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xde>
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	0192      	lsls	r2, r2, #6
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d900      	bls.n	8003b1e <HAL_TIM_ConfigClockSource+0x66>
 8003b1c:	e088      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	0152      	lsls	r2, r2, #5
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d100      	bne.n	8003b28 <HAL_TIM_ConfigClockSource+0x70>
 8003b26:	e088      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x182>
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	0152      	lsls	r2, r2, #5
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d900      	bls.n	8003b32 <HAL_TIM_ConfigClockSource+0x7a>
 8003b30:	e07e      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b32:	2b70      	cmp	r3, #112	; 0x70
 8003b34:	d018      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0xb0>
 8003b36:	d900      	bls.n	8003b3a <HAL_TIM_ConfigClockSource+0x82>
 8003b38:	e07a      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b3a:	2b60      	cmp	r3, #96	; 0x60
 8003b3c:	d04f      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x126>
 8003b3e:	d900      	bls.n	8003b42 <HAL_TIM_ConfigClockSource+0x8a>
 8003b40:	e076      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b42:	2b50      	cmp	r3, #80	; 0x50
 8003b44:	d03b      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x106>
 8003b46:	d900      	bls.n	8003b4a <HAL_TIM_ConfigClockSource+0x92>
 8003b48:	e072      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d057      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x146>
 8003b4e:	d900      	bls.n	8003b52 <HAL_TIM_ConfigClockSource+0x9a>
 8003b50:	e06e      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b52:	2b30      	cmp	r3, #48	; 0x30
 8003b54:	d063      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x166>
 8003b56:	d86b      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d060      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x166>
 8003b5c:	d868      	bhi.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d05d      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x166>
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d05b      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x166>
 8003b66:	e063      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	f000 f998 	bl	8003eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2277      	movs	r2, #119	; 0x77
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]
      break;
 8003b94:	e052      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	f000 f981 	bl	8003eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	01c9      	lsls	r1, r1, #7
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
      break;
 8003bbc:	e03e      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	001a      	movs	r2, r3
 8003bcc:	f000 f8f4 	bl	8003db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2150      	movs	r1, #80	; 0x50
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f94e 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e02e      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bea:	001a      	movs	r2, r3
 8003bec:	f000 f912 	bl	8003e14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2160      	movs	r1, #96	; 0x60
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 f93e 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e01e      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	f000 f8d4 	bl	8003db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 f92e 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e00e      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0019      	movs	r1, r3
 8003c28:	0010      	movs	r0, r2
 8003c2a:	f000 f925 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8003c2e:	e005      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c30:	230f      	movs	r3, #15
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
      break;
 8003c38:	e000      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c3a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	223d      	movs	r2, #61	; 0x3d
 8003c40:	2101      	movs	r1, #1
 8003c42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	223c      	movs	r2, #60	; 0x3c
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

  return status;
 8003c4c:	230f      	movs	r3, #15
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	ffff00ff 	.word	0xffff00ff

08003c60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a37      	ldr	r2, [pc, #220]	; (8003da0 <TIM_Base_SetConfig+0xf0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d008      	beq.n	8003cda <TIM_Base_SetConfig+0x2a>
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	05db      	lsls	r3, r3, #23
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0x2a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a33      	ldr	r2, [pc, #204]	; (8003da4 <TIM_Base_SetConfig+0xf4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2270      	movs	r2, #112	; 0x70
 8003cde:	4393      	bics	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <TIM_Base_SetConfig+0xf0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d014      	beq.n	8003d1e <TIM_Base_SetConfig+0x6e>
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	05db      	lsls	r3, r3, #23
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d00f      	beq.n	8003d1e <TIM_Base_SetConfig+0x6e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <TIM_Base_SetConfig+0xf4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <TIM_Base_SetConfig+0x6e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <TIM_Base_SetConfig+0xf8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_Base_SetConfig+0x6e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <TIM_Base_SetConfig+0xfc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_Base_SetConfig+0x6e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <TIM_Base_SetConfig+0x100>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <TIM_Base_SetConfig+0x104>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	4393      	bics	r3, r2
 8003d36:	001a      	movs	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <TIM_Base_SetConfig+0xf0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0xbe>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a12      	ldr	r2, [pc, #72]	; (8003dac <TIM_Base_SetConfig+0xfc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0xbe>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <TIM_Base_SetConfig+0x100>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d103      	bne.n	8003d76 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2201      	movs	r2, #1
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4393      	bics	r3, r2
 8003d90:	001a      	movs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]
  }
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40002000 	.word	0x40002000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800
 8003db4:	fffffcff 	.word	0xfffffcff

08003db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	22f0      	movs	r2, #240	; 0xf0
 8003de2:	4393      	bics	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	220a      	movs	r2, #10
 8003df4:	4393      	bics	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	001a      	movs	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <TIM_TI2_ConfigInputStage+0x60>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	031b      	lsls	r3, r3, #12
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	22a0      	movs	r2, #160	; 0xa0
 8003e50:	4393      	bics	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b006      	add	sp, #24
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	ffff0fff 	.word	0xffff0fff

08003e78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2270      	movs	r2, #112	; 0x70
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	2207      	movs	r2, #7
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	609a      	str	r2, [r3, #8]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <TIM_ETR_SetConfig+0x3c>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	ffff00ff 	.word	0xffff00ff

08003eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223c      	movs	r2, #60	; 0x3c
 8003efa:	5c9b      	ldrb	r3, [r3, r2]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e042      	b.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	223c      	movs	r2, #60	; 0x3c
 8003f08:	2101      	movs	r1, #1
 8003f0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	223d      	movs	r2, #61	; 0x3d
 8003f10:	2102      	movs	r1, #2
 8003f12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2270      	movs	r2, #112	; 0x70
 8003f28:	4393      	bics	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00a      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d004      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10c      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	4393      	bics	r3, r2
 8003f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	223d      	movs	r2, #61	; 0x3d
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	223c      	movs	r2, #60	; 0x3c
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400

08003f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e044      	b.n	8004058 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d107      	bne.n	8003fe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2278      	movs	r2, #120	; 0x78
 8003fda:	2100      	movs	r1, #0
 8003fdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc fb03 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2224      	movs	r2, #36	; 0x24
 8003fea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 f9f4 	bl	80043f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0018      	movs	r0, r3
 8004010:	f000 f8c8 	bl	80041a4 <UART_SetConfig>
 8004014:	0003      	movs	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e01c      	b.n	8004058 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	490d      	ldr	r1, [pc, #52]	; (8004060 <HAL_UART_Init+0xa4>)
 800402a:	400a      	ands	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	212a      	movs	r1, #42	; 0x2a
 800403a:	438a      	bics	r2, r1
 800403c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2101      	movs	r1, #1
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0018      	movs	r0, r3
 8004052:	f000 fa83 	bl	800455c <UART_CheckIdleState>
 8004056:	0003      	movs	r3, r0
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}
 8004060:	ffffb7ff 	.word	0xffffb7ff

08004064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	1dbb      	adds	r3, r7, #6
 8004072:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004078:	2b20      	cmp	r3, #32
 800407a:	d000      	beq.n	800407e <HAL_UART_Transmit+0x1a>
 800407c:	e08d      	b.n	800419a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_UART_Transmit+0x28>
 8004084:	1dbb      	adds	r3, r7, #6
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e085      	b.n	800419c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	015b      	lsls	r3, r3, #5
 8004098:	429a      	cmp	r2, r3
 800409a:	d109      	bne.n	80040b0 <HAL_UART_Transmit+0x4c>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e075      	b.n	800419c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2284      	movs	r2, #132	; 0x84
 80040b4:	2100      	movs	r1, #0
 80040b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2221      	movs	r2, #33	; 0x21
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fe f947 	bl	8002350 <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1dba      	adds	r2, r7, #6
 80040ca:	2150      	movs	r1, #80	; 0x50
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1dba      	adds	r2, r7, #6
 80040d4:	2152      	movs	r1, #82	; 0x52
 80040d6:	8812      	ldrh	r2, [r2, #0]
 80040d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	015b      	lsls	r3, r3, #5
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d108      	bne.n	80040f8 <HAL_UART_Transmit+0x94>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e003      	b.n	8004100 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004100:	e030      	b.n	8004164 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	0013      	movs	r3, r2
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	f000 facc 	bl	80046ac <UART_WaitOnFlagUntilTimeout>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d004      	beq.n	8004122 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e03c      	b.n	800419c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	05d2      	lsls	r2, r2, #23
 8004132:	0dd2      	lsrs	r2, r2, #23
 8004134:	b292      	uxth	r2, r2
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	3302      	adds	r3, #2
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e008      	b.n	8004152 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b292      	uxth	r2, r2
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2252      	movs	r2, #82	; 0x52
 8004156:	5a9b      	ldrh	r3, [r3, r2]
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b299      	uxth	r1, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2252      	movs	r2, #82	; 0x52
 8004162:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2252      	movs	r2, #82	; 0x52
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1c8      	bne.n	8004102 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	0013      	movs	r3, r2
 800417a:	2200      	movs	r2, #0
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	f000 fa95 	bl	80046ac <UART_WaitOnFlagUntilTimeout>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d004      	beq.n	8004190 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e005      	b.n	800419c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e000      	b.n	800419c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800419a:	2302      	movs	r3, #2
  }
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b008      	add	sp, #32
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ac:	231e      	movs	r3, #30
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a83      	ldr	r2, [pc, #524]	; (80043e0 <UART_SetConfig+0x23c>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	430a      	orrs	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a7e      	ldr	r2, [pc, #504]	; (80043e4 <UART_SetConfig+0x240>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <UART_SetConfig+0x244>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004220:	4b72      	ldr	r3, [pc, #456]	; (80043ec <UART_SetConfig+0x248>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
 8004228:	2b03      	cmp	r3, #3
 800422a:	d00d      	beq.n	8004248 <UART_SetConfig+0xa4>
 800422c:	d81b      	bhi.n	8004266 <UART_SetConfig+0xc2>
 800422e:	2b02      	cmp	r3, #2
 8004230:	d014      	beq.n	800425c <UART_SetConfig+0xb8>
 8004232:	d818      	bhi.n	8004266 <UART_SetConfig+0xc2>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <UART_SetConfig+0x9a>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d00a      	beq.n	8004252 <UART_SetConfig+0xae>
 800423c:	e013      	b.n	8004266 <UART_SetConfig+0xc2>
 800423e:	231f      	movs	r3, #31
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e012      	b.n	800426e <UART_SetConfig+0xca>
 8004248:	231f      	movs	r3, #31
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	2202      	movs	r2, #2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e00d      	b.n	800426e <UART_SetConfig+0xca>
 8004252:	231f      	movs	r3, #31
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	2204      	movs	r2, #4
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	e008      	b.n	800426e <UART_SetConfig+0xca>
 800425c:	231f      	movs	r3, #31
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2208      	movs	r2, #8
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	e003      	b.n	800426e <UART_SetConfig+0xca>
 8004266:	231f      	movs	r3, #31
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	2210      	movs	r2, #16
 800426c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	429a      	cmp	r2, r3
 8004278:	d15c      	bne.n	8004334 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800427a:	231f      	movs	r3, #31
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d015      	beq.n	80042b0 <UART_SetConfig+0x10c>
 8004284:	dc18      	bgt.n	80042b8 <UART_SetConfig+0x114>
 8004286:	2b04      	cmp	r3, #4
 8004288:	d00d      	beq.n	80042a6 <UART_SetConfig+0x102>
 800428a:	dc15      	bgt.n	80042b8 <UART_SetConfig+0x114>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <UART_SetConfig+0xf2>
 8004290:	2b02      	cmp	r3, #2
 8004292:	d005      	beq.n	80042a0 <UART_SetConfig+0xfc>
 8004294:	e010      	b.n	80042b8 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004296:	f7ff f973 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 800429a:	0003      	movs	r3, r0
 800429c:	61bb      	str	r3, [r7, #24]
        break;
 800429e:	e012      	b.n	80042c6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <UART_SetConfig+0x24c>)
 80042a2:	61bb      	str	r3, [r7, #24]
        break;
 80042a4:	e00f      	b.n	80042c6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7ff f90b 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80042aa:	0003      	movs	r3, r0
 80042ac:	61bb      	str	r3, [r7, #24]
        break;
 80042ae:	e00a      	b.n	80042c6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	61bb      	str	r3, [r7, #24]
        break;
 80042b6:	e006      	b.n	80042c6 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042bc:	231e      	movs	r3, #30
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
        break;
 80042c4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d100      	bne.n	80042ce <UART_SetConfig+0x12a>
 80042cc:	e07a      	b.n	80043c4 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	005a      	lsls	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	18d2      	adds	r2, r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	0019      	movs	r1, r3
 80042e0:	0010      	movs	r0, r2
 80042e2:	f7fb ff1b 	bl	800011c <__udivsi3>
 80042e6:	0003      	movs	r3, r0
 80042e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b0f      	cmp	r3, #15
 80042ee:	d91c      	bls.n	800432a <UART_SetConfig+0x186>
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	025b      	lsls	r3, r3, #9
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d217      	bcs.n	800432a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	200e      	movs	r0, #14
 8004300:	183b      	adds	r3, r7, r0
 8004302:	210f      	movs	r1, #15
 8004304:	438a      	bics	r2, r1
 8004306:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	b29b      	uxth	r3, r3
 800430e:	2207      	movs	r2, #7
 8004310:	4013      	ands	r3, r2
 8004312:	b299      	uxth	r1, r3
 8004314:	183b      	adds	r3, r7, r0
 8004316:	183a      	adds	r2, r7, r0
 8004318:	8812      	ldrh	r2, [r2, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	183a      	adds	r2, r7, r0
 8004324:	8812      	ldrh	r2, [r2, #0]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e04c      	b.n	80043c4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800432a:	231e      	movs	r3, #30
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e047      	b.n	80043c4 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004334:	231f      	movs	r3, #31
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b08      	cmp	r3, #8
 800433c:	d015      	beq.n	800436a <UART_SetConfig+0x1c6>
 800433e:	dc18      	bgt.n	8004372 <UART_SetConfig+0x1ce>
 8004340:	2b04      	cmp	r3, #4
 8004342:	d00d      	beq.n	8004360 <UART_SetConfig+0x1bc>
 8004344:	dc15      	bgt.n	8004372 <UART_SetConfig+0x1ce>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <UART_SetConfig+0x1ac>
 800434a:	2b02      	cmp	r3, #2
 800434c:	d005      	beq.n	800435a <UART_SetConfig+0x1b6>
 800434e:	e010      	b.n	8004372 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004350:	f7ff f916 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8004354:	0003      	movs	r3, r0
 8004356:	61bb      	str	r3, [r7, #24]
        break;
 8004358:	e012      	b.n	8004380 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <UART_SetConfig+0x24c>)
 800435c:	61bb      	str	r3, [r7, #24]
        break;
 800435e:	e00f      	b.n	8004380 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004360:	f7ff f8ae 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8004364:	0003      	movs	r3, r0
 8004366:	61bb      	str	r3, [r7, #24]
        break;
 8004368:	e00a      	b.n	8004380 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e006      	b.n	8004380 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004376:	231e      	movs	r3, #30
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
        break;
 800437e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01e      	beq.n	80043c4 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085a      	lsrs	r2, r3, #1
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	18d2      	adds	r2, r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	0019      	movs	r1, r3
 8004396:	0010      	movs	r0, r2
 8004398:	f7fb fec0 	bl	800011c <__udivsi3>
 800439c:	0003      	movs	r3, r0
 800439e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0f      	cmp	r3, #15
 80043a4:	d90a      	bls.n	80043bc <UART_SetConfig+0x218>
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	025b      	lsls	r3, r3, #9
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d205      	bcs.n	80043bc <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	e003      	b.n	80043c4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80043bc:	231e      	movs	r3, #30
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043d0:	231e      	movs	r3, #30
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b008      	add	sp, #32
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	ffff69f3 	.word	0xffff69f3
 80043e4:	ffffcfff 	.word	0xffffcfff
 80043e8:	fffff4ff 	.word	0xfffff4ff
 80043ec:	40021000 	.word	0x40021000
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2208      	movs	r2, #8
 8004402:	4013      	ands	r3, r2
 8004404:	d00b      	beq.n	800441e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a4a      	ldr	r2, [pc, #296]	; (8004538 <UART_AdvFeatureConfig+0x144>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d00b      	beq.n	8004440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4a43      	ldr	r2, [pc, #268]	; (800453c <UART_AdvFeatureConfig+0x148>)
 8004430:	4013      	ands	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2202      	movs	r2, #2
 8004446:	4013      	ands	r3, r2
 8004448:	d00b      	beq.n	8004462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a3b      	ldr	r2, [pc, #236]	; (8004540 <UART_AdvFeatureConfig+0x14c>)
 8004452:	4013      	ands	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2204      	movs	r2, #4
 8004468:	4013      	ands	r3, r2
 800446a:	d00b      	beq.n	8004484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a34      	ldr	r2, [pc, #208]	; (8004544 <UART_AdvFeatureConfig+0x150>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2210      	movs	r2, #16
 800448a:	4013      	ands	r3, r2
 800448c:	d00b      	beq.n	80044a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <UART_AdvFeatureConfig+0x154>)
 8004496:	4013      	ands	r3, r2
 8004498:	0019      	movs	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2220      	movs	r2, #32
 80044ac:	4013      	ands	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a25      	ldr	r2, [pc, #148]	; (800454c <UART_AdvFeatureConfig+0x158>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	2240      	movs	r2, #64	; 0x40
 80044ce:	4013      	ands	r3, r2
 80044d0:	d01d      	beq.n	800450e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <UART_AdvFeatureConfig+0x15c>)
 80044da:	4013      	ands	r3, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	035b      	lsls	r3, r3, #13
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10b      	bne.n	800450e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <UART_AdvFeatureConfig+0x160>)
 80044fe:	4013      	ands	r3, r2
 8004500:	0019      	movs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2280      	movs	r2, #128	; 0x80
 8004514:	4013      	ands	r3, r2
 8004516:	d00b      	beq.n	8004530 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <UART_AdvFeatureConfig+0x164>)
 8004520:	4013      	ands	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }
}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}
 8004538:	ffff7fff 	.word	0xffff7fff
 800453c:	fffdffff 	.word	0xfffdffff
 8004540:	fffeffff 	.word	0xfffeffff
 8004544:	fffbffff 	.word	0xfffbffff
 8004548:	ffffefff 	.word	0xffffefff
 800454c:	ffffdfff 	.word	0xffffdfff
 8004550:	ffefffff 	.word	0xffefffff
 8004554:	ff9fffff 	.word	0xff9fffff
 8004558:	fff7ffff 	.word	0xfff7ffff

0800455c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b092      	sub	sp, #72	; 0x48
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2284      	movs	r2, #132	; 0x84
 8004568:	2100      	movs	r1, #0
 800456a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800456c:	f7fd fef0 	bl	8002350 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2208      	movs	r2, #8
 800457c:	4013      	ands	r3, r2
 800457e:	2b08      	cmp	r3, #8
 8004580:	d12c      	bne.n	80045dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	0391      	lsls	r1, r2, #14
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4a46      	ldr	r2, [pc, #280]	; (80046a4 <UART_CheckIdleState+0x148>)
 800458c:	9200      	str	r2, [sp, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	f000 f88c 	bl	80046ac <UART_WaitOnFlagUntilTimeout>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d021      	beq.n	80045dc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004598:	f3ef 8310 	mrs	r3, PRIMASK
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045a2:	2301      	movs	r3, #1
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2180      	movs	r1, #128	; 0x80
 80045ba:	438a      	bics	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2278      	movs	r2, #120	; 0x78
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e05f      	b.n	800469c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2204      	movs	r2, #4
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d146      	bne.n	8004678 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	2280      	movs	r2, #128	; 0x80
 80045ee:	03d1      	lsls	r1, r2, #15
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4a2c      	ldr	r2, [pc, #176]	; (80046a4 <UART_CheckIdleState+0x148>)
 80045f4:	9200      	str	r2, [sp, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f000 f858 	bl	80046ac <UART_WaitOnFlagUntilTimeout>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d03b      	beq.n	8004678 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004600:	f3ef 8310 	mrs	r3, PRIMASK
 8004604:	60fb      	str	r3, [r7, #12]
  return(result);
 8004606:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	2301      	movs	r3, #1
 800460c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4921      	ldr	r1, [pc, #132]	; (80046a8 <UART_CheckIdleState+0x14c>)
 8004622:	400a      	ands	r2, r1
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f383 8810 	msr	PRIMASK, r3
}
 8004630:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004632:	f3ef 8310 	mrs	r3, PRIMASK
 8004636:	61bb      	str	r3, [r7, #24]
  return(result);
 8004638:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	2301      	movs	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f383 8810 	msr	PRIMASK, r3
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2101      	movs	r1, #1
 8004654:	438a      	bics	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f383 8810 	msr	PRIMASK, r3
}
 8004662:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	2120      	movs	r1, #32
 800466a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2278      	movs	r2, #120	; 0x78
 8004670:	2100      	movs	r1, #0
 8004672:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e011      	b.n	800469c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	2120      	movs	r1, #32
 8004684:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2278      	movs	r2, #120	; 0x78
 8004696:	2100      	movs	r1, #0
 8004698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b010      	add	sp, #64	; 0x40
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	01ffffff 	.word	0x01ffffff
 80046a8:	fffffedf 	.word	0xfffffedf

080046ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	1dfb      	adds	r3, r7, #7
 80046ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046bc:	e051      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	3301      	adds	r3, #1
 80046c2:	d04e      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c4:	f7fd fe44 	bl	8002350 <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d302      	bcc.n	80046da <UART_WaitOnFlagUntilTimeout+0x2e>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e051      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2204      	movs	r2, #4
 80046e6:	4013      	ands	r3, r2
 80046e8:	d03b      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb6>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d038      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb6>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d035      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4013      	ands	r3, r2
 8004700:	2b08      	cmp	r3, #8
 8004702:	d111      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2208      	movs	r2, #8
 800470a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 f83c 	bl	800478c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2284      	movs	r2, #132	; 0x84
 8004718:	2108      	movs	r1, #8
 800471a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2278      	movs	r2, #120	; 0x78
 8004720:	2100      	movs	r1, #0
 8004722:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e02c      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	401a      	ands	r2, r3
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	429a      	cmp	r2, r3
 800473a:	d112      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	0018      	movs	r0, r3
 800474a:	f000 f81f 	bl	800478c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2284      	movs	r2, #132	; 0x84
 8004752:	2120      	movs	r1, #32
 8004754:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2278      	movs	r2, #120	; 0x78
 800475a:	2100      	movs	r1, #0
 800475c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e00f      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	425a      	negs	r2, r3
 8004772:	4153      	adcs	r3, r2
 8004774:	b2db      	uxtb	r3, r3
 8004776:	001a      	movs	r2, r3
 8004778:	1dfb      	adds	r3, r7, #7
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d09e      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08e      	sub	sp, #56	; 0x38
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004794:	f3ef 8310 	mrs	r3, PRIMASK
 8004798:	617b      	str	r3, [r7, #20]
  return(result);
 800479a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f383 8810 	msr	PRIMASK, r3
}
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4926      	ldr	r1, [pc, #152]	; (8004850 <UART_EndRxTransfer+0xc4>)
 80047b6:	400a      	ands	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f383 8810 	msr	PRIMASK, r3
}
 80047c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ca:	623b      	str	r3, [r7, #32]
  return(result);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
 80047d0:	2301      	movs	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f383 8810 	msr	PRIMASK, r3
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2101      	movs	r1, #1
 80047e8:	438a      	bics	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d118      	bne.n	8004832 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004800:	f3ef 8310 	mrs	r3, PRIMASK
 8004804:	60bb      	str	r3, [r7, #8]
  return(result);
 8004806:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480a:	2301      	movs	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2110      	movs	r1, #16
 8004822:	438a      	bics	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f383 8810 	msr	PRIMASK, r3
}
 8004830:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2280      	movs	r2, #128	; 0x80
 8004836:	2120      	movs	r1, #32
 8004838:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b00e      	add	sp, #56	; 0x38
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	fffffedf 	.word	0xfffffedf

08004854 <__assert_func>:
 8004854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004856:	0014      	movs	r4, r2
 8004858:	001a      	movs	r2, r3
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <__assert_func+0x2c>)
 800485c:	0005      	movs	r5, r0
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	000e      	movs	r6, r1
 8004862:	68d8      	ldr	r0, [r3, #12]
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <__assert_func+0x30>)
 8004866:	2c00      	cmp	r4, #0
 8004868:	d101      	bne.n	800486e <__assert_func+0x1a>
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <__assert_func+0x34>)
 800486c:	001c      	movs	r4, r3
 800486e:	4907      	ldr	r1, [pc, #28]	; (800488c <__assert_func+0x38>)
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	9402      	str	r4, [sp, #8]
 8004874:	002b      	movs	r3, r5
 8004876:	9600      	str	r6, [sp, #0]
 8004878:	f000 f8b2 	bl	80049e0 <fiprintf>
 800487c:	f000 f9b4 	bl	8004be8 <abort>
 8004880:	200000e8 	.word	0x200000e8
 8004884:	08005b98 	.word	0x08005b98
 8004888:	08005bd3 	.word	0x08005bd3
 800488c:	08005ba5 	.word	0x08005ba5

08004890 <std>:
 8004890:	2300      	movs	r3, #0
 8004892:	b510      	push	{r4, lr}
 8004894:	0004      	movs	r4, r0
 8004896:	6003      	str	r3, [r0, #0]
 8004898:	6043      	str	r3, [r0, #4]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	; 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6103      	str	r3, [r0, #16]
 80048a4:	6143      	str	r3, [r0, #20]
 80048a6:	6183      	str	r3, [r0, #24]
 80048a8:	0019      	movs	r1, r3
 80048aa:	2208      	movs	r2, #8
 80048ac:	305c      	adds	r0, #92	; 0x5c
 80048ae:	f000 f90f 	bl	8004ad0 <memset>
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <std+0x50>)
 80048b4:	6224      	str	r4, [r4, #32]
 80048b6:	6263      	str	r3, [r4, #36]	; 0x24
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <std+0x54>)
 80048ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <std+0x58>)
 80048be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <std+0x5c>)
 80048c2:	6323      	str	r3, [r4, #48]	; 0x30
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <std+0x60>)
 80048c6:	429c      	cmp	r4, r3
 80048c8:	d005      	beq.n	80048d6 <std+0x46>
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <std+0x64>)
 80048cc:	429c      	cmp	r4, r3
 80048ce:	d002      	beq.n	80048d6 <std+0x46>
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <std+0x68>)
 80048d2:	429c      	cmp	r4, r3
 80048d4:	d103      	bne.n	80048de <std+0x4e>
 80048d6:	0020      	movs	r0, r4
 80048d8:	3058      	adds	r0, #88	; 0x58
 80048da:	f000 f979 	bl	8004bd0 <__retarget_lock_init_recursive>
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	08004a39 	.word	0x08004a39
 80048e4:	08004a61 	.word	0x08004a61
 80048e8:	08004a99 	.word	0x08004a99
 80048ec:	08004ac5 	.word	0x08004ac5
 80048f0:	20000400 	.word	0x20000400
 80048f4:	20000468 	.word	0x20000468
 80048f8:	200004d0 	.word	0x200004d0

080048fc <stdio_exit_handler>:
 80048fc:	b510      	push	{r4, lr}
 80048fe:	4a03      	ldr	r2, [pc, #12]	; (800490c <stdio_exit_handler+0x10>)
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <stdio_exit_handler+0x14>)
 8004902:	4804      	ldr	r0, [pc, #16]	; (8004914 <stdio_exit_handler+0x18>)
 8004904:	f000 f87c 	bl	8004a00 <_fwalk_sglue>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	20000090 	.word	0x20000090
 8004910:	08005491 	.word	0x08005491
 8004914:	2000009c 	.word	0x2000009c

08004918 <cleanup_stdio>:
 8004918:	6841      	ldr	r1, [r0, #4]
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <cleanup_stdio+0x30>)
 800491c:	b510      	push	{r4, lr}
 800491e:	0004      	movs	r4, r0
 8004920:	4299      	cmp	r1, r3
 8004922:	d001      	beq.n	8004928 <cleanup_stdio+0x10>
 8004924:	f000 fdb4 	bl	8005490 <_fflush_r>
 8004928:	68a1      	ldr	r1, [r4, #8]
 800492a:	4b08      	ldr	r3, [pc, #32]	; (800494c <cleanup_stdio+0x34>)
 800492c:	4299      	cmp	r1, r3
 800492e:	d002      	beq.n	8004936 <cleanup_stdio+0x1e>
 8004930:	0020      	movs	r0, r4
 8004932:	f000 fdad 	bl	8005490 <_fflush_r>
 8004936:	68e1      	ldr	r1, [r4, #12]
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <cleanup_stdio+0x38>)
 800493a:	4299      	cmp	r1, r3
 800493c:	d002      	beq.n	8004944 <cleanup_stdio+0x2c>
 800493e:	0020      	movs	r0, r4
 8004940:	f000 fda6 	bl	8005490 <_fflush_r>
 8004944:	bd10      	pop	{r4, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	20000400 	.word	0x20000400
 800494c:	20000468 	.word	0x20000468
 8004950:	200004d0 	.word	0x200004d0

08004954 <global_stdio_init.part.0>:
 8004954:	b510      	push	{r4, lr}
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <global_stdio_init.part.0+0x28>)
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <global_stdio_init.part.0+0x2c>)
 800495a:	2104      	movs	r1, #4
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	4809      	ldr	r0, [pc, #36]	; (8004984 <global_stdio_init.part.0+0x30>)
 8004960:	2200      	movs	r2, #0
 8004962:	f7ff ff95 	bl	8004890 <std>
 8004966:	2201      	movs	r2, #1
 8004968:	2109      	movs	r1, #9
 800496a:	4807      	ldr	r0, [pc, #28]	; (8004988 <global_stdio_init.part.0+0x34>)
 800496c:	f7ff ff90 	bl	8004890 <std>
 8004970:	2202      	movs	r2, #2
 8004972:	2112      	movs	r1, #18
 8004974:	4805      	ldr	r0, [pc, #20]	; (800498c <global_stdio_init.part.0+0x38>)
 8004976:	f7ff ff8b 	bl	8004890 <std>
 800497a:	bd10      	pop	{r4, pc}
 800497c:	20000538 	.word	0x20000538
 8004980:	080048fd 	.word	0x080048fd
 8004984:	20000400 	.word	0x20000400
 8004988:	20000468 	.word	0x20000468
 800498c:	200004d0 	.word	0x200004d0

08004990 <__sfp_lock_acquire>:
 8004990:	b510      	push	{r4, lr}
 8004992:	4802      	ldr	r0, [pc, #8]	; (800499c <__sfp_lock_acquire+0xc>)
 8004994:	f000 f91d 	bl	8004bd2 <__retarget_lock_acquire_recursive>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	20000541 	.word	0x20000541

080049a0 <__sfp_lock_release>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	4802      	ldr	r0, [pc, #8]	; (80049ac <__sfp_lock_release+0xc>)
 80049a4:	f000 f916 	bl	8004bd4 <__retarget_lock_release_recursive>
 80049a8:	bd10      	pop	{r4, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	20000541 	.word	0x20000541

080049b0 <__sinit>:
 80049b0:	b510      	push	{r4, lr}
 80049b2:	0004      	movs	r4, r0
 80049b4:	f7ff ffec 	bl	8004990 <__sfp_lock_acquire>
 80049b8:	6a23      	ldr	r3, [r4, #32]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <__sinit+0x14>
 80049be:	f7ff ffef 	bl	80049a0 <__sfp_lock_release>
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <__sinit+0x28>)
 80049c6:	6223      	str	r3, [r4, #32]
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <__sinit+0x2c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f6      	bne.n	80049be <__sinit+0xe>
 80049d0:	f7ff ffc0 	bl	8004954 <global_stdio_init.part.0>
 80049d4:	e7f3      	b.n	80049be <__sinit+0xe>
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	08004919 	.word	0x08004919
 80049dc:	20000538 	.word	0x20000538

080049e0 <fiprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b517      	push	{r0, r1, r2, r4, lr}
 80049e4:	4c05      	ldr	r4, [pc, #20]	; (80049fc <fiprintf+0x1c>)
 80049e6:	ab05      	add	r3, sp, #20
 80049e8:	cb04      	ldmia	r3!, {r2}
 80049ea:	0001      	movs	r1, r0
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	f000 fa28 	bl	8004e44 <_vfiprintf_r>
 80049f4:	bc1e      	pop	{r1, r2, r3, r4}
 80049f6:	bc08      	pop	{r3}
 80049f8:	b003      	add	sp, #12
 80049fa:	4718      	bx	r3
 80049fc:	200000e8 	.word	0x200000e8

08004a00 <_fwalk_sglue>:
 8004a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a02:	0014      	movs	r4, r2
 8004a04:	2600      	movs	r6, #0
 8004a06:	9000      	str	r0, [sp, #0]
 8004a08:	9101      	str	r1, [sp, #4]
 8004a0a:	68a5      	ldr	r5, [r4, #8]
 8004a0c:	6867      	ldr	r7, [r4, #4]
 8004a0e:	3f01      	subs	r7, #1
 8004a10:	d504      	bpl.n	8004a1c <_fwalk_sglue+0x1c>
 8004a12:	6824      	ldr	r4, [r4, #0]
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	d1f8      	bne.n	8004a0a <_fwalk_sglue+0xa>
 8004a18:	0030      	movs	r0, r6
 8004a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a1c:	89ab      	ldrh	r3, [r5, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d908      	bls.n	8004a34 <_fwalk_sglue+0x34>
 8004a22:	220e      	movs	r2, #14
 8004a24:	5eab      	ldrsh	r3, [r5, r2]
 8004a26:	3301      	adds	r3, #1
 8004a28:	d004      	beq.n	8004a34 <_fwalk_sglue+0x34>
 8004a2a:	0029      	movs	r1, r5
 8004a2c:	9800      	ldr	r0, [sp, #0]
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	4798      	blx	r3
 8004a32:	4306      	orrs	r6, r0
 8004a34:	3568      	adds	r5, #104	; 0x68
 8004a36:	e7ea      	b.n	8004a0e <_fwalk_sglue+0xe>

08004a38 <__sread>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	000c      	movs	r4, r1
 8004a3c:	250e      	movs	r5, #14
 8004a3e:	5f49      	ldrsh	r1, [r1, r5]
 8004a40:	f000 f874 	bl	8004b2c <_read_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	db03      	blt.n	8004a50 <__sread+0x18>
 8004a48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a4a:	181b      	adds	r3, r3, r0
 8004a4c:	6563      	str	r3, [r4, #84]	; 0x54
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	4a02      	ldr	r2, [pc, #8]	; (8004a5c <__sread+0x24>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	e7f9      	b.n	8004a4e <__sread+0x16>
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	ffffefff 	.word	0xffffefff

08004a60 <__swrite>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	001f      	movs	r7, r3
 8004a64:	898b      	ldrh	r3, [r1, #12]
 8004a66:	0005      	movs	r5, r0
 8004a68:	000c      	movs	r4, r1
 8004a6a:	0016      	movs	r6, r2
 8004a6c:	05db      	lsls	r3, r3, #23
 8004a6e:	d505      	bpl.n	8004a7c <__swrite+0x1c>
 8004a70:	230e      	movs	r3, #14
 8004a72:	5ec9      	ldrsh	r1, [r1, r3]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2302      	movs	r3, #2
 8004a78:	f000 f844 	bl	8004b04 <_lseek_r>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <__swrite+0x34>)
 8004a80:	0028      	movs	r0, r5
 8004a82:	4013      	ands	r3, r2
 8004a84:	81a3      	strh	r3, [r4, #12]
 8004a86:	0032      	movs	r2, r6
 8004a88:	230e      	movs	r3, #14
 8004a8a:	5ee1      	ldrsh	r1, [r4, r3]
 8004a8c:	003b      	movs	r3, r7
 8004a8e:	f000 f861 	bl	8004b54 <_write_r>
 8004a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a94:	ffffefff 	.word	0xffffefff

08004a98 <__sseek>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	000c      	movs	r4, r1
 8004a9c:	250e      	movs	r5, #14
 8004a9e:	5f49      	ldrsh	r1, [r1, r5]
 8004aa0:	f000 f830 	bl	8004b04 <_lseek_r>
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	1c42      	adds	r2, r0, #1
 8004aa8:	d103      	bne.n	8004ab2 <__sseek+0x1a>
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <__sseek+0x28>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	81a3      	strh	r3, [r4, #12]
 8004ab0:	bd70      	pop	{r4, r5, r6, pc}
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	0152      	lsls	r2, r2, #5
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	81a3      	strh	r3, [r4, #12]
 8004aba:	6560      	str	r0, [r4, #84]	; 0x54
 8004abc:	e7f8      	b.n	8004ab0 <__sseek+0x18>
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	ffffefff 	.word	0xffffefff

08004ac4 <__sclose>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	230e      	movs	r3, #14
 8004ac8:	5ec9      	ldrsh	r1, [r1, r3]
 8004aca:	f000 f809 	bl	8004ae0 <_close_r>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <memset>:
 8004ad0:	0003      	movs	r3, r0
 8004ad2:	1882      	adds	r2, r0, r2
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d100      	bne.n	8004ada <memset+0xa>
 8004ad8:	4770      	bx	lr
 8004ada:	7019      	strb	r1, [r3, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	e7f9      	b.n	8004ad4 <memset+0x4>

08004ae0 <_close_r>:
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	b570      	push	{r4, r5, r6, lr}
 8004ae4:	4d06      	ldr	r5, [pc, #24]	; (8004b00 <_close_r+0x20>)
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fb febf 	bl	800086e <_close>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d103      	bne.n	8004afc <_close_r+0x1c>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d000      	beq.n	8004afc <_close_r+0x1c>
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	2000053c 	.word	0x2000053c

08004b04 <_lseek_r>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	0004      	movs	r4, r0
 8004b08:	0008      	movs	r0, r1
 8004b0a:	0011      	movs	r1, r2
 8004b0c:	001a      	movs	r2, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4d05      	ldr	r5, [pc, #20]	; (8004b28 <_lseek_r+0x24>)
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	f7fb fecc 	bl	80008b0 <_lseek>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d103      	bne.n	8004b24 <_lseek_r+0x20>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d000      	beq.n	8004b24 <_lseek_r+0x20>
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	2000053c 	.word	0x2000053c

08004b2c <_read_r>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	0004      	movs	r4, r0
 8004b30:	0008      	movs	r0, r1
 8004b32:	0011      	movs	r1, r2
 8004b34:	001a      	movs	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	4d05      	ldr	r5, [pc, #20]	; (8004b50 <_read_r+0x24>)
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fb fe5e 	bl	80007fc <_read>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d103      	bne.n	8004b4c <_read_r+0x20>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d000      	beq.n	8004b4c <_read_r+0x20>
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	2000053c 	.word	0x2000053c

08004b54 <_write_r>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	0004      	movs	r4, r0
 8004b58:	0008      	movs	r0, r1
 8004b5a:	0011      	movs	r1, r2
 8004b5c:	001a      	movs	r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4d05      	ldr	r5, [pc, #20]	; (8004b78 <_write_r+0x24>)
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fb fe67 	bl	8000836 <_write>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d103      	bne.n	8004b74 <_write_r+0x20>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d000      	beq.n	8004b74 <_write_r+0x20>
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	2000053c 	.word	0x2000053c

08004b7c <__errno>:
 8004b7c:	4b01      	ldr	r3, [pc, #4]	; (8004b84 <__errno+0x8>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	4770      	bx	lr
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	200000e8 	.word	0x200000e8

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x38>)
 8004b8e:	4d0d      	ldr	r5, [pc, #52]	; (8004bc4 <__libc_init_array+0x3c>)
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	2600      	movs	r6, #0
 8004b9a:	f000 fe3d 	bl	8005818 <_init>
 8004b9e:	4c0a      	ldr	r4, [pc, #40]	; (8004bc8 <__libc_init_array+0x40>)
 8004ba0:	4d0a      	ldr	r5, [pc, #40]	; (8004bcc <__libc_init_array+0x44>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	00b3      	lsls	r3, r6, #2
 8004bae:	58eb      	ldr	r3, [r5, r3]
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	00b3      	lsls	r3, r6, #2
 8004bb8:	58eb      	ldr	r3, [r5, r3]
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	08006400 	.word	0x08006400
 8004bc4:	08006400 	.word	0x08006400
 8004bc8:	08006404 	.word	0x08006404
 8004bcc:	08006400 	.word	0x08006400

08004bd0 <__retarget_lock_init_recursive>:
 8004bd0:	4770      	bx	lr

08004bd2 <__retarget_lock_acquire_recursive>:
 8004bd2:	4770      	bx	lr

08004bd4 <__retarget_lock_release_recursive>:
 8004bd4:	4770      	bx	lr

08004bd6 <memcpy>:
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d100      	bne.n	8004be0 <memcpy+0xa>
 8004bde:	bd10      	pop	{r4, pc}
 8004be0:	5ccc      	ldrb	r4, [r1, r3]
 8004be2:	54c4      	strb	r4, [r0, r3]
 8004be4:	3301      	adds	r3, #1
 8004be6:	e7f8      	b.n	8004bda <memcpy+0x4>

08004be8 <abort>:
 8004be8:	2006      	movs	r0, #6
 8004bea:	b510      	push	{r4, lr}
 8004bec:	f000 fd4c 	bl	8005688 <raise>
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7fb fdf7 	bl	80007e4 <_exit>
	...

08004bf8 <_free_r>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	0005      	movs	r5, r0
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	d010      	beq.n	8004c22 <_free_r+0x2a>
 8004c00:	1f0c      	subs	r4, r1, #4
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da00      	bge.n	8004c0a <_free_r+0x12>
 8004c08:	18e4      	adds	r4, r4, r3
 8004c0a:	0028      	movs	r0, r5
 8004c0c:	f000 f8e2 	bl	8004dd4 <__malloc_lock>
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <_free_r+0x90>)
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <_free_r+0x2c>
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	6014      	str	r4, [r2, #0]
 8004c1c:	0028      	movs	r0, r5
 8004c1e:	f000 f8e1 	bl	8004de4 <__malloc_unlock>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d908      	bls.n	8004c3a <_free_r+0x42>
 8004c28:	6820      	ldr	r0, [r4, #0]
 8004c2a:	1821      	adds	r1, r4, r0
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	d1f3      	bne.n	8004c18 <_free_r+0x20>
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	1809      	adds	r1, r1, r0
 8004c36:	6021      	str	r1, [r4, #0]
 8004c38:	e7ee      	b.n	8004c18 <_free_r+0x20>
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <_free_r+0x4e>
 8004c42:	42a3      	cmp	r3, r4
 8004c44:	d9f9      	bls.n	8004c3a <_free_r+0x42>
 8004c46:	6811      	ldr	r1, [r2, #0]
 8004c48:	1850      	adds	r0, r2, r1
 8004c4a:	42a0      	cmp	r0, r4
 8004c4c:	d10b      	bne.n	8004c66 <_free_r+0x6e>
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	1809      	adds	r1, r1, r0
 8004c52:	1850      	adds	r0, r2, r1
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	4283      	cmp	r3, r0
 8004c58:	d1e0      	bne.n	8004c1c <_free_r+0x24>
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	1841      	adds	r1, r0, r1
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	6053      	str	r3, [r2, #4]
 8004c64:	e7da      	b.n	8004c1c <_free_r+0x24>
 8004c66:	42a0      	cmp	r0, r4
 8004c68:	d902      	bls.n	8004c70 <_free_r+0x78>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	e7d5      	b.n	8004c1c <_free_r+0x24>
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	1821      	adds	r1, r4, r0
 8004c74:	428b      	cmp	r3, r1
 8004c76:	d103      	bne.n	8004c80 <_free_r+0x88>
 8004c78:	6819      	ldr	r1, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	1809      	adds	r1, r1, r0
 8004c7e:	6021      	str	r1, [r4, #0]
 8004c80:	6063      	str	r3, [r4, #4]
 8004c82:	6054      	str	r4, [r2, #4]
 8004c84:	e7ca      	b.n	8004c1c <_free_r+0x24>
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	20000544 	.word	0x20000544

08004c8c <sbrk_aligned>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4e0f      	ldr	r6, [pc, #60]	; (8004ccc <sbrk_aligned+0x40>)
 8004c90:	000d      	movs	r5, r1
 8004c92:	6831      	ldr	r1, [r6, #0]
 8004c94:	0004      	movs	r4, r0
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d102      	bne.n	8004ca0 <sbrk_aligned+0x14>
 8004c9a:	f000 fd15 	bl	80056c8 <_sbrk_r>
 8004c9e:	6030      	str	r0, [r6, #0]
 8004ca0:	0029      	movs	r1, r5
 8004ca2:	0020      	movs	r0, r4
 8004ca4:	f000 fd10 	bl	80056c8 <_sbrk_r>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d00a      	beq.n	8004cc2 <sbrk_aligned+0x36>
 8004cac:	2303      	movs	r3, #3
 8004cae:	1cc5      	adds	r5, r0, #3
 8004cb0:	439d      	bics	r5, r3
 8004cb2:	42a8      	cmp	r0, r5
 8004cb4:	d007      	beq.n	8004cc6 <sbrk_aligned+0x3a>
 8004cb6:	1a29      	subs	r1, r5, r0
 8004cb8:	0020      	movs	r0, r4
 8004cba:	f000 fd05 	bl	80056c8 <_sbrk_r>
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d101      	bne.n	8004cc6 <sbrk_aligned+0x3a>
 8004cc2:	2501      	movs	r5, #1
 8004cc4:	426d      	negs	r5, r5
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	20000548 	.word	0x20000548

08004cd0 <_malloc_r>:
 8004cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	1ccb      	adds	r3, r1, #3
 8004cd6:	4393      	bics	r3, r2
 8004cd8:	3308      	adds	r3, #8
 8004cda:	0006      	movs	r6, r0
 8004cdc:	001f      	movs	r7, r3
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d238      	bcs.n	8004d54 <_malloc_r+0x84>
 8004ce2:	270c      	movs	r7, #12
 8004ce4:	42b9      	cmp	r1, r7
 8004ce6:	d837      	bhi.n	8004d58 <_malloc_r+0x88>
 8004ce8:	0030      	movs	r0, r6
 8004cea:	f000 f873 	bl	8004dd4 <__malloc_lock>
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <_malloc_r+0x100>)
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	001c      	movs	r4, r3
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	d133      	bne.n	8004d62 <_malloc_r+0x92>
 8004cfa:	0039      	movs	r1, r7
 8004cfc:	0030      	movs	r0, r6
 8004cfe:	f7ff ffc5 	bl	8004c8c <sbrk_aligned>
 8004d02:	0004      	movs	r4, r0
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d15e      	bne.n	8004dc6 <_malloc_r+0xf6>
 8004d08:	9b00      	ldr	r3, [sp, #0]
 8004d0a:	681c      	ldr	r4, [r3, #0]
 8004d0c:	0025      	movs	r5, r4
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	d14e      	bne.n	8004db0 <_malloc_r+0xe0>
 8004d12:	2c00      	cmp	r4, #0
 8004d14:	d051      	beq.n	8004dba <_malloc_r+0xea>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	0029      	movs	r1, r5
 8004d1a:	18e3      	adds	r3, r4, r3
 8004d1c:	0030      	movs	r0, r6
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	f000 fcd2 	bl	80056c8 <_sbrk_r>
 8004d24:	9b01      	ldr	r3, [sp, #4]
 8004d26:	4283      	cmp	r3, r0
 8004d28:	d147      	bne.n	8004dba <_malloc_r+0xea>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0030      	movs	r0, r6
 8004d2e:	1aff      	subs	r7, r7, r3
 8004d30:	0039      	movs	r1, r7
 8004d32:	f7ff ffab 	bl	8004c8c <sbrk_aligned>
 8004d36:	3001      	adds	r0, #1
 8004d38:	d03f      	beq.n	8004dba <_malloc_r+0xea>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	19db      	adds	r3, r3, r7
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	9b00      	ldr	r3, [sp, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d040      	beq.n	8004dca <_malloc_r+0xfa>
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	42a2      	cmp	r2, r4
 8004d4c:	d133      	bne.n	8004db6 <_malloc_r+0xe6>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e014      	b.n	8004d7e <_malloc_r+0xae>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	dac5      	bge.n	8004ce4 <_malloc_r+0x14>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	0028      	movs	r0, r5
 8004d60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	1bc9      	subs	r1, r1, r7
 8004d66:	d420      	bmi.n	8004daa <_malloc_r+0xda>
 8004d68:	290b      	cmp	r1, #11
 8004d6a:	d918      	bls.n	8004d9e <_malloc_r+0xce>
 8004d6c:	19e2      	adds	r2, r4, r7
 8004d6e:	6027      	str	r7, [r4, #0]
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d112      	bne.n	8004d9a <_malloc_r+0xca>
 8004d74:	9b00      	ldr	r3, [sp, #0]
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	6863      	ldr	r3, [r4, #4]
 8004d7a:	6011      	str	r1, [r2, #0]
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	0030      	movs	r0, r6
 8004d80:	0025      	movs	r5, r4
 8004d82:	f000 f82f 	bl	8004de4 <__malloc_unlock>
 8004d86:	2207      	movs	r2, #7
 8004d88:	350b      	adds	r5, #11
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	4395      	bics	r5, r2
 8004d8e:	1aea      	subs	r2, r5, r3
 8004d90:	429d      	cmp	r5, r3
 8004d92:	d0e4      	beq.n	8004d5e <_malloc_r+0x8e>
 8004d94:	1b5b      	subs	r3, r3, r5
 8004d96:	50a3      	str	r3, [r4, r2]
 8004d98:	e7e1      	b.n	8004d5e <_malloc_r+0x8e>
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	e7ec      	b.n	8004d78 <_malloc_r+0xa8>
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	d1d5      	bne.n	8004d50 <_malloc_r+0x80>
 8004da4:	9b00      	ldr	r3, [sp, #0]
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e7e9      	b.n	8004d7e <_malloc_r+0xae>
 8004daa:	0023      	movs	r3, r4
 8004dac:	6864      	ldr	r4, [r4, #4]
 8004dae:	e7a2      	b.n	8004cf6 <_malloc_r+0x26>
 8004db0:	002c      	movs	r4, r5
 8004db2:	686d      	ldr	r5, [r5, #4]
 8004db4:	e7ab      	b.n	8004d0e <_malloc_r+0x3e>
 8004db6:	0013      	movs	r3, r2
 8004db8:	e7c4      	b.n	8004d44 <_malloc_r+0x74>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	0030      	movs	r0, r6
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	f000 f810 	bl	8004de4 <__malloc_unlock>
 8004dc4:	e7cb      	b.n	8004d5e <_malloc_r+0x8e>
 8004dc6:	6027      	str	r7, [r4, #0]
 8004dc8:	e7d9      	b.n	8004d7e <_malloc_r+0xae>
 8004dca:	605b      	str	r3, [r3, #4]
 8004dcc:	deff      	udf	#255	; 0xff
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	20000544 	.word	0x20000544

08004dd4 <__malloc_lock>:
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	4802      	ldr	r0, [pc, #8]	; (8004de0 <__malloc_lock+0xc>)
 8004dd8:	f7ff fefb 	bl	8004bd2 <__retarget_lock_acquire_recursive>
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	20000540 	.word	0x20000540

08004de4 <__malloc_unlock>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	4802      	ldr	r0, [pc, #8]	; (8004df0 <__malloc_unlock+0xc>)
 8004de8:	f7ff fef4 	bl	8004bd4 <__retarget_lock_release_recursive>
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	20000540 	.word	0x20000540

08004df4 <__sfputc_r>:
 8004df4:	6893      	ldr	r3, [r2, #8]
 8004df6:	b510      	push	{r4, lr}
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	da04      	bge.n	8004e0a <__sfputc_r+0x16>
 8004e00:	6994      	ldr	r4, [r2, #24]
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	db07      	blt.n	8004e16 <__sfputc_r+0x22>
 8004e06:	290a      	cmp	r1, #10
 8004e08:	d005      	beq.n	8004e16 <__sfputc_r+0x22>
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	1c58      	adds	r0, r3, #1
 8004e0e:	6010      	str	r0, [r2, #0]
 8004e10:	7019      	strb	r1, [r3, #0]
 8004e12:	0008      	movs	r0, r1
 8004e14:	bd10      	pop	{r4, pc}
 8004e16:	f000 fb66 	bl	80054e6 <__swbuf_r>
 8004e1a:	0001      	movs	r1, r0
 8004e1c:	e7f9      	b.n	8004e12 <__sfputc_r+0x1e>

08004e1e <__sfputs_r>:
 8004e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e20:	0006      	movs	r6, r0
 8004e22:	000f      	movs	r7, r1
 8004e24:	0014      	movs	r4, r2
 8004e26:	18d5      	adds	r5, r2, r3
 8004e28:	42ac      	cmp	r4, r5
 8004e2a:	d101      	bne.n	8004e30 <__sfputs_r+0x12>
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e007      	b.n	8004e40 <__sfputs_r+0x22>
 8004e30:	7821      	ldrb	r1, [r4, #0]
 8004e32:	003a      	movs	r2, r7
 8004e34:	0030      	movs	r0, r6
 8004e36:	f7ff ffdd 	bl	8004df4 <__sfputc_r>
 8004e3a:	3401      	adds	r4, #1
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d1f3      	bne.n	8004e28 <__sfputs_r+0xa>
 8004e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e44 <_vfiprintf_r>:
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e46:	b0a1      	sub	sp, #132	; 0x84
 8004e48:	000f      	movs	r7, r1
 8004e4a:	0015      	movs	r5, r2
 8004e4c:	001e      	movs	r6, r3
 8004e4e:	9003      	str	r0, [sp, #12]
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d004      	beq.n	8004e5e <_vfiprintf_r+0x1a>
 8004e54:	6a03      	ldr	r3, [r0, #32]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <_vfiprintf_r+0x1a>
 8004e5a:	f7ff fda9 	bl	80049b0 <__sinit>
 8004e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e60:	07db      	lsls	r3, r3, #31
 8004e62:	d405      	bmi.n	8004e70 <_vfiprintf_r+0x2c>
 8004e64:	89bb      	ldrh	r3, [r7, #12]
 8004e66:	059b      	lsls	r3, r3, #22
 8004e68:	d402      	bmi.n	8004e70 <_vfiprintf_r+0x2c>
 8004e6a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004e6c:	f7ff feb1 	bl	8004bd2 <__retarget_lock_acquire_recursive>
 8004e70:	89bb      	ldrh	r3, [r7, #12]
 8004e72:	071b      	lsls	r3, r3, #28
 8004e74:	d502      	bpl.n	8004e7c <_vfiprintf_r+0x38>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d113      	bne.n	8004ea4 <_vfiprintf_r+0x60>
 8004e7c:	0039      	movs	r1, r7
 8004e7e:	9803      	ldr	r0, [sp, #12]
 8004e80:	f000 fb74 	bl	800556c <__swsetup_r>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d00d      	beq.n	8004ea4 <_vfiprintf_r+0x60>
 8004e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e8a:	07db      	lsls	r3, r3, #31
 8004e8c:	d503      	bpl.n	8004e96 <_vfiprintf_r+0x52>
 8004e8e:	2001      	movs	r0, #1
 8004e90:	4240      	negs	r0, r0
 8004e92:	b021      	add	sp, #132	; 0x84
 8004e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e96:	89bb      	ldrh	r3, [r7, #12]
 8004e98:	059b      	lsls	r3, r3, #22
 8004e9a:	d4f8      	bmi.n	8004e8e <_vfiprintf_r+0x4a>
 8004e9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004e9e:	f7ff fe99 	bl	8004bd4 <__retarget_lock_release_recursive>
 8004ea2:	e7f4      	b.n	8004e8e <_vfiprintf_r+0x4a>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	ac08      	add	r4, sp, #32
 8004ea8:	6163      	str	r3, [r4, #20]
 8004eaa:	3320      	adds	r3, #32
 8004eac:	7663      	strb	r3, [r4, #25]
 8004eae:	3310      	adds	r3, #16
 8004eb0:	76a3      	strb	r3, [r4, #26]
 8004eb2:	9607      	str	r6, [sp, #28]
 8004eb4:	002e      	movs	r6, r5
 8004eb6:	7833      	ldrb	r3, [r6, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <_vfiprintf_r+0x7c>
 8004ebc:	2b25      	cmp	r3, #37	; 0x25
 8004ebe:	d148      	bne.n	8004f52 <_vfiprintf_r+0x10e>
 8004ec0:	1b73      	subs	r3, r6, r5
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	42ae      	cmp	r6, r5
 8004ec6:	d00b      	beq.n	8004ee0 <_vfiprintf_r+0x9c>
 8004ec8:	002a      	movs	r2, r5
 8004eca:	0039      	movs	r1, r7
 8004ecc:	9803      	ldr	r0, [sp, #12]
 8004ece:	f7ff ffa6 	bl	8004e1e <__sfputs_r>
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d100      	bne.n	8004ed8 <_vfiprintf_r+0x94>
 8004ed6:	e0af      	b.n	8005038 <_vfiprintf_r+0x1f4>
 8004ed8:	6963      	ldr	r3, [r4, #20]
 8004eda:	9a05      	ldr	r2, [sp, #20]
 8004edc:	189b      	adds	r3, r3, r2
 8004ede:	6163      	str	r3, [r4, #20]
 8004ee0:	7833      	ldrb	r3, [r6, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d100      	bne.n	8004ee8 <_vfiprintf_r+0xa4>
 8004ee6:	e0a7      	b.n	8005038 <_vfiprintf_r+0x1f4>
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2300      	movs	r3, #0
 8004eec:	4252      	negs	r2, r2
 8004eee:	6062      	str	r2, [r4, #4]
 8004ef0:	a904      	add	r1, sp, #16
 8004ef2:	3254      	adds	r2, #84	; 0x54
 8004ef4:	1852      	adds	r2, r2, r1
 8004ef6:	1c75      	adds	r5, r6, #1
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	60e3      	str	r3, [r4, #12]
 8004efc:	60a3      	str	r3, [r4, #8]
 8004efe:	7013      	strb	r3, [r2, #0]
 8004f00:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f02:	4b59      	ldr	r3, [pc, #356]	; (8005068 <_vfiprintf_r+0x224>)
 8004f04:	2205      	movs	r2, #5
 8004f06:	0018      	movs	r0, r3
 8004f08:	7829      	ldrb	r1, [r5, #0]
 8004f0a:	9305      	str	r3, [sp, #20]
 8004f0c:	f000 fbee 	bl	80056ec <memchr>
 8004f10:	1c6e      	adds	r6, r5, #1
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d11f      	bne.n	8004f56 <_vfiprintf_r+0x112>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	06d3      	lsls	r3, r2, #27
 8004f1a:	d504      	bpl.n	8004f26 <_vfiprintf_r+0xe2>
 8004f1c:	2353      	movs	r3, #83	; 0x53
 8004f1e:	a904      	add	r1, sp, #16
 8004f20:	185b      	adds	r3, r3, r1
 8004f22:	2120      	movs	r1, #32
 8004f24:	7019      	strb	r1, [r3, #0]
 8004f26:	0713      	lsls	r3, r2, #28
 8004f28:	d504      	bpl.n	8004f34 <_vfiprintf_r+0xf0>
 8004f2a:	2353      	movs	r3, #83	; 0x53
 8004f2c:	a904      	add	r1, sp, #16
 8004f2e:	185b      	adds	r3, r3, r1
 8004f30:	212b      	movs	r1, #43	; 0x2b
 8004f32:	7019      	strb	r1, [r3, #0]
 8004f34:	782b      	ldrb	r3, [r5, #0]
 8004f36:	2b2a      	cmp	r3, #42	; 0x2a
 8004f38:	d016      	beq.n	8004f68 <_vfiprintf_r+0x124>
 8004f3a:	002e      	movs	r6, r5
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	200a      	movs	r0, #10
 8004f40:	68e3      	ldr	r3, [r4, #12]
 8004f42:	7832      	ldrb	r2, [r6, #0]
 8004f44:	1c75      	adds	r5, r6, #1
 8004f46:	3a30      	subs	r2, #48	; 0x30
 8004f48:	2a09      	cmp	r2, #9
 8004f4a:	d94e      	bls.n	8004fea <_vfiprintf_r+0x1a6>
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d111      	bne.n	8004f74 <_vfiprintf_r+0x130>
 8004f50:	e017      	b.n	8004f82 <_vfiprintf_r+0x13e>
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7af      	b.n	8004eb6 <_vfiprintf_r+0x72>
 8004f56:	9b05      	ldr	r3, [sp, #20]
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	1ac0      	subs	r0, r0, r3
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4083      	lsls	r3, r0
 8004f60:	4313      	orrs	r3, r2
 8004f62:	0035      	movs	r5, r6
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	e7cc      	b.n	8004f02 <_vfiprintf_r+0xbe>
 8004f68:	9b07      	ldr	r3, [sp, #28]
 8004f6a:	1d19      	adds	r1, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	9107      	str	r1, [sp, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	db01      	blt.n	8004f78 <_vfiprintf_r+0x134>
 8004f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f76:	e004      	b.n	8004f82 <_vfiprintf_r+0x13e>
 8004f78:	425b      	negs	r3, r3
 8004f7a:	60e3      	str	r3, [r4, #12]
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	7833      	ldrb	r3, [r6, #0]
 8004f84:	2b2e      	cmp	r3, #46	; 0x2e
 8004f86:	d10a      	bne.n	8004f9e <_vfiprintf_r+0x15a>
 8004f88:	7873      	ldrb	r3, [r6, #1]
 8004f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8c:	d135      	bne.n	8004ffa <_vfiprintf_r+0x1b6>
 8004f8e:	9b07      	ldr	r3, [sp, #28]
 8004f90:	3602      	adds	r6, #2
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9207      	str	r2, [sp, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	db2b      	blt.n	8004ff4 <_vfiprintf_r+0x1b0>
 8004f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f9e:	4d33      	ldr	r5, [pc, #204]	; (800506c <_vfiprintf_r+0x228>)
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	7831      	ldrb	r1, [r6, #0]
 8004fa6:	f000 fba1 	bl	80056ec <memchr>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d006      	beq.n	8004fbc <_vfiprintf_r+0x178>
 8004fae:	2340      	movs	r3, #64	; 0x40
 8004fb0:	1b40      	subs	r0, r0, r5
 8004fb2:	4083      	lsls	r3, r0
 8004fb4:	6822      	ldr	r2, [r4, #0]
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	7831      	ldrb	r1, [r6, #0]
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	482b      	ldr	r0, [pc, #172]	; (8005070 <_vfiprintf_r+0x22c>)
 8004fc2:	1c75      	adds	r5, r6, #1
 8004fc4:	7621      	strb	r1, [r4, #24]
 8004fc6:	f000 fb91 	bl	80056ec <memchr>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d043      	beq.n	8005056 <_vfiprintf_r+0x212>
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <_vfiprintf_r+0x230>)
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d125      	bne.n	8005020 <_vfiprintf_r+0x1dc>
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	9b07      	ldr	r3, [sp, #28]
 8004fd8:	3307      	adds	r3, #7
 8004fda:	4393      	bics	r3, r2
 8004fdc:	3308      	adds	r3, #8
 8004fde:	9307      	str	r3, [sp, #28]
 8004fe0:	6963      	ldr	r3, [r4, #20]
 8004fe2:	9a04      	ldr	r2, [sp, #16]
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	6163      	str	r3, [r4, #20]
 8004fe8:	e764      	b.n	8004eb4 <_vfiprintf_r+0x70>
 8004fea:	4343      	muls	r3, r0
 8004fec:	002e      	movs	r6, r5
 8004fee:	2101      	movs	r1, #1
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	e7a6      	b.n	8004f42 <_vfiprintf_r+0xfe>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	425b      	negs	r3, r3
 8004ff8:	e7d0      	b.n	8004f9c <_vfiprintf_r+0x158>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	200a      	movs	r0, #10
 8004ffe:	001a      	movs	r2, r3
 8005000:	3601      	adds	r6, #1
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	7831      	ldrb	r1, [r6, #0]
 8005006:	1c75      	adds	r5, r6, #1
 8005008:	3930      	subs	r1, #48	; 0x30
 800500a:	2909      	cmp	r1, #9
 800500c:	d903      	bls.n	8005016 <_vfiprintf_r+0x1d2>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0c5      	beq.n	8004f9e <_vfiprintf_r+0x15a>
 8005012:	9209      	str	r2, [sp, #36]	; 0x24
 8005014:	e7c3      	b.n	8004f9e <_vfiprintf_r+0x15a>
 8005016:	4342      	muls	r2, r0
 8005018:	002e      	movs	r6, r5
 800501a:	2301      	movs	r3, #1
 800501c:	1852      	adds	r2, r2, r1
 800501e:	e7f1      	b.n	8005004 <_vfiprintf_r+0x1c0>
 8005020:	aa07      	add	r2, sp, #28
 8005022:	9200      	str	r2, [sp, #0]
 8005024:	0021      	movs	r1, r4
 8005026:	003a      	movs	r2, r7
 8005028:	4b13      	ldr	r3, [pc, #76]	; (8005078 <_vfiprintf_r+0x234>)
 800502a:	9803      	ldr	r0, [sp, #12]
 800502c:	e000      	b.n	8005030 <_vfiprintf_r+0x1ec>
 800502e:	bf00      	nop
 8005030:	9004      	str	r0, [sp, #16]
 8005032:	9b04      	ldr	r3, [sp, #16]
 8005034:	3301      	adds	r3, #1
 8005036:	d1d3      	bne.n	8004fe0 <_vfiprintf_r+0x19c>
 8005038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503a:	07db      	lsls	r3, r3, #31
 800503c:	d405      	bmi.n	800504a <_vfiprintf_r+0x206>
 800503e:	89bb      	ldrh	r3, [r7, #12]
 8005040:	059b      	lsls	r3, r3, #22
 8005042:	d402      	bmi.n	800504a <_vfiprintf_r+0x206>
 8005044:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005046:	f7ff fdc5 	bl	8004bd4 <__retarget_lock_release_recursive>
 800504a:	89bb      	ldrh	r3, [r7, #12]
 800504c:	065b      	lsls	r3, r3, #25
 800504e:	d500      	bpl.n	8005052 <_vfiprintf_r+0x20e>
 8005050:	e71d      	b.n	8004e8e <_vfiprintf_r+0x4a>
 8005052:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005054:	e71d      	b.n	8004e92 <_vfiprintf_r+0x4e>
 8005056:	aa07      	add	r2, sp, #28
 8005058:	9200      	str	r2, [sp, #0]
 800505a:	0021      	movs	r1, r4
 800505c:	003a      	movs	r2, r7
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <_vfiprintf_r+0x234>)
 8005060:	9803      	ldr	r0, [sp, #12]
 8005062:	f000 f87b 	bl	800515c <_printf_i>
 8005066:	e7e3      	b.n	8005030 <_vfiprintf_r+0x1ec>
 8005068:	08005bd4 	.word	0x08005bd4
 800506c:	08005bda 	.word	0x08005bda
 8005070:	08005bde 	.word	0x08005bde
 8005074:	00000000 	.word	0x00000000
 8005078:	08004e1f 	.word	0x08004e1f

0800507c <_printf_common>:
 800507c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507e:	0016      	movs	r6, r2
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	688a      	ldr	r2, [r1, #8]
 8005084:	690b      	ldr	r3, [r1, #16]
 8005086:	000c      	movs	r4, r1
 8005088:	9000      	str	r0, [sp, #0]
 800508a:	4293      	cmp	r3, r2
 800508c:	da00      	bge.n	8005090 <_printf_common+0x14>
 800508e:	0013      	movs	r3, r2
 8005090:	0022      	movs	r2, r4
 8005092:	6033      	str	r3, [r6, #0]
 8005094:	3243      	adds	r2, #67	; 0x43
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	2a00      	cmp	r2, #0
 800509a:	d001      	beq.n	80050a0 <_printf_common+0x24>
 800509c:	3301      	adds	r3, #1
 800509e:	6033      	str	r3, [r6, #0]
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	069b      	lsls	r3, r3, #26
 80050a4:	d502      	bpl.n	80050ac <_printf_common+0x30>
 80050a6:	6833      	ldr	r3, [r6, #0]
 80050a8:	3302      	adds	r3, #2
 80050aa:	6033      	str	r3, [r6, #0]
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	2306      	movs	r3, #6
 80050b0:	0015      	movs	r5, r2
 80050b2:	401d      	ands	r5, r3
 80050b4:	421a      	tst	r2, r3
 80050b6:	d027      	beq.n	8005108 <_printf_common+0x8c>
 80050b8:	0023      	movs	r3, r4
 80050ba:	3343      	adds	r3, #67	; 0x43
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	4193      	sbcs	r3, r2
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	0692      	lsls	r2, r2, #26
 80050c6:	d430      	bmi.n	800512a <_printf_common+0xae>
 80050c8:	0022      	movs	r2, r4
 80050ca:	9901      	ldr	r1, [sp, #4]
 80050cc:	9800      	ldr	r0, [sp, #0]
 80050ce:	9d08      	ldr	r5, [sp, #32]
 80050d0:	3243      	adds	r2, #67	; 0x43
 80050d2:	47a8      	blx	r5
 80050d4:	3001      	adds	r0, #1
 80050d6:	d025      	beq.n	8005124 <_printf_common+0xa8>
 80050d8:	2206      	movs	r2, #6
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	2500      	movs	r5, #0
 80050de:	4013      	ands	r3, r2
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d105      	bne.n	80050f0 <_printf_common+0x74>
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	68e5      	ldr	r5, [r4, #12]
 80050e8:	1aed      	subs	r5, r5, r3
 80050ea:	43eb      	mvns	r3, r5
 80050ec:	17db      	asrs	r3, r3, #31
 80050ee:	401d      	ands	r5, r3
 80050f0:	68a3      	ldr	r3, [r4, #8]
 80050f2:	6922      	ldr	r2, [r4, #16]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	dd01      	ble.n	80050fc <_printf_common+0x80>
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	18ed      	adds	r5, r5, r3
 80050fc:	2600      	movs	r6, #0
 80050fe:	42b5      	cmp	r5, r6
 8005100:	d120      	bne.n	8005144 <_printf_common+0xc8>
 8005102:	2000      	movs	r0, #0
 8005104:	e010      	b.n	8005128 <_printf_common+0xac>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	6832      	ldr	r2, [r6, #0]
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	42ab      	cmp	r3, r5
 8005110:	ddd2      	ble.n	80050b8 <_printf_common+0x3c>
 8005112:	0022      	movs	r2, r4
 8005114:	2301      	movs	r3, #1
 8005116:	9901      	ldr	r1, [sp, #4]
 8005118:	9800      	ldr	r0, [sp, #0]
 800511a:	9f08      	ldr	r7, [sp, #32]
 800511c:	3219      	adds	r2, #25
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	d1f0      	bne.n	8005106 <_printf_common+0x8a>
 8005124:	2001      	movs	r0, #1
 8005126:	4240      	negs	r0, r0
 8005128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800512a:	2030      	movs	r0, #48	; 0x30
 800512c:	18e1      	adds	r1, r4, r3
 800512e:	3143      	adds	r1, #67	; 0x43
 8005130:	7008      	strb	r0, [r1, #0]
 8005132:	0021      	movs	r1, r4
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	3145      	adds	r1, #69	; 0x45
 8005138:	7809      	ldrb	r1, [r1, #0]
 800513a:	18a2      	adds	r2, r4, r2
 800513c:	3243      	adds	r2, #67	; 0x43
 800513e:	3302      	adds	r3, #2
 8005140:	7011      	strb	r1, [r2, #0]
 8005142:	e7c1      	b.n	80050c8 <_printf_common+0x4c>
 8005144:	0022      	movs	r2, r4
 8005146:	2301      	movs	r3, #1
 8005148:	9901      	ldr	r1, [sp, #4]
 800514a:	9800      	ldr	r0, [sp, #0]
 800514c:	9f08      	ldr	r7, [sp, #32]
 800514e:	321a      	adds	r2, #26
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	d0e6      	beq.n	8005124 <_printf_common+0xa8>
 8005156:	3601      	adds	r6, #1
 8005158:	e7d1      	b.n	80050fe <_printf_common+0x82>
	...

0800515c <_printf_i>:
 800515c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515e:	b08b      	sub	sp, #44	; 0x2c
 8005160:	9206      	str	r2, [sp, #24]
 8005162:	000a      	movs	r2, r1
 8005164:	3243      	adds	r2, #67	; 0x43
 8005166:	9307      	str	r3, [sp, #28]
 8005168:	9005      	str	r0, [sp, #20]
 800516a:	9204      	str	r2, [sp, #16]
 800516c:	7e0a      	ldrb	r2, [r1, #24]
 800516e:	000c      	movs	r4, r1
 8005170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005172:	2a78      	cmp	r2, #120	; 0x78
 8005174:	d809      	bhi.n	800518a <_printf_i+0x2e>
 8005176:	2a62      	cmp	r2, #98	; 0x62
 8005178:	d80b      	bhi.n	8005192 <_printf_i+0x36>
 800517a:	2a00      	cmp	r2, #0
 800517c:	d100      	bne.n	8005180 <_printf_i+0x24>
 800517e:	e0be      	b.n	80052fe <_printf_i+0x1a2>
 8005180:	497c      	ldr	r1, [pc, #496]	; (8005374 <_printf_i+0x218>)
 8005182:	9103      	str	r1, [sp, #12]
 8005184:	2a58      	cmp	r2, #88	; 0x58
 8005186:	d100      	bne.n	800518a <_printf_i+0x2e>
 8005188:	e093      	b.n	80052b2 <_printf_i+0x156>
 800518a:	0026      	movs	r6, r4
 800518c:	3642      	adds	r6, #66	; 0x42
 800518e:	7032      	strb	r2, [r6, #0]
 8005190:	e022      	b.n	80051d8 <_printf_i+0x7c>
 8005192:	0010      	movs	r0, r2
 8005194:	3863      	subs	r0, #99	; 0x63
 8005196:	2815      	cmp	r0, #21
 8005198:	d8f7      	bhi.n	800518a <_printf_i+0x2e>
 800519a:	f7fa ffb5 	bl	8000108 <__gnu_thumb1_case_shi>
 800519e:	0016      	.short	0x0016
 80051a0:	fff6001f 	.word	0xfff6001f
 80051a4:	fff6fff6 	.word	0xfff6fff6
 80051a8:	001ffff6 	.word	0x001ffff6
 80051ac:	fff6fff6 	.word	0xfff6fff6
 80051b0:	fff6fff6 	.word	0xfff6fff6
 80051b4:	003600a3 	.word	0x003600a3
 80051b8:	fff60083 	.word	0xfff60083
 80051bc:	00b4fff6 	.word	0x00b4fff6
 80051c0:	0036fff6 	.word	0x0036fff6
 80051c4:	fff6fff6 	.word	0xfff6fff6
 80051c8:	0087      	.short	0x0087
 80051ca:	0026      	movs	r6, r4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	3642      	adds	r6, #66	; 0x42
 80051d0:	1d11      	adds	r1, r2, #4
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	6813      	ldr	r3, [r2, #0]
 80051d6:	7033      	strb	r3, [r6, #0]
 80051d8:	2301      	movs	r3, #1
 80051da:	e0a2      	b.n	8005322 <_printf_i+0x1c6>
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	6809      	ldr	r1, [r1, #0]
 80051e0:	1d02      	adds	r2, r0, #4
 80051e2:	060d      	lsls	r5, r1, #24
 80051e4:	d50b      	bpl.n	80051fe <_printf_i+0xa2>
 80051e6:	6805      	ldr	r5, [r0, #0]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	da03      	bge.n	80051f6 <_printf_i+0x9a>
 80051ee:	232d      	movs	r3, #45	; 0x2d
 80051f0:	9a04      	ldr	r2, [sp, #16]
 80051f2:	426d      	negs	r5, r5
 80051f4:	7013      	strb	r3, [r2, #0]
 80051f6:	4b5f      	ldr	r3, [pc, #380]	; (8005374 <_printf_i+0x218>)
 80051f8:	270a      	movs	r7, #10
 80051fa:	9303      	str	r3, [sp, #12]
 80051fc:	e01b      	b.n	8005236 <_printf_i+0xda>
 80051fe:	6805      	ldr	r5, [r0, #0]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	0649      	lsls	r1, r1, #25
 8005204:	d5f1      	bpl.n	80051ea <_printf_i+0x8e>
 8005206:	b22d      	sxth	r5, r5
 8005208:	e7ef      	b.n	80051ea <_printf_i+0x8e>
 800520a:	680d      	ldr	r5, [r1, #0]
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	1d08      	adds	r0, r1, #4
 8005210:	6018      	str	r0, [r3, #0]
 8005212:	062e      	lsls	r6, r5, #24
 8005214:	d501      	bpl.n	800521a <_printf_i+0xbe>
 8005216:	680d      	ldr	r5, [r1, #0]
 8005218:	e003      	b.n	8005222 <_printf_i+0xc6>
 800521a:	066d      	lsls	r5, r5, #25
 800521c:	d5fb      	bpl.n	8005216 <_printf_i+0xba>
 800521e:	680d      	ldr	r5, [r1, #0]
 8005220:	b2ad      	uxth	r5, r5
 8005222:	4b54      	ldr	r3, [pc, #336]	; (8005374 <_printf_i+0x218>)
 8005224:	2708      	movs	r7, #8
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	2a6f      	cmp	r2, #111	; 0x6f
 800522a:	d000      	beq.n	800522e <_printf_i+0xd2>
 800522c:	3702      	adds	r7, #2
 800522e:	0023      	movs	r3, r4
 8005230:	2200      	movs	r2, #0
 8005232:	3343      	adds	r3, #67	; 0x43
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	60a3      	str	r3, [r4, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db03      	blt.n	8005246 <_printf_i+0xea>
 800523e:	2104      	movs	r1, #4
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	438a      	bics	r2, r1
 8005244:	6022      	str	r2, [r4, #0]
 8005246:	2d00      	cmp	r5, #0
 8005248:	d102      	bne.n	8005250 <_printf_i+0xf4>
 800524a:	9e04      	ldr	r6, [sp, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <_printf_i+0x10e>
 8005250:	9e04      	ldr	r6, [sp, #16]
 8005252:	0028      	movs	r0, r5
 8005254:	0039      	movs	r1, r7
 8005256:	f7fa ffe7 	bl	8000228 <__aeabi_uidivmod>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	3e01      	subs	r6, #1
 800525e:	5c5b      	ldrb	r3, [r3, r1]
 8005260:	7033      	strb	r3, [r6, #0]
 8005262:	002b      	movs	r3, r5
 8005264:	0005      	movs	r5, r0
 8005266:	429f      	cmp	r7, r3
 8005268:	d9f3      	bls.n	8005252 <_printf_i+0xf6>
 800526a:	2f08      	cmp	r7, #8
 800526c:	d109      	bne.n	8005282 <_printf_i+0x126>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	07db      	lsls	r3, r3, #31
 8005272:	d506      	bpl.n	8005282 <_printf_i+0x126>
 8005274:	6862      	ldr	r2, [r4, #4]
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	429a      	cmp	r2, r3
 800527a:	dc02      	bgt.n	8005282 <_printf_i+0x126>
 800527c:	2330      	movs	r3, #48	; 0x30
 800527e:	3e01      	subs	r6, #1
 8005280:	7033      	strb	r3, [r6, #0]
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	1b9b      	subs	r3, r3, r6
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	9b07      	ldr	r3, [sp, #28]
 800528a:	0021      	movs	r1, r4
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	9805      	ldr	r0, [sp, #20]
 8005290:	9b06      	ldr	r3, [sp, #24]
 8005292:	aa09      	add	r2, sp, #36	; 0x24
 8005294:	f7ff fef2 	bl	800507c <_printf_common>
 8005298:	3001      	adds	r0, #1
 800529a:	d147      	bne.n	800532c <_printf_i+0x1d0>
 800529c:	2001      	movs	r0, #1
 800529e:	4240      	negs	r0, r0
 80052a0:	b00b      	add	sp, #44	; 0x2c
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a4:	2220      	movs	r2, #32
 80052a6:	6809      	ldr	r1, [r1, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	6022      	str	r2, [r4, #0]
 80052ac:	2278      	movs	r2, #120	; 0x78
 80052ae:	4932      	ldr	r1, [pc, #200]	; (8005378 <_printf_i+0x21c>)
 80052b0:	9103      	str	r1, [sp, #12]
 80052b2:	0021      	movs	r1, r4
 80052b4:	3145      	adds	r1, #69	; 0x45
 80052b6:	700a      	strb	r2, [r1, #0]
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	c920      	ldmia	r1!, {r5}
 80052be:	0610      	lsls	r0, r2, #24
 80052c0:	d402      	bmi.n	80052c8 <_printf_i+0x16c>
 80052c2:	0650      	lsls	r0, r2, #25
 80052c4:	d500      	bpl.n	80052c8 <_printf_i+0x16c>
 80052c6:	b2ad      	uxth	r5, r5
 80052c8:	6019      	str	r1, [r3, #0]
 80052ca:	07d3      	lsls	r3, r2, #31
 80052cc:	d502      	bpl.n	80052d4 <_printf_i+0x178>
 80052ce:	2320      	movs	r3, #32
 80052d0:	4313      	orrs	r3, r2
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	2710      	movs	r7, #16
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	d1a9      	bne.n	800522e <_printf_i+0xd2>
 80052da:	2220      	movs	r2, #32
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	4393      	bics	r3, r2
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	e7a4      	b.n	800522e <_printf_i+0xd2>
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	680d      	ldr	r5, [r1, #0]
 80052e8:	1d10      	adds	r0, r2, #4
 80052ea:	6949      	ldr	r1, [r1, #20]
 80052ec:	6018      	str	r0, [r3, #0]
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	062e      	lsls	r6, r5, #24
 80052f2:	d501      	bpl.n	80052f8 <_printf_i+0x19c>
 80052f4:	6019      	str	r1, [r3, #0]
 80052f6:	e002      	b.n	80052fe <_printf_i+0x1a2>
 80052f8:	066d      	lsls	r5, r5, #25
 80052fa:	d5fb      	bpl.n	80052f4 <_printf_i+0x198>
 80052fc:	8019      	strh	r1, [r3, #0]
 80052fe:	2300      	movs	r3, #0
 8005300:	9e04      	ldr	r6, [sp, #16]
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	e7c0      	b.n	8005288 <_printf_i+0x12c>
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	1d11      	adds	r1, r2, #4
 800530a:	6019      	str	r1, [r3, #0]
 800530c:	6816      	ldr	r6, [r2, #0]
 800530e:	2100      	movs	r1, #0
 8005310:	0030      	movs	r0, r6
 8005312:	6862      	ldr	r2, [r4, #4]
 8005314:	f000 f9ea 	bl	80056ec <memchr>
 8005318:	2800      	cmp	r0, #0
 800531a:	d001      	beq.n	8005320 <_printf_i+0x1c4>
 800531c:	1b80      	subs	r0, r0, r6
 800531e:	6060      	str	r0, [r4, #4]
 8005320:	6863      	ldr	r3, [r4, #4]
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	2300      	movs	r3, #0
 8005326:	9a04      	ldr	r2, [sp, #16]
 8005328:	7013      	strb	r3, [r2, #0]
 800532a:	e7ad      	b.n	8005288 <_printf_i+0x12c>
 800532c:	0032      	movs	r2, r6
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	9906      	ldr	r1, [sp, #24]
 8005332:	9805      	ldr	r0, [sp, #20]
 8005334:	9d07      	ldr	r5, [sp, #28]
 8005336:	47a8      	blx	r5
 8005338:	3001      	adds	r0, #1
 800533a:	d0af      	beq.n	800529c <_printf_i+0x140>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	079b      	lsls	r3, r3, #30
 8005340:	d415      	bmi.n	800536e <_printf_i+0x212>
 8005342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005344:	68e0      	ldr	r0, [r4, #12]
 8005346:	4298      	cmp	r0, r3
 8005348:	daaa      	bge.n	80052a0 <_printf_i+0x144>
 800534a:	0018      	movs	r0, r3
 800534c:	e7a8      	b.n	80052a0 <_printf_i+0x144>
 800534e:	0022      	movs	r2, r4
 8005350:	2301      	movs	r3, #1
 8005352:	9906      	ldr	r1, [sp, #24]
 8005354:	9805      	ldr	r0, [sp, #20]
 8005356:	9e07      	ldr	r6, [sp, #28]
 8005358:	3219      	adds	r2, #25
 800535a:	47b0      	blx	r6
 800535c:	3001      	adds	r0, #1
 800535e:	d09d      	beq.n	800529c <_printf_i+0x140>
 8005360:	3501      	adds	r5, #1
 8005362:	68e3      	ldr	r3, [r4, #12]
 8005364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	42ab      	cmp	r3, r5
 800536a:	dcf0      	bgt.n	800534e <_printf_i+0x1f2>
 800536c:	e7e9      	b.n	8005342 <_printf_i+0x1e6>
 800536e:	2500      	movs	r5, #0
 8005370:	e7f7      	b.n	8005362 <_printf_i+0x206>
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	08005be5 	.word	0x08005be5
 8005378:	08005bf6 	.word	0x08005bf6

0800537c <__sflush_r>:
 800537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800537e:	898b      	ldrh	r3, [r1, #12]
 8005380:	0005      	movs	r5, r0
 8005382:	000c      	movs	r4, r1
 8005384:	071a      	lsls	r2, r3, #28
 8005386:	d45c      	bmi.n	8005442 <__sflush_r+0xc6>
 8005388:	684a      	ldr	r2, [r1, #4]
 800538a:	2a00      	cmp	r2, #0
 800538c:	dc04      	bgt.n	8005398 <__sflush_r+0x1c>
 800538e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005390:	2a00      	cmp	r2, #0
 8005392:	dc01      	bgt.n	8005398 <__sflush_r+0x1c>
 8005394:	2000      	movs	r0, #0
 8005396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005398:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800539a:	2f00      	cmp	r7, #0
 800539c:	d0fa      	beq.n	8005394 <__sflush_r+0x18>
 800539e:	2200      	movs	r2, #0
 80053a0:	2080      	movs	r0, #128	; 0x80
 80053a2:	682e      	ldr	r6, [r5, #0]
 80053a4:	602a      	str	r2, [r5, #0]
 80053a6:	001a      	movs	r2, r3
 80053a8:	0140      	lsls	r0, r0, #5
 80053aa:	6a21      	ldr	r1, [r4, #32]
 80053ac:	4002      	ands	r2, r0
 80053ae:	4203      	tst	r3, r0
 80053b0:	d034      	beq.n	800541c <__sflush_r+0xa0>
 80053b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	075b      	lsls	r3, r3, #29
 80053b8:	d506      	bpl.n	80053c8 <__sflush_r+0x4c>
 80053ba:	6863      	ldr	r3, [r4, #4]
 80053bc:	1ac0      	subs	r0, r0, r3
 80053be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <__sflush_r+0x4c>
 80053c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c6:	1ac0      	subs	r0, r0, r3
 80053c8:	0002      	movs	r2, r0
 80053ca:	2300      	movs	r3, #0
 80053cc:	0028      	movs	r0, r5
 80053ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80053d0:	6a21      	ldr	r1, [r4, #32]
 80053d2:	47b8      	blx	r7
 80053d4:	89a2      	ldrh	r2, [r4, #12]
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	d106      	bne.n	80053e8 <__sflush_r+0x6c>
 80053da:	6829      	ldr	r1, [r5, #0]
 80053dc:	291d      	cmp	r1, #29
 80053de:	d82c      	bhi.n	800543a <__sflush_r+0xbe>
 80053e0:	4b2a      	ldr	r3, [pc, #168]	; (800548c <__sflush_r+0x110>)
 80053e2:	410b      	asrs	r3, r1
 80053e4:	07db      	lsls	r3, r3, #31
 80053e6:	d428      	bmi.n	800543a <__sflush_r+0xbe>
 80053e8:	2300      	movs	r3, #0
 80053ea:	6063      	str	r3, [r4, #4]
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	04d2      	lsls	r2, r2, #19
 80053f2:	d505      	bpl.n	8005400 <__sflush_r+0x84>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <__sflush_r+0x82>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d100      	bne.n	8005400 <__sflush_r+0x84>
 80053fe:	6560      	str	r0, [r4, #84]	; 0x54
 8005400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005402:	602e      	str	r6, [r5, #0]
 8005404:	2900      	cmp	r1, #0
 8005406:	d0c5      	beq.n	8005394 <__sflush_r+0x18>
 8005408:	0023      	movs	r3, r4
 800540a:	3344      	adds	r3, #68	; 0x44
 800540c:	4299      	cmp	r1, r3
 800540e:	d002      	beq.n	8005416 <__sflush_r+0x9a>
 8005410:	0028      	movs	r0, r5
 8005412:	f7ff fbf1 	bl	8004bf8 <_free_r>
 8005416:	2000      	movs	r0, #0
 8005418:	6360      	str	r0, [r4, #52]	; 0x34
 800541a:	e7bc      	b.n	8005396 <__sflush_r+0x1a>
 800541c:	2301      	movs	r3, #1
 800541e:	0028      	movs	r0, r5
 8005420:	47b8      	blx	r7
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	d1c6      	bne.n	80053b4 <__sflush_r+0x38>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0c3      	beq.n	80053b4 <__sflush_r+0x38>
 800542c:	2b1d      	cmp	r3, #29
 800542e:	d001      	beq.n	8005434 <__sflush_r+0xb8>
 8005430:	2b16      	cmp	r3, #22
 8005432:	d101      	bne.n	8005438 <__sflush_r+0xbc>
 8005434:	602e      	str	r6, [r5, #0]
 8005436:	e7ad      	b.n	8005394 <__sflush_r+0x18>
 8005438:	89a2      	ldrh	r2, [r4, #12]
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	4313      	orrs	r3, r2
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	e7a9      	b.n	8005396 <__sflush_r+0x1a>
 8005442:	690e      	ldr	r6, [r1, #16]
 8005444:	2e00      	cmp	r6, #0
 8005446:	d0a5      	beq.n	8005394 <__sflush_r+0x18>
 8005448:	680f      	ldr	r7, [r1, #0]
 800544a:	600e      	str	r6, [r1, #0]
 800544c:	1bba      	subs	r2, r7, r6
 800544e:	9201      	str	r2, [sp, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	079b      	lsls	r3, r3, #30
 8005454:	d100      	bne.n	8005458 <__sflush_r+0xdc>
 8005456:	694a      	ldr	r2, [r1, #20]
 8005458:	60a2      	str	r2, [r4, #8]
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd99      	ble.n	8005394 <__sflush_r+0x18>
 8005460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005462:	0032      	movs	r2, r6
 8005464:	001f      	movs	r7, r3
 8005466:	0028      	movs	r0, r5
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	6a21      	ldr	r1, [r4, #32]
 800546c:	47b8      	blx	r7
 800546e:	2800      	cmp	r0, #0
 8005470:	dc06      	bgt.n	8005480 <__sflush_r+0x104>
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	2001      	movs	r0, #1
 8005476:	89a2      	ldrh	r2, [r4, #12]
 8005478:	4240      	negs	r0, r0
 800547a:	4313      	orrs	r3, r2
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	e78a      	b.n	8005396 <__sflush_r+0x1a>
 8005480:	9b01      	ldr	r3, [sp, #4]
 8005482:	1836      	adds	r6, r6, r0
 8005484:	1a1b      	subs	r3, r3, r0
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	e7e7      	b.n	800545a <__sflush_r+0xde>
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	dfbffffe 	.word	0xdfbffffe

08005490 <_fflush_r>:
 8005490:	690b      	ldr	r3, [r1, #16]
 8005492:	b570      	push	{r4, r5, r6, lr}
 8005494:	0005      	movs	r5, r0
 8005496:	000c      	movs	r4, r1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <_fflush_r+0x12>
 800549c:	2500      	movs	r5, #0
 800549e:	0028      	movs	r0, r5
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d004      	beq.n	80054b0 <_fflush_r+0x20>
 80054a6:	6a03      	ldr	r3, [r0, #32]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <_fflush_r+0x20>
 80054ac:	f7ff fa80 	bl	80049b0 <__sinit>
 80054b0:	220c      	movs	r2, #12
 80054b2:	5ea3      	ldrsh	r3, [r4, r2]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f1      	beq.n	800549c <_fflush_r+0xc>
 80054b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054ba:	07d2      	lsls	r2, r2, #31
 80054bc:	d404      	bmi.n	80054c8 <_fflush_r+0x38>
 80054be:	059b      	lsls	r3, r3, #22
 80054c0:	d402      	bmi.n	80054c8 <_fflush_r+0x38>
 80054c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c4:	f7ff fb85 	bl	8004bd2 <__retarget_lock_acquire_recursive>
 80054c8:	0028      	movs	r0, r5
 80054ca:	0021      	movs	r1, r4
 80054cc:	f7ff ff56 	bl	800537c <__sflush_r>
 80054d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054d2:	0005      	movs	r5, r0
 80054d4:	07db      	lsls	r3, r3, #31
 80054d6:	d4e2      	bmi.n	800549e <_fflush_r+0xe>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	059b      	lsls	r3, r3, #22
 80054dc:	d4df      	bmi.n	800549e <_fflush_r+0xe>
 80054de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e0:	f7ff fb78 	bl	8004bd4 <__retarget_lock_release_recursive>
 80054e4:	e7db      	b.n	800549e <_fflush_r+0xe>

080054e6 <__swbuf_r>:
 80054e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e8:	0006      	movs	r6, r0
 80054ea:	000d      	movs	r5, r1
 80054ec:	0014      	movs	r4, r2
 80054ee:	2800      	cmp	r0, #0
 80054f0:	d004      	beq.n	80054fc <__swbuf_r+0x16>
 80054f2:	6a03      	ldr	r3, [r0, #32]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <__swbuf_r+0x16>
 80054f8:	f7ff fa5a 	bl	80049b0 <__sinit>
 80054fc:	69a3      	ldr	r3, [r4, #24]
 80054fe:	60a3      	str	r3, [r4, #8]
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	071b      	lsls	r3, r3, #28
 8005504:	d528      	bpl.n	8005558 <__swbuf_r+0x72>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d025      	beq.n	8005558 <__swbuf_r+0x72>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	6820      	ldr	r0, [r4, #0]
 8005510:	b2ef      	uxtb	r7, r5
 8005512:	1ac0      	subs	r0, r0, r3
 8005514:	6963      	ldr	r3, [r4, #20]
 8005516:	b2ed      	uxtb	r5, r5
 8005518:	4283      	cmp	r3, r0
 800551a:	dc05      	bgt.n	8005528 <__swbuf_r+0x42>
 800551c:	0021      	movs	r1, r4
 800551e:	0030      	movs	r0, r6
 8005520:	f7ff ffb6 	bl	8005490 <_fflush_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	d11d      	bne.n	8005564 <__swbuf_r+0x7e>
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	3001      	adds	r0, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	60a3      	str	r3, [r4, #8]
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	701f      	strb	r7, [r3, #0]
 8005538:	6963      	ldr	r3, [r4, #20]
 800553a:	4283      	cmp	r3, r0
 800553c:	d004      	beq.n	8005548 <__swbuf_r+0x62>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	07db      	lsls	r3, r3, #31
 8005542:	d507      	bpl.n	8005554 <__swbuf_r+0x6e>
 8005544:	2d0a      	cmp	r5, #10
 8005546:	d105      	bne.n	8005554 <__swbuf_r+0x6e>
 8005548:	0021      	movs	r1, r4
 800554a:	0030      	movs	r0, r6
 800554c:	f7ff ffa0 	bl	8005490 <_fflush_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	d107      	bne.n	8005564 <__swbuf_r+0x7e>
 8005554:	0028      	movs	r0, r5
 8005556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005558:	0021      	movs	r1, r4
 800555a:	0030      	movs	r0, r6
 800555c:	f000 f806 	bl	800556c <__swsetup_r>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0d3      	beq.n	800550c <__swbuf_r+0x26>
 8005564:	2501      	movs	r5, #1
 8005566:	426d      	negs	r5, r5
 8005568:	e7f4      	b.n	8005554 <__swbuf_r+0x6e>
	...

0800556c <__swsetup_r>:
 800556c:	4b30      	ldr	r3, [pc, #192]	; (8005630 <__swsetup_r+0xc4>)
 800556e:	b570      	push	{r4, r5, r6, lr}
 8005570:	0005      	movs	r5, r0
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	000c      	movs	r4, r1
 8005576:	2800      	cmp	r0, #0
 8005578:	d004      	beq.n	8005584 <__swsetup_r+0x18>
 800557a:	6a03      	ldr	r3, [r0, #32]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <__swsetup_r+0x18>
 8005580:	f7ff fa16 	bl	80049b0 <__sinit>
 8005584:	230c      	movs	r3, #12
 8005586:	5ee2      	ldrsh	r2, [r4, r3]
 8005588:	b293      	uxth	r3, r2
 800558a:	0711      	lsls	r1, r2, #28
 800558c:	d423      	bmi.n	80055d6 <__swsetup_r+0x6a>
 800558e:	06d9      	lsls	r1, r3, #27
 8005590:	d407      	bmi.n	80055a2 <__swsetup_r+0x36>
 8005592:	2309      	movs	r3, #9
 8005594:	2001      	movs	r0, #1
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	3337      	adds	r3, #55	; 0x37
 800559a:	4313      	orrs	r3, r2
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	4240      	negs	r0, r0
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	075b      	lsls	r3, r3, #29
 80055a4:	d513      	bpl.n	80055ce <__swsetup_r+0x62>
 80055a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d008      	beq.n	80055be <__swsetup_r+0x52>
 80055ac:	0023      	movs	r3, r4
 80055ae:	3344      	adds	r3, #68	; 0x44
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <__swsetup_r+0x4e>
 80055b4:	0028      	movs	r0, r5
 80055b6:	f7ff fb1f 	bl	8004bf8 <_free_r>
 80055ba:	2300      	movs	r3, #0
 80055bc:	6363      	str	r3, [r4, #52]	; 0x34
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	4393      	bics	r3, r2
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	2308      	movs	r3, #8
 80055d0:	89a2      	ldrh	r2, [r4, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <__swsetup_r+0x88>
 80055dc:	21a0      	movs	r1, #160	; 0xa0
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	0089      	lsls	r1, r1, #2
 80055e4:	0092      	lsls	r2, r2, #2
 80055e6:	400b      	ands	r3, r1
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <__swsetup_r+0x88>
 80055ec:	0021      	movs	r1, r4
 80055ee:	0028      	movs	r0, r5
 80055f0:	f000 f8b0 	bl	8005754 <__smakebuf_r>
 80055f4:	220c      	movs	r2, #12
 80055f6:	5ea3      	ldrsh	r3, [r4, r2]
 80055f8:	2001      	movs	r0, #1
 80055fa:	001a      	movs	r2, r3
 80055fc:	b299      	uxth	r1, r3
 80055fe:	4002      	ands	r2, r0
 8005600:	4203      	tst	r3, r0
 8005602:	d00f      	beq.n	8005624 <__swsetup_r+0xb8>
 8005604:	2200      	movs	r2, #0
 8005606:	60a2      	str	r2, [r4, #8]
 8005608:	6962      	ldr	r2, [r4, #20]
 800560a:	4252      	negs	r2, r2
 800560c:	61a2      	str	r2, [r4, #24]
 800560e:	2000      	movs	r0, #0
 8005610:	6922      	ldr	r2, [r4, #16]
 8005612:	4282      	cmp	r2, r0
 8005614:	d1c4      	bne.n	80055a0 <__swsetup_r+0x34>
 8005616:	0609      	lsls	r1, r1, #24
 8005618:	d5c2      	bpl.n	80055a0 <__swsetup_r+0x34>
 800561a:	2240      	movs	r2, #64	; 0x40
 800561c:	4313      	orrs	r3, r2
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	3801      	subs	r0, #1
 8005622:	e7bd      	b.n	80055a0 <__swsetup_r+0x34>
 8005624:	0788      	lsls	r0, r1, #30
 8005626:	d400      	bmi.n	800562a <__swsetup_r+0xbe>
 8005628:	6962      	ldr	r2, [r4, #20]
 800562a:	60a2      	str	r2, [r4, #8]
 800562c:	e7ef      	b.n	800560e <__swsetup_r+0xa2>
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	200000e8 	.word	0x200000e8

08005634 <_raise_r>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	0004      	movs	r4, r0
 8005638:	000d      	movs	r5, r1
 800563a:	291f      	cmp	r1, #31
 800563c:	d904      	bls.n	8005648 <_raise_r+0x14>
 800563e:	2316      	movs	r3, #22
 8005640:	6003      	str	r3, [r0, #0]
 8005642:	2001      	movs	r0, #1
 8005644:	4240      	negs	r0, r0
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <_raise_r+0x24>
 800564e:	008a      	lsls	r2, r1, #2
 8005650:	189b      	adds	r3, r3, r2
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2a00      	cmp	r2, #0
 8005656:	d108      	bne.n	800566a <_raise_r+0x36>
 8005658:	0020      	movs	r0, r4
 800565a:	f000 f831 	bl	80056c0 <_getpid_r>
 800565e:	002a      	movs	r2, r5
 8005660:	0001      	movs	r1, r0
 8005662:	0020      	movs	r0, r4
 8005664:	f000 f81a 	bl	800569c <_kill_r>
 8005668:	e7ed      	b.n	8005646 <_raise_r+0x12>
 800566a:	2000      	movs	r0, #0
 800566c:	2a01      	cmp	r2, #1
 800566e:	d0ea      	beq.n	8005646 <_raise_r+0x12>
 8005670:	1c51      	adds	r1, r2, #1
 8005672:	d103      	bne.n	800567c <_raise_r+0x48>
 8005674:	2316      	movs	r3, #22
 8005676:	3001      	adds	r0, #1
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	e7e4      	b.n	8005646 <_raise_r+0x12>
 800567c:	2400      	movs	r4, #0
 800567e:	0028      	movs	r0, r5
 8005680:	601c      	str	r4, [r3, #0]
 8005682:	4790      	blx	r2
 8005684:	0020      	movs	r0, r4
 8005686:	e7de      	b.n	8005646 <_raise_r+0x12>

08005688 <raise>:
 8005688:	b510      	push	{r4, lr}
 800568a:	4b03      	ldr	r3, [pc, #12]	; (8005698 <raise+0x10>)
 800568c:	0001      	movs	r1, r0
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	f7ff ffd0 	bl	8005634 <_raise_r>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	200000e8 	.word	0x200000e8

0800569c <_kill_r>:
 800569c:	2300      	movs	r3, #0
 800569e:	b570      	push	{r4, r5, r6, lr}
 80056a0:	4d06      	ldr	r5, [pc, #24]	; (80056bc <_kill_r+0x20>)
 80056a2:	0004      	movs	r4, r0
 80056a4:	0008      	movs	r0, r1
 80056a6:	0011      	movs	r1, r2
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	f7fb f88b 	bl	80007c4 <_kill>
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	d103      	bne.n	80056ba <_kill_r+0x1e>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d000      	beq.n	80056ba <_kill_r+0x1e>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	2000053c 	.word	0x2000053c

080056c0 <_getpid_r>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	f7fb f879 	bl	80007b8 <_getpid>
 80056c6:	bd10      	pop	{r4, pc}

080056c8 <_sbrk_r>:
 80056c8:	2300      	movs	r3, #0
 80056ca:	b570      	push	{r4, r5, r6, lr}
 80056cc:	4d06      	ldr	r5, [pc, #24]	; (80056e8 <_sbrk_r+0x20>)
 80056ce:	0004      	movs	r4, r0
 80056d0:	0008      	movs	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb f8f8 	bl	80008c8 <_sbrk>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d103      	bne.n	80056e4 <_sbrk_r+0x1c>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d000      	beq.n	80056e4 <_sbrk_r+0x1c>
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	2000053c 	.word	0x2000053c

080056ec <memchr>:
 80056ec:	b2c9      	uxtb	r1, r1
 80056ee:	1882      	adds	r2, r0, r2
 80056f0:	4290      	cmp	r0, r2
 80056f2:	d101      	bne.n	80056f8 <memchr+0xc>
 80056f4:	2000      	movs	r0, #0
 80056f6:	4770      	bx	lr
 80056f8:	7803      	ldrb	r3, [r0, #0]
 80056fa:	428b      	cmp	r3, r1
 80056fc:	d0fb      	beq.n	80056f6 <memchr+0xa>
 80056fe:	3001      	adds	r0, #1
 8005700:	e7f6      	b.n	80056f0 <memchr+0x4>
	...

08005704 <__swhatbuf_r>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	000e      	movs	r6, r1
 8005708:	001d      	movs	r5, r3
 800570a:	230e      	movs	r3, #14
 800570c:	5ec9      	ldrsh	r1, [r1, r3]
 800570e:	0014      	movs	r4, r2
 8005710:	b096      	sub	sp, #88	; 0x58
 8005712:	2900      	cmp	r1, #0
 8005714:	da0c      	bge.n	8005730 <__swhatbuf_r+0x2c>
 8005716:	89b2      	ldrh	r2, [r6, #12]
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	0011      	movs	r1, r2
 800571c:	4019      	ands	r1, r3
 800571e:	421a      	tst	r2, r3
 8005720:	d013      	beq.n	800574a <__swhatbuf_r+0x46>
 8005722:	2100      	movs	r1, #0
 8005724:	3b40      	subs	r3, #64	; 0x40
 8005726:	2000      	movs	r0, #0
 8005728:	6029      	str	r1, [r5, #0]
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	b016      	add	sp, #88	; 0x58
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	466a      	mov	r2, sp
 8005732:	f000 f84d 	bl	80057d0 <_fstat_r>
 8005736:	2800      	cmp	r0, #0
 8005738:	dbed      	blt.n	8005716 <__swhatbuf_r+0x12>
 800573a:	23f0      	movs	r3, #240	; 0xf0
 800573c:	9901      	ldr	r1, [sp, #4]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	4019      	ands	r1, r3
 8005742:	4b03      	ldr	r3, [pc, #12]	; (8005750 <__swhatbuf_r+0x4c>)
 8005744:	18c9      	adds	r1, r1, r3
 8005746:	424b      	negs	r3, r1
 8005748:	4159      	adcs	r1, r3
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	e7ea      	b.n	8005726 <__swhatbuf_r+0x22>
 8005750:	ffffe000 	.word	0xffffe000

08005754 <__smakebuf_r>:
 8005754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005756:	2602      	movs	r6, #2
 8005758:	898b      	ldrh	r3, [r1, #12]
 800575a:	0005      	movs	r5, r0
 800575c:	000c      	movs	r4, r1
 800575e:	4233      	tst	r3, r6
 8005760:	d006      	beq.n	8005770 <__smakebuf_r+0x1c>
 8005762:	0023      	movs	r3, r4
 8005764:	3347      	adds	r3, #71	; 0x47
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	6123      	str	r3, [r4, #16]
 800576a:	2301      	movs	r3, #1
 800576c:	6163      	str	r3, [r4, #20]
 800576e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005770:	466a      	mov	r2, sp
 8005772:	ab01      	add	r3, sp, #4
 8005774:	f7ff ffc6 	bl	8005704 <__swhatbuf_r>
 8005778:	9900      	ldr	r1, [sp, #0]
 800577a:	0007      	movs	r7, r0
 800577c:	0028      	movs	r0, r5
 800577e:	f7ff faa7 	bl	8004cd0 <_malloc_r>
 8005782:	2800      	cmp	r0, #0
 8005784:	d108      	bne.n	8005798 <__smakebuf_r+0x44>
 8005786:	220c      	movs	r2, #12
 8005788:	5ea3      	ldrsh	r3, [r4, r2]
 800578a:	059a      	lsls	r2, r3, #22
 800578c:	d4ef      	bmi.n	800576e <__smakebuf_r+0x1a>
 800578e:	2203      	movs	r2, #3
 8005790:	4393      	bics	r3, r2
 8005792:	431e      	orrs	r6, r3
 8005794:	81a6      	strh	r6, [r4, #12]
 8005796:	e7e4      	b.n	8005762 <__smakebuf_r+0xe>
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	89a2      	ldrh	r2, [r4, #12]
 800579c:	6020      	str	r0, [r4, #0]
 800579e:	4313      	orrs	r3, r2
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	9b00      	ldr	r3, [sp, #0]
 80057a4:	6120      	str	r0, [r4, #16]
 80057a6:	6163      	str	r3, [r4, #20]
 80057a8:	9b01      	ldr	r3, [sp, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00c      	beq.n	80057c8 <__smakebuf_r+0x74>
 80057ae:	0028      	movs	r0, r5
 80057b0:	230e      	movs	r3, #14
 80057b2:	5ee1      	ldrsh	r1, [r4, r3]
 80057b4:	f000 f81e 	bl	80057f4 <_isatty_r>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d005      	beq.n	80057c8 <__smakebuf_r+0x74>
 80057bc:	2303      	movs	r3, #3
 80057be:	89a2      	ldrh	r2, [r4, #12]
 80057c0:	439a      	bics	r2, r3
 80057c2:	3b02      	subs	r3, #2
 80057c4:	4313      	orrs	r3, r2
 80057c6:	81a3      	strh	r3, [r4, #12]
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	433b      	orrs	r3, r7
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	e7ce      	b.n	800576e <__smakebuf_r+0x1a>

080057d0 <_fstat_r>:
 80057d0:	2300      	movs	r3, #0
 80057d2:	b570      	push	{r4, r5, r6, lr}
 80057d4:	4d06      	ldr	r5, [pc, #24]	; (80057f0 <_fstat_r+0x20>)
 80057d6:	0004      	movs	r4, r0
 80057d8:	0008      	movs	r0, r1
 80057da:	0011      	movs	r1, r2
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f7fb f850 	bl	8000882 <_fstat>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d103      	bne.n	80057ee <_fstat_r+0x1e>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d000      	beq.n	80057ee <_fstat_r+0x1e>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	2000053c 	.word	0x2000053c

080057f4 <_isatty_r>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	4d06      	ldr	r5, [pc, #24]	; (8005814 <_isatty_r+0x20>)
 80057fa:	0004      	movs	r4, r0
 80057fc:	0008      	movs	r0, r1
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	f7fb f84d 	bl	800089e <_isatty>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d103      	bne.n	8005810 <_isatty_r+0x1c>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d000      	beq.n	8005810 <_isatty_r+0x1c>
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	2000053c 	.word	0x2000053c

08005818 <_init>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr

08005824 <_fini>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr
