
pec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CFGFLASH      00000400  08005800  08005800  00015800  2**10
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005c00  08005c00  000200ec  2**0
                  CONTENTS
  5 .ARM          00000000  08005c00  08005c00  000200ec  2**0
                  CONTENTS
  6 .preinit_array 00000000  08005c00  08005c00  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000ec  20000000  08005c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003d0  200000ec  08005cf4  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  08005cf4  000204bc  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 14 .debug_info   000109e6  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003181  00000000  00000000  00030b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f10  00000000  00000000  00033cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b83  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000146fa  00000000  00000000  00035753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018867  00000000  00000000  00049e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006acbd  00000000  00000000  000626b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b78  00000000  00000000  000cd374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000d0eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ec 	.word	0x200000ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005404 	.word	0x08005404

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f0 	.word	0x200000f0
 8000104:	08005404 	.word	0x08005404

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f001 fffe 	bl	8002238 <HAL_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800023c:	b662      	cpsie	i
}
 800023e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Init */
  __enable_irq();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f80b 	bl	800025a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f908 	bl	8000458 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000248:	f000 f8d6 	bl	80003f8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800024c:	f000 f880 	bl	8000350 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000250:	f000 f85e 	bl	8000310 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  extern int app_main( void );
  app_main();
 8000254:	f000 fbf8 	bl	8000a48 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x24>

0800025a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025a:	b590      	push	{r4, r7, lr}
 800025c:	b095      	sub	sp, #84	; 0x54
 800025e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000260:	2420      	movs	r4, #32
 8000262:	193b      	adds	r3, r7, r4
 8000264:	0018      	movs	r0, r3
 8000266:	2330      	movs	r3, #48	; 0x30
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f004 fa26 	bl	80046bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	2310      	movs	r3, #16
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f004 fa1e 	bl	80046bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	003b      	movs	r3, r7
 8000282:	0018      	movs	r0, r3
 8000284:	2310      	movs	r3, #16
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f004 fa17 	bl	80046bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800028e:	0021      	movs	r1, r4
 8000290:	187b      	adds	r3, r7, r1
 8000292:	220a      	movs	r2, #10
 8000294:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2210      	movs	r2, #16
 80002a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2201      	movs	r2, #1
 80002a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	0018      	movs	r0, r3
 80002b2:	f002 fb13 	bl	80028dc <HAL_RCC_OscConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002ba:	f000 f971 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	2110      	movs	r1, #16
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2100      	movs	r1, #0
 80002dc:	0018      	movs	r0, r3
 80002de:	f002 fe17 	bl	8002f10 <HAL_RCC_ClockConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002e6:	f000 f95b 	bl	80005a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 ff4d 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000302:	f000 f94d 	bl	80005a0 <Error_Handler>
  }
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b015      	add	sp, #84	; 0x54
 800030c:	bd90      	pop	{r4, r7, pc}
	...

08000310 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_IWDG_Init+0x34>)
 8000316:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <MX_IWDG_Init+0x38>)
 8000318:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_IWDG_Init+0x34>)
 800031c:	2202      	movs	r2, #2
 800031e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 625;
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_IWDG_Init+0x34>)
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <MX_IWDG_Init+0x3c>)
 8000324:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 625;
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_IWDG_Init+0x34>)
 8000328:	4a08      	ldr	r2, [pc, #32]	; (800034c <MX_IWDG_Init+0x3c>)
 800032a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <MX_IWDG_Init+0x34>)
 800032e:	0018      	movs	r0, r3
 8000330:	f002 fa82 	bl	8002838 <HAL_IWDG_Init>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000338:	f000 f932 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	20000108 	.word	0x20000108
 8000348:	40003000 	.word	0x40003000
 800034c:	00000271 	.word	0x00000271

08000350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	2308      	movs	r3, #8
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	2310      	movs	r3, #16
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f004 f9ab 	bl	80046bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2308      	movs	r3, #8
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f004 f9a4 	bl	80046bc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_TIM2_Init+0xa0>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	05d2      	lsls	r2, r2, #23
 800037a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_TIM2_Init+0xa0>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_TIM2_Init+0xa0>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_TIM2_Init+0xa0>)
 800038a:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <MX_TIM2_Init+0xa4>)
 800038c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_TIM2_Init+0xa0>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_TIM2_Init+0xa0>)
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_TIM2_Init+0xa0>)
 800039c:	0018      	movs	r0, r3
 800039e:	f002 ffc9 	bl	8003334 <HAL_TIM_Base_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003a6:	f000 f8fb 	bl	80005a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003aa:	2108      	movs	r1, #8
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0152      	lsls	r2, r2, #5
 80003b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b4:	187a      	adds	r2, r7, r1
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_TIM2_Init+0xa0>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f003 f972 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003c4:	f000 f8ec 	bl	80005a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003d4:	003a      	movs	r2, r7
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_TIM2_Init+0xa0>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f003 fb7c 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003e4:	f000 f8dc 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b006      	add	sp, #24
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000118 	.word	0x20000118
 80003f4:	0000ffff 	.word	0x0000ffff

080003f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_USART1_UART_Init+0x58>)
 80003fe:	4a15      	ldr	r2, [pc, #84]	; (8000454 <MX_USART1_UART_Init+0x5c>)
 8000400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_USART1_UART_Init+0x58>)
 8000404:	2296      	movs	r2, #150	; 0x96
 8000406:	0192      	lsls	r2, r2, #6
 8000408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_USART1_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_USART1_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_USART1_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_USART1_UART_Init+0x58>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_USART1_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_USART1_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_USART1_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_USART1_UART_Init+0x58>)
 8000436:	2200      	movs	r2, #0
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_USART1_UART_Init+0x58>)
 800043c:	0018      	movs	r0, r3
 800043e:	f003 fbb3 	bl	8003ba8 <HAL_UART_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000446:	f000 f8ab 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000160 	.word	0x20000160
 8000454:	40013800 	.word	0x40013800

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b089      	sub	sp, #36	; 0x24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	240c      	movs	r4, #12
 8000460:	193b      	adds	r3, r7, r4
 8000462:	0018      	movs	r0, r3
 8000464:	2314      	movs	r3, #20
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f004 f927 	bl	80046bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046e:	4b48      	ldr	r3, [pc, #288]	; (8000590 <MX_GPIO_Init+0x138>)
 8000470:	695a      	ldr	r2, [r3, #20]
 8000472:	4b47      	ldr	r3, [pc, #284]	; (8000590 <MX_GPIO_Init+0x138>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	03c9      	lsls	r1, r1, #15
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
 800047c:	4b44      	ldr	r3, [pc, #272]	; (8000590 <MX_GPIO_Init+0x138>)
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	03db      	lsls	r3, r3, #15
 8000484:	4013      	ands	r3, r2
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b41      	ldr	r3, [pc, #260]	; (8000590 <MX_GPIO_Init+0x138>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b40      	ldr	r3, [pc, #256]	; (8000590 <MX_GPIO_Init+0x138>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0289      	lsls	r1, r1, #10
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <MX_GPIO_Init+0x138>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	029b      	lsls	r3, r3, #10
 80004a0:	4013      	ands	r3, r2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	4b3a      	ldr	r3, [pc, #232]	; (8000590 <MX_GPIO_Init+0x138>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b39      	ldr	r3, [pc, #228]	; (8000590 <MX_GPIO_Init+0x138>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	02c9      	lsls	r1, r1, #11
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b36      	ldr	r3, [pc, #216]	; (8000590 <MX_GPIO_Init+0x138>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	02db      	lsls	r3, r3, #11
 80004bc:	4013      	ands	r3, r2
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_RESET);
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2200      	movs	r2, #0
 80004c8:	2102      	movs	r1, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 f97b 	bl	80027c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2203      	movs	r2, #3
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	4a2b      	ldr	r2, [pc, #172]	; (8000594 <MX_GPIO_Init+0x13c>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f001 ffe7 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXI1_Pin */
  GPIO_InitStruct.Pin = EXI1_Pin;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2202      	movs	r2, #2
 80004f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	22c4      	movs	r2, #196	; 0xc4
 80004fa:	0392      	lsls	r2, r2, #14
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	000c      	movs	r4, r1
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXI1_GPIO_Port, &GPIO_InitStruct);
 8000506:	193b      	adds	r3, r7, r4
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <MX_GPIO_Init+0x13c>)
 800050a:	0019      	movs	r1, r3
 800050c:	0010      	movs	r0, r2
 800050e:	f001 ffd5 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000512:	193b      	adds	r3, r7, r4
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <MX_GPIO_Init+0x140>)
 8000516:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2203      	movs	r2, #3
 800051c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f001 ffc5 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_CT_Pin */
  GPIO_InitStruct.Pin = RS485_CT_Pin;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2202      	movs	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS485_CT_GPIO_Port, &GPIO_InitStruct);
 800054a:	193a      	adds	r2, r7, r4
 800054c:	2390      	movs	r3, #144	; 0x90
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f001 ffb2 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2202      	movs	r2, #2
 800055c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2203      	movs	r2, #3
 8000562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056a:	193b      	adds	r3, r7, r4
 800056c:	4a0b      	ldr	r2, [pc, #44]	; (800059c <MX_GPIO_Init+0x144>)
 800056e:	0019      	movs	r1, r3
 8000570:	0010      	movs	r0, r2
 8000572:	f001 ffa3 	bl	80024bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2103      	movs	r1, #3
 800057a:	2005      	movs	r0, #5
 800057c:	f001 ff6c 	bl	8002458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000580:	2005      	movs	r0, #5
 8000582:	f001 ff7e 	bl	8002482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b009      	add	sp, #36	; 0x24
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000
 8000594:	48001400 	.word	0x48001400
 8000598:	000006f1 	.word	0x000006f1
 800059c:	48000400 	.word	0x48000400

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x44>)
 80005b4:	699a      	ldr	r2, [r3, #24]
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_MspInit+0x44>)
 80005b8:	2101      	movs	r1, #1
 80005ba:	430a      	orrs	r2, r1
 80005bc:	619a      	str	r2, [r3, #24]
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_MspInit+0x44>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_MspInit+0x44>)
 80005cc:	69da      	ldr	r2, [r3, #28]
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_MspInit+0x44>)
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0549      	lsls	r1, r1, #21
 80005d4:	430a      	orrs	r2, r1
 80005d6:	61da      	str	r2, [r3, #28]
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_MspInit+0x44>)
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	055b      	lsls	r3, r3, #21
 80005e0:	4013      	ands	r3, r2
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	429a      	cmp	r2, r3
 8000606:	d113      	bne.n	8000630 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_TIM_Base_MspInit+0x44>)
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_TIM_Base_MspInit+0x44>)
 800060e:	2101      	movs	r1, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	61da      	str	r2, [r3, #28]
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_TIM_Base_MspInit+0x44>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	2201      	movs	r2, #1
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2103      	movs	r1, #3
 8000624:	200f      	movs	r0, #15
 8000626:	f001 ff17 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800062a:	200f      	movs	r0, #15
 800062c:	f001 ff29 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b004      	add	sp, #16
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b08b      	sub	sp, #44	; 0x2c
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	2414      	movs	r4, #20
 8000646:	193b      	adds	r3, r7, r4
 8000648:	0018      	movs	r0, r3
 800064a:	2314      	movs	r3, #20
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f004 f834 	bl	80046bc <memset>
  if(huart->Instance==USART1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <HAL_UART_MspInit+0xa0>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d13a      	bne.n	80006d4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <HAL_UART_MspInit+0xa4>)
 8000660:	699a      	ldr	r2, [r3, #24]
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <HAL_UART_MspInit+0xa4>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	01c9      	lsls	r1, r1, #7
 8000668:	430a      	orrs	r2, r1
 800066a:	619a      	str	r2, [r3, #24]
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_UART_MspInit+0xa4>)
 800066e:	699a      	ldr	r2, [r3, #24]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	01db      	lsls	r3, r3, #7
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <HAL_UART_MspInit+0xa4>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_UART_MspInit+0xa4>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0289      	lsls	r1, r1, #10
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_UART_MspInit+0xa4>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	029b      	lsls	r3, r3, #10
 8000690:	4013      	ands	r3, r2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	220c      	movs	r2, #12
 800069c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2202      	movs	r2, #2
 80006a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2203      	movs	r2, #3
 80006ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	187a      	adds	r2, r7, r1
 80006b8:	2390      	movs	r3, #144	; 0x90
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fefc 	bl	80024bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2103      	movs	r1, #3
 80006c8:	201b      	movs	r0, #27
 80006ca:	f001 fec5 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006ce:	201b      	movs	r0, #27
 80006d0:	f001 fed7 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b00b      	add	sp, #44	; 0x2c
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	40013800 	.word	0x40013800
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f001 fdde 	bl	80022c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXI1_Pin);
 8000716:	2002      	movs	r0, #2
 8000718:	f002 f872 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) !=RESET) {
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <TIM2_IRQHandler+0x54>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	2b01      	cmp	r3, #1
 8000734:	d118      	bne.n	8000768 <TIM2_IRQHandler+0x44>
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <TIM2_IRQHandler+0x54>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	2201      	movs	r2, #1
 800073e:	4013      	ands	r3, r2
 8000740:	2b01      	cmp	r3, #1
 8000742:	d111      	bne.n	8000768 <TIM2_IRQHandler+0x44>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <TIM2_IRQHandler+0x54>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2202      	movs	r2, #2
 800074a:	4252      	negs	r2, r2
 800074c:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <TIM2_IRQHandler+0x58>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <TIM2_IRQHandler+0x58>)
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <TIM2_IRQHandler+0x58>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d102      	bne.n	8000768 <TIM2_IRQHandler+0x44>
		  pxMBPortCBTimerExpired();
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <TIM2_IRQHandler+0x5c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4798      	blx	r3
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <TIM2_IRQHandler+0x54>)
 800076a:	0018      	movs	r0, r3
 800076c:	f002 feac 	bl	80034c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000118 	.word	0x20000118
 800077c:	20000260 	.word	0x20000260
 8000780:	2000024c 	.word	0x2000024c

08000784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <USART1_IRQHandler+0x78>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	2220      	movs	r2, #32
 8000792:	4013      	ands	r3, r2
 8000794:	3b20      	subs	r3, #32
 8000796:	425a      	negs	r2, r3
 8000798:	4153      	adcs	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	607b      	str	r3, [r7, #4]
	  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <USART1_IRQHandler+0x78>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2220      	movs	r2, #32
 80007a6:	4013      	ands	r3, r2
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	4193      	sbcs	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	603b      	str	r3, [r7, #0]

	  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <USART1_IRQHandler+0x46>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <USART1_IRQHandler+0x46>
		pxMBFrameCBByteReceived();
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <USART1_IRQHandler+0x7c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4798      	blx	r3
		__HAL_UART_CLEAR_PEFLAG(&huart1);
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <USART1_IRQHandler+0x78>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2201      	movs	r2, #1
 80007c8:	621a      	str	r2, [r3, #32]
	  }

	  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <USART1_IRQHandler+0x78>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	4013      	ands	r3, r2
 80007d4:	2b80      	cmp	r3, #128	; 0x80
 80007d6:	d108      	bne.n	80007ea <USART1_IRQHandler+0x66>
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <USART1_IRQHandler+0x78>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	4013      	ands	r3, r2
 80007e2:	d002      	beq.n	80007ea <USART1_IRQHandler+0x66>
		pxMBFrameCBTransmitterEmpty();
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <USART1_IRQHandler+0x80>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4798      	blx	r3
	  }

	  __HAL_UART_CLEAR_FLAG(&huart1, 0xffffffff  );
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <USART1_IRQHandler+0x78>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4252      	negs	r2, r2
 80007f2:	621a      	str	r2, [r3, #32]
	  return;
 80007f4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000160 	.word	0x20000160
 8000800:	20000244 	.word	0x20000244
 8000804:	20000248 	.word	0x20000248

08000808 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
uint16_t ISRCNT = 0;
uint32_t lastHT = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == EXI1_Pin) {
 8000814:	1dbb      	adds	r3, r7, #6
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d11b      	bne.n	8000854 <HAL_GPIO_EXTI_Callback+0x4c>
		if(GPIO_PIN_SET == HAL_GPIO_ReadPin(EXI1_GPIO_Port, EXI1_Pin) )
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_GPIO_EXTI_Callback+0x54>)
 800081e:	2102      	movs	r1, #2
 8000820:	0018      	movs	r0, r3
 8000822:	f001 ffb3 	bl	800278c <HAL_GPIO_ReadPin>
 8000826:	0003      	movs	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d105      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x30>
		{
			lastHT = HAL_GetTick();
 800082c:	f001 fd5e 	bl	80022ec <HAL_GetTick>
 8000830:	0002      	movs	r2, r0
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_GPIO_EXTI_Callback+0x58>)
 8000834:	601a      	str	r2, [r3, #0]
				ISRCNT++;
			}
		}

	}
}
 8000836:	e00d      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x4c>
			if( HAL_GetTick() - lastHT >=100){
 8000838:	f001 fd58 	bl	80022ec <HAL_GetTick>
 800083c:	0002      	movs	r2, r0
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_GPIO_EXTI_Callback+0x58>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	2b63      	cmp	r3, #99	; 0x63
 8000846:	d905      	bls.n	8000854 <HAL_GPIO_EXTI_Callback+0x4c>
				ISRCNT++;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_GPIO_EXTI_Callback+0x5c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000852:	801a      	strh	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b002      	add	sp, #8
 800085a:	bd80      	pop	{r7, pc}
 800085c:	48001400 	.word	0x48001400
 8000860:	200001ec 	.word	0x200001ec
 8000864:	200001e8 	.word	0x200001e8

08000868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_kill>:

int _kill(int pid, int sig)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800087e:	f003 ff73 	bl	8004768 <__errno>
 8000882:	0003      	movs	r3, r0
 8000884:	2216      	movs	r2, #22
 8000886:	601a      	str	r2, [r3, #0]
  return -1;
 8000888:	2301      	movs	r3, #1
 800088a:	425b      	negs	r3, r3
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}

08000894 <_exit>:

void _exit (int status)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800089c:	2301      	movs	r3, #1
 800089e:	425a      	negs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ffe5 	bl	8000874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008aa:	e7fe      	b.n	80008aa <_exit+0x16>

080008ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00a      	b.n	80008d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008be:	e000      	b.n	80008c2 <_read+0x16>
 80008c0:	bf00      	nop
 80008c2:	0001      	movs	r1, r0
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbf0      	blt.n	80008be <_read+0x12>
  }

  return len;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e009      	b.n	800090c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	0018      	movs	r0, r3
 8000902:	e000      	b.n	8000906 <_write+0x20>
 8000904:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf1      	blt.n	80008f8 <_write+0x12>
  }
  return len;
 8000914:	687b      	ldr	r3, [r7, #4]
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b006      	add	sp, #24
 800091c:	bd80      	pop	{r7, pc}

0800091e <_close>:

int _close(int file)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000926:	2301      	movs	r3, #1
 8000928:	425b      	negs	r3, r3
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}

08000932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	0192      	lsls	r2, r2, #6
 8000942:	605a      	str	r2, [r3, #4]
  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}

0800094e <_isatty>:

int _isatty(int file)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f003 fede 	bl	8004768 <__errno>
 80009ac:	0003      	movs	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	425b      	negs	r3, r3
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	18d2      	adds	r2, r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b006      	add	sp, #24
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20001000 	.word	0x20001000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	200001f0 	.word	0x200001f0
 80009e0:	200004c0 	.word	0x200004c0

080009e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  cpsid i	/*disable INT*/
 80009f0:	b672      	cpsid	i

  ldr   r0, =_estack
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80009f4:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f6:	f7ff fff5 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x8>)
  ldr r1, =_edata
 80009fc:	490d      	ldr	r1, [pc, #52]	; (8000a34 <LoopForever+0xc>)
  ldr r2, =_sidata
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <LoopForever+0x10>)
  movs r3, #0
 8000a00:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a02:	e002      	b.n	8000a0a <LoopCopyDataInit>

08000a04 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a04:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a06:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a08:	3304      	adds	r3, #4

08000a0a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0c:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0e:	d3f9      	bcc.n	8000a04 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopForever+0x14>)
  ldr r4, =_ebss
 8000a12:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <LoopForever+0x18>)
  movs r3, #0
 8000a14:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a16:	e001      	b.n	8000a1c <LoopFillZerobss>

08000a18 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1a:	3204      	adds	r2, #4

08000a1c <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1c:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1e:	d3fb      	bcc.n	8000a18 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a20:	f003 fea8 	bl	8004774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a24:	f7ff fc06 	bl	8000234 <main>

08000a28 <LoopForever>:

LoopForever:
    b LoopForever
 8000a28:	e7fe      	b.n	8000a28 <LoopForever>
 8000a2a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000a2c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8000a38:	08005c08 	.word	0x08005c08
  ldr r2, =_sbss
 8000a3c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8000a40:	200004bc 	.word	0x200004bc

08000a44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_IRQHandler>
	...

08000a48 <app_main>:
extern void load_config(void);
extern void modbusInit(void);
extern IWDG_HandleTypeDef hiwdg;

int app_main( void )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	load_config();
 8000a4c:	f000 f812 	bl	8000a74 <load_config>

	__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <app_main+0x24>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <app_main+0x28>)
 8000a56:	601a      	str	r2, [r3, #0]

	modbusInit();
 8000a58:	f000 f838 	bl	8000acc <modbusInit>

    while(1){
    	__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <app_main+0x24>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <app_main+0x28>)
 8000a62:	601a      	str	r2, [r3, #0]
    	eMBPoll();
 8000a64:	f000 ff60 	bl	8001928 <eMBPoll>
    while(1){
 8000a68:	e7f8      	b.n	8000a5c <app_main+0x14>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000108 	.word	0x20000108
 8000a70:	0000aaaa 	.word	0x0000aaaa

08000a74 <load_config>:

const uint8_t configFlash[1024] __attribute__((section("CFGFLASH"), aligned(0x400)));

Config_t config;

void load_config(void) {
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	memcpy(&config, (uint8_t*) configFlash, sizeof(Config_t));
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <load_config+0x48>)
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <load_config+0x4c>)
 8000a7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a7e:	c313      	stmia	r3!, {r0, r1, r4}
 8000a80:	6811      	ldr	r1, [r2, #0]
 8000a82:	6019      	str	r1, [r3, #0]
 8000a84:	8892      	ldrh	r2, [r2, #4]
 8000a86:	809a      	strh	r2, [r3, #4]
	if (config.flaga5a5 != 0xa5a5) {
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <load_config+0x48>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <load_config+0x50>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d011      	beq.n	8000ab6 <load_config+0x42>
		config.flaga5a5 = 0xa5a5;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <load_config+0x48>)
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <load_config+0x54>)
 8000a96:	801a      	strh	r2, [r3, #0]
		config.firmware = FIRMWARE_VER;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <load_config+0x48>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	805a      	strh	r2, [r3, #2]
		config.addr = 0x2a;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <load_config+0x48>)
 8000aa0:	222a      	movs	r2, #42	; 0x2a
 8000aa2:	809a      	strh	r2, [r3, #4]
		config.baudrate = 3;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <load_config+0x48>)
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	80da      	strh	r2, [r3, #6]
		config.parity = 0;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <load_config+0x48>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	811a      	strh	r2, [r3, #8]
		config.stopbits = 0;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <load_config+0x48>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	815a      	strh	r2, [r3, #10]
	}
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	200001f4 	.word	0x200001f4
 8000ac0:	08005800 	.word	0x08005800
 8000ac4:	0000a5a5 	.word	0x0000a5a5
 8000ac8:	ffffa5a5 	.word	0xffffa5a5

08000acc <modbusInit>:

static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void modbusInit(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af02      	add	r7, sp, #8
  eMBErrorCode eStatus = eMBInit( MB_RTU, config.addr, 3, 19200, MB_PAR_NONE );
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <modbusInit+0x34>)
 8000ad4:	889b      	ldrh	r3, [r3, #4]
 8000ad6:	b2d9      	uxtb	r1, r3
 8000ad8:	1dfc      	adds	r4, r7, #7
 8000ada:	2396      	movs	r3, #150	; 0x96
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	9200      	str	r2, [sp, #0]
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fe69 	bl	80017bc <eMBInit>
 8000aea:	0003      	movs	r3, r0
 8000aec:	7023      	strb	r3, [r4, #0]
  eStatus = eMBEnable();
 8000aee:	1dfc      	adds	r4, r7, #7
 8000af0:	f000 fefc 	bl	80018ec <eMBEnable>
 8000af4:	0003      	movs	r3, r0
 8000af6:	7023      	strb	r3, [r4, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b003      	add	sp, #12
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	200001f4 	.word	0x200001f4

08000b04 <eMBRegInputCB>:
	return crc;
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT _usAddress, USHORT usNRegs )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	0011      	movs	r1, r2
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	801a      	strh	r2, [r3, #0]
 8000b16:	003b      	movs	r3, r7
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000b1c:	2317      	movs	r3, #23
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
    int             iRegIndex;
    USHORT usAddress = _usAddress - 1;
 8000b24:	210e      	movs	r1, #14
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	1cba      	adds	r2, r7, #2
 8000b2a:	8812      	ldrh	r2, [r2, #0]
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	801a      	strh	r2, [r3, #0]

    if( ( usAddress == REG_INPUT_START )
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	881a      	ldrh	r2, [r3, #0]
 8000b34:	23fa      	movs	r3, #250	; 0xfa
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d133      	bne.n	8000ba4 <eMBRegInputCB+0xa0>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	881a      	ldrh	r2, [r3, #0]
 8000b40:	003b      	movs	r3, r7
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <eMBRegInputCB+0xb8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	dc2b      	bgt.n	8000ba4 <eMBRegInputCB+0xa0>
    {
    	extern uint16_t ISRCNT;
    	usRegInputBuf[0] = ISRCNT;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <eMBRegInputCB+0xbc>)
 8000b4e:	881a      	ldrh	r2, [r3, #0]
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <eMBRegInputCB+0xc0>)
 8000b52:	801a      	strh	r2, [r3, #0]
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <eMBRegInputCB+0xc4>)
 8000b5a:	8812      	ldrh	r2, [r2, #0]
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        while( usNRegs > 0 )
 8000b60:	e01b      	b.n	8000b9a <eMBRegInputCB+0x96>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <eMBRegInputCB+0xc0>)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	5ad3      	ldrh	r3, [r2, r3]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b74:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b76:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <eMBRegInputCB+0xc0>)
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	0052      	lsls	r2, r2, #1
 8000b7e:	5ad1      	ldrh	r1, [r2, r3]
            *pucRegBuffer++ =
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b86:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b88:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
            usNRegs--;
 8000b90:	003b      	movs	r3, r7
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	003b      	movs	r3, r7
 8000b96:	3a01      	subs	r2, #1
 8000b98:	801a      	strh	r2, [r3, #0]
        while( usNRegs > 0 )
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1df      	bne.n	8000b62 <eMBRegInputCB+0x5e>
    {
 8000ba2:	e003      	b.n	8000bac <eMBRegInputCB+0xa8>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000ba4:	2317      	movs	r3, #23
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 8000bac:	2317      	movs	r3, #23
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b006      	add	sp, #24
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	000007d1 	.word	0x000007d1
 8000bc0:	200001e8 	.word	0x200001e8
 8000bc4:	20000208 	.word	0x20000208
 8000bc8:	20000004 	.word	0x20000004

08000bcc <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT _usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	000c      	movs	r4, r1
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	0019      	movs	r1, r3
 8000bda:	250a      	movs	r5, #10
 8000bdc:	197b      	adds	r3, r7, r5
 8000bde:	1c22      	adds	r2, r4, #0
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	2408      	movs	r4, #8
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	1c02      	adds	r2, r0, #0
 8000be8:	801a      	strh	r2, [r3, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	1c0a      	adds	r2, r1, #0
 8000bee:	701a      	strb	r2, [r3, #0]
	eMBErrorCode    eStatus = MB_ENOERR;
 8000bf0:	231f      	movs	r3, #31
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	int             iRegIndex;
	USHORT usAddress = _usAddress - 1;
 8000bf8:	2116      	movs	r1, #22
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	197a      	adds	r2, r7, r5
 8000bfe:	8812      	ldrh	r2, [r2, #0]
 8000c00:	3a01      	subs	r2, #1
 8000c02:	801a      	strh	r2, [r3, #0]

	if ( MB_REG_READ == eMode ){
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d133      	bne.n	8000c74 <eMBRegHoldingCB+0xa8>
		if( ( usAddress >= 0 ) && ( usAddress + usNRegs <= 9 ) )
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	881a      	ldrh	r2, [r3, #0]
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	18d3      	adds	r3, r2, r3
 8000c16:	2b09      	cmp	r3, #9
 8000c18:	dc27      	bgt.n	8000c6a <eMBRegHoldingCB+0x9e>
		{
			uint16_t *pread = (uint16_t *)&config;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <eMBRegHoldingCB+0xc0>)
 8000c1c:	61bb      	str	r3, [r7, #24]
			pread += usAddress;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	61bb      	str	r3, [r7, #24]
			while( usNRegs > 0 )
 8000c2a:	e018      	b.n	8000c5e <eMBRegHoldingCB+0x92>
			{
				*pucRegBuffer++ =
					( unsigned char )( *pread >> 8 );
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	b299      	uxth	r1, r3
				*pucRegBuffer++ =
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60fa      	str	r2, [r7, #12]
					( unsigned char )( *pread >> 8 );
 8000c3a:	b2ca      	uxtb	r2, r1
				*pucRegBuffer++ =
 8000c3c:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ =
					( unsigned char )( *pread & 0xFF );
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	8819      	ldrh	r1, [r3, #0]
				*pucRegBuffer++ =
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	60fa      	str	r2, [r7, #12]
					( unsigned char )( *pread & 0xFF );
 8000c48:	b2ca      	uxtb	r2, r1
				*pucRegBuffer++ =
 8000c4a:	701a      	strb	r2, [r3, #0]
				pread++;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
				usNRegs--;
 8000c52:	2108      	movs	r1, #8
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	3a01      	subs	r2, #1
 8000c5c:	801a      	strh	r2, [r3, #0]
			while( usNRegs > 0 )
 8000c5e:	2308      	movs	r3, #8
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e1      	bne.n	8000c2c <eMBRegHoldingCB+0x60>
 8000c68:	e008      	b.n	8000c7c <eMBRegHoldingCB+0xb0>
			}
		}else{
			eStatus = MB_ENOREG;
 8000c6a:	231f      	movs	r3, #31
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e003      	b.n	8000c7c <eMBRegHoldingCB+0xb0>
//			save_config();
//			if( (usAddress + bkN >= 9) && (config.restart==0xffff) )
//				HAL_NVIC_SystemReset();
//
//		}else{
			eStatus = MB_ENOREG;
 8000c74:	231f      	movs	r3, #31
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
//		}
	}

	return eStatus;
 8000c7c:	231f      	movs	r3, #31
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	781b      	ldrb	r3, [r3, #0]
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b008      	add	sp, #32
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	200001f4 	.word	0x200001f4

08000c90 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	000c      	movs	r4, r1
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	1c22      	adds	r2, r4, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	1c02      	adds	r2, r0, #0
 8000cac:	801a      	strh	r2, [r3, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	1c0a      	adds	r2, r1, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
    return MB_ENOREG;
 8000cb4:	2301      	movs	r3, #1
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b005      	add	sp, #20
 8000cbc:	bd90      	pop	{r4, r7, pc}

08000cbe <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	0008      	movs	r0, r1
 8000cc8:	0011      	movs	r1, r2
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	1c02      	adds	r2, r0, #0
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	1c0a      	adds	r2, r1, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
    return MB_ENOREG;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8000ce0:	b5b0      	push	{r4, r5, r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8000cea:	2316      	movs	r3, #22
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d000      	beq.n	8000cfc <eMBFuncReadCoils+0x1c>
 8000cfa:	e091      	b.n	8000e20 <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	2014      	movs	r0, #20
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	0212      	lsls	r2, r2, #8
 8000d0a:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b299      	uxth	r1, r3
 8000d14:	183b      	adds	r3, r7, r0
 8000d16:	183a      	adds	r2, r7, r0
 8000d18:	8812      	ldrh	r2, [r2, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	881a      	ldrh	r2, [r3, #0]
 8000d22:	183b      	adds	r3, r7, r0
 8000d24:	3201      	adds	r2, #1
 8000d26:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	2012      	movs	r0, #18
 8000d32:	183b      	adds	r3, r7, r0
 8000d34:	0212      	lsls	r2, r2, #8
 8000d36:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	183a      	adds	r2, r7, r0
 8000d44:	8812      	ldrh	r2, [r2, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d061      	beq.n	8000e16 <eMBFuncReadCoils+0x136>
 8000d52:	0001      	movs	r1, r0
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	881a      	ldrh	r2, [r3, #0]
 8000d58:	23fa      	movs	r3, #250	; 0xfa
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d25a      	bcs.n	8000e16 <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60fa      	str	r2, [r7, #12]
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2207      	movs	r2, #7
 8000d86:	4013      	ands	r3, r2
 8000d88:	d009      	beq.n	8000d9e <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	2317      	movs	r3, #23
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	3201      	adds	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e007      	b.n	8000dae <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8000d9e:	2312      	movs	r3, #18
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	2317      	movs	r3, #23
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60fa      	str	r2, [r7, #12]
 8000db4:	2217      	movs	r2, #23
 8000db6:	18ba      	adds	r2, r7, r2
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8000dc8:	250b      	movs	r5, #11
 8000dca:	197c      	adds	r4, r7, r5
 8000dcc:	2312      	movs	r3, #18
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	881a      	ldrh	r2, [r3, #0]
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	8819      	ldrh	r1, [r3, #0]
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f7ff ff58 	bl	8000c90 <eMBRegCoilsCB>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000de4:	197b      	adds	r3, r7, r5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d009      	beq.n	8000e00 <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000dec:	2316      	movs	r3, #22
 8000dee:	18fc      	adds	r4, r7, r3
 8000df0:	197b      	adds	r3, r7, r5
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f000 fcb5 	bl	8001764 <prveMBError2Exception>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000dfe:	e013      	b.n	8000e28 <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	2317      	movs	r3, #23
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8000e14:	e008      	b.n	8000e28 <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000e16:	2316      	movs	r3, #22
 8000e18:	18fb      	adds	r3, r7, r3
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000e20:	2316      	movs	r3, #22
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	2203      	movs	r2, #3
 8000e26:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000e28:	2316      	movs	r3, #22
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	781b      	ldrb	r3, [r3, #0]
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b006      	add	sp, #24
 8000e34:	bdb0      	pop	{r4, r5, r7, pc}

08000e36 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8000e36:	b5b0      	push	{r4, r5, r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d155      	bne.n	8000efc <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	200c      	movs	r0, #12
 8000e5a:	183b      	adds	r3, r7, r0
 8000e5c:	0212      	lsls	r2, r2, #8
 8000e5e:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3302      	adds	r3, #2
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b299      	uxth	r1, r3
 8000e68:	183b      	adds	r3, r7, r0
 8000e6a:	183a      	adds	r2, r7, r0
 8000e6c:	8812      	ldrh	r2, [r2, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000e72:	183b      	adds	r3, r7, r0
 8000e74:	881a      	ldrh	r2, [r3, #0]
 8000e76:	183b      	adds	r3, r7, r0
 8000e78:	3201      	adds	r2, #1
 8000e7a:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3304      	adds	r3, #4
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d135      	bne.n	8000ef2 <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3303      	adds	r3, #3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8000e8c:	2bff      	cmp	r3, #255	; 0xff
 8000e8e:	d004      	beq.n	8000e9a <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3303      	adds	r3, #3
 8000e94:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d12b      	bne.n	8000ef2 <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2bff      	cmp	r3, #255	; 0xff
 8000eaa:	d103      	bne.n	8000eb4 <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e003      	b.n	8000ebc <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8000ebc:	250b      	movs	r5, #11
 8000ebe:	197c      	adds	r4, r7, r5
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	8819      	ldrh	r1, [r3, #0]
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	18f8      	adds	r0, r7, r3
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f7ff fedf 	bl	8000c90 <eMBRegCoilsCB>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d012      	beq.n	8000f04 <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000ede:	230f      	movs	r3, #15
 8000ee0:	18fc      	adds	r4, r7, r3
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 fc3c 	bl	8001764 <prveMBError2Exception>
 8000eec:	0003      	movs	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000ef0:	e008      	b.n	8000f04 <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	e003      	b.n	8000f04 <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	2203      	movs	r2, #3
 8000f02:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	781b      	ldrb	r3, [r3, #0]
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b004      	add	sp, #16
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}

08000f12 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8000f12:	b5b0      	push	{r4, r5, r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d800      	bhi.n	8000f2e <eMBFuncWriteMultipleCoils+0x1c>
 8000f2c:	e07a      	b.n	8001024 <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3301      	adds	r3, #1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	200c      	movs	r0, #12
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	0212      	lsls	r2, r2, #8
 8000f3c:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3302      	adds	r3, #2
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b299      	uxth	r1, r3
 8000f46:	183b      	adds	r3, r7, r0
 8000f48:	183a      	adds	r2, r7, r0
 8000f4a:	8812      	ldrh	r2, [r2, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000f50:	183b      	adds	r3, r7, r0
 8000f52:	881a      	ldrh	r2, [r3, #0]
 8000f54:	183b      	adds	r3, r7, r0
 8000f56:	3201      	adds	r2, #1
 8000f58:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	200a      	movs	r0, #10
 8000f64:	183b      	adds	r3, r7, r0
 8000f66:	0212      	lsls	r2, r2, #8
 8000f68:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	183b      	adds	r3, r7, r0
 8000f74:	183a      	adds	r2, r7, r0
 8000f76:	8812      	ldrh	r2, [r2, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8000f7c:	2309      	movs	r3, #9
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	7952      	ldrb	r2, [r2, #5]
 8000f84:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8000f86:	183b      	adds	r3, r7, r0
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d009      	beq.n	8000fa4 <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8000f90:	183b      	adds	r3, r7, r0
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	3201      	adds	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	e007      	b.n	8000fb4 <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8000fb4:	210a      	movs	r1, #10
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d02d      	beq.n	800101a <eMBFuncWriteMultipleCoils+0x108>
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	23f6      	movs	r3, #246	; 0xf6
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d827      	bhi.n	800101a <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fa      	adds	r2, r7, r3
 8000fce:	2309      	movs	r3, #9
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d11f      	bne.n	800101a <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	1d98      	adds	r0, r3, #6
 8000fde:	2508      	movs	r5, #8
 8000fe0:	197c      	adds	r4, r7, r5
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	8819      	ldrh	r1, [r3, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	f7ff fe4f 	bl	8000c90 <eMBRegCoilsCB>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d009      	beq.n	8001012 <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000ffe:	230e      	movs	r3, #14
 8001000:	18fc      	adds	r4, r7, r3
 8001002:	197b      	adds	r3, r7, r5
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fbac 	bl	8001764 <prveMBError2Exception>
 800100c:	0003      	movs	r3, r0
 800100e:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001010:	e00c      	b.n	800102c <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2205      	movs	r2, #5
 8001016:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001018:	e008      	b.n	800102c <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800101a:	230e      	movs	r3, #14
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2203      	movs	r2, #3
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e003      	b.n	800102c <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001024:	230e      	movs	r3, #14
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2203      	movs	r2, #3
 800102a:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800102c:	230e      	movs	r3, #14
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bdb0      	pop	{r4, r5, r7, pc}

0800103a <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800103a:	b5b0      	push	{r4, r5, r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001044:	2316      	movs	r3, #22
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d000      	beq.n	8001056 <eMBFuncReadDiscreteInputs+0x1c>
 8001054:	e091      	b.n	800117a <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b29a      	uxth	r2, r3
 800105e:	2014      	movs	r0, #20
 8001060:	183b      	adds	r3, r7, r0
 8001062:	0212      	lsls	r2, r2, #8
 8001064:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3302      	adds	r3, #2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b299      	uxth	r1, r3
 800106e:	183b      	adds	r3, r7, r0
 8001070:	183a      	adds	r2, r7, r0
 8001072:	8812      	ldrh	r2, [r2, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001078:	183b      	adds	r3, r7, r0
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	183b      	adds	r3, r7, r0
 800107e:	3201      	adds	r2, #1
 8001080:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3303      	adds	r3, #3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b29a      	uxth	r2, r3
 800108a:	2012      	movs	r0, #18
 800108c:	183b      	adds	r3, r7, r0
 800108e:	0212      	lsls	r2, r2, #8
 8001090:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3304      	adds	r3, #4
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b299      	uxth	r1, r3
 800109a:	183b      	adds	r3, r7, r0
 800109c:	183a      	adds	r2, r7, r0
 800109e:	8812      	ldrh	r2, [r2, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 80010a4:	183b      	adds	r3, r7, r0
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d061      	beq.n	8001170 <eMBFuncReadDiscreteInputs+0x136>
 80010ac:	0001      	movs	r1, r0
 80010ae:	183b      	adds	r3, r7, r0
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	23fa      	movs	r3, #250	; 0xfa
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d25a      	bcs.n	8001170 <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60fa      	str	r2, [r7, #12]
 80010ca:	2202      	movs	r2, #2
 80010cc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	2207      	movs	r2, #7
 80010e0:	4013      	ands	r3, r2
 80010e2:	d009      	beq.n	80010f8 <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	2317      	movs	r3, #23
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	3201      	adds	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e007      	b.n	8001108 <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80010f8:	2312      	movs	r3, #18
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	b29a      	uxth	r2, r3
 8001102:	2317      	movs	r3, #23
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60fa      	str	r2, [r7, #12]
 800110e:	2217      	movs	r2, #23
 8001110:	18ba      	adds	r2, r7, r2
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8001122:	250b      	movs	r5, #11
 8001124:	197c      	adds	r4, r7, r5
 8001126:	2312      	movs	r3, #18
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	2314      	movs	r3, #20
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	8819      	ldrh	r1, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fdc2 	bl	8000cbe <eMBRegDiscreteCB>
 800113a:	0003      	movs	r3, r0
 800113c:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800113e:	197b      	adds	r3, r7, r5
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d009      	beq.n	800115a <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001146:	2316      	movs	r3, #22
 8001148:	18fc      	adds	r4, r7, r3
 800114a:	197b      	adds	r3, r7, r5
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f000 fb08 	bl	8001764 <prveMBError2Exception>
 8001154:	0003      	movs	r3, r0
 8001156:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001158:	e013      	b.n	8001182 <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	2317      	movs	r3, #23
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800116e:	e008      	b.n	8001182 <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001170:	2316      	movs	r3, #22
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2203      	movs	r2, #3
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e003      	b.n	8001182 <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800117a:	2316      	movs	r3, #22
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001182:	2316      	movs	r3, #22
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	781b      	ldrb	r3, [r3, #0]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b006      	add	sp, #24
 800118e:	bdb0      	pop	{r4, r5, r7, pc}

08001190 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800119a:	260f      	movs	r6, #15
 800119c:	19bb      	adds	r3, r7, r6
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	d12f      	bne.n	800120a <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	200c      	movs	r0, #12
 80011b4:	183b      	adds	r3, r7, r0
 80011b6:	0212      	lsls	r2, r2, #8
 80011b8:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3302      	adds	r3, #2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b299      	uxth	r1, r3
 80011c2:	183b      	adds	r3, r7, r0
 80011c4:	183a      	adds	r2, r7, r0
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80011cc:	183b      	adds	r3, r7, r0
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	0001      	movs	r1, r0
 80011d2:	183b      	adds	r3, r7, r0
 80011d4:	3201      	adds	r2, #1
 80011d6:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1cd8      	adds	r0, r3, #3
 80011dc:	250b      	movs	r5, #11
 80011de:	197c      	adds	r4, r7, r5
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	8819      	ldrh	r1, [r3, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	2201      	movs	r2, #1
 80011e8:	f7ff fcf0 	bl	8000bcc <eMBRegHoldingCB>
 80011ec:	0003      	movs	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80011f8:	19bc      	adds	r4, r7, r6
 80011fa:	197b      	adds	r3, r7, r5
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fab0 	bl	8001764 <prveMBError2Exception>
 8001204:	0003      	movs	r3, r0
 8001206:	7023      	strb	r3, [r4, #0]
 8001208:	e003      	b.n	8001212 <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800120a:	230f      	movs	r3, #15
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	2203      	movs	r2, #3
 8001210:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001212:	230f      	movs	r3, #15
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b005      	add	sp, #20
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001220 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 800122a:	230f      	movs	r3, #15
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d962      	bls.n	8001300 <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b29a      	uxth	r2, r3
 8001242:	200c      	movs	r0, #12
 8001244:	183b      	adds	r3, r7, r0
 8001246:	0212      	lsls	r2, r2, #8
 8001248:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3302      	adds	r3, #2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b299      	uxth	r1, r3
 8001252:	183b      	adds	r3, r7, r0
 8001254:	183a      	adds	r2, r7, r0
 8001256:	8812      	ldrh	r2, [r2, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800125c:	183b      	adds	r3, r7, r0
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	0005      	movs	r5, r0
 8001262:	183b      	adds	r3, r7, r0
 8001264:	3201      	adds	r2, #1
 8001266:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3303      	adds	r3, #3
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	200a      	movs	r0, #10
 8001272:	183b      	adds	r3, r7, r0
 8001274:	0212      	lsls	r2, r2, #8
 8001276:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b299      	uxth	r1, r3
 8001280:	183b      	adds	r3, r7, r0
 8001282:	183a      	adds	r2, r7, r0
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800128a:	2409      	movs	r4, #9
 800128c:	193b      	adds	r3, r7, r4
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	7952      	ldrb	r2, [r2, #5]
 8001292:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 8001294:	0001      	movs	r1, r0
 8001296:	187b      	adds	r3, r7, r1
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d02b      	beq.n	80012f6 <eMBFuncWriteMultipleHoldingRegister+0xd6>
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	2b78      	cmp	r3, #120	; 0x78
 80012a4:	d827      	bhi.n	80012f6 <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	18db      	adds	r3, r3, r3
 80012ae:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80012b0:	193a      	adds	r2, r7, r4
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d11e      	bne.n	80012f6 <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	1d98      	adds	r0, r3, #6
 80012bc:	2608      	movs	r6, #8
 80012be:	19bc      	adds	r4, r7, r6
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	197b      	adds	r3, r7, r5
 80012c6:	8819      	ldrh	r1, [r3, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	f7ff fc7f 	bl	8000bcc <eMBRegHoldingCB>
 80012ce:	0003      	movs	r3, r0
 80012d0:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80012d2:	19bb      	adds	r3, r7, r6
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80012da:	230f      	movs	r3, #15
 80012dc:	18fc      	adds	r4, r7, r3
 80012de:	19bb      	adds	r3, r7, r6
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fa3e 	bl	8001764 <prveMBError2Exception>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80012ec:	e00c      	b.n	8001308 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2205      	movs	r2, #5
 80012f2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80012f4:	e008      	b.n	8001308 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2203      	movs	r2, #3
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e003      	b.n	8001308 <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b005      	add	sp, #20
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001316 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8001320:	2317      	movs	r3, #23
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d000      	beq.n	8001332 <eMBFuncReadHoldingRegister+0x1c>
 8001330:	e075      	b.n	800141e <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3301      	adds	r3, #1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b29a      	uxth	r2, r3
 800133a:	2014      	movs	r0, #20
 800133c:	183b      	adds	r3, r7, r0
 800133e:	0212      	lsls	r2, r2, #8
 8001340:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3302      	adds	r3, #2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b299      	uxth	r1, r3
 800134a:	183b      	adds	r3, r7, r0
 800134c:	183a      	adds	r2, r7, r0
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001354:	183b      	adds	r3, r7, r0
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	183b      	adds	r3, r7, r0
 800135a:	3201      	adds	r2, #1
 800135c:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3303      	adds	r3, #3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b29a      	uxth	r2, r3
 8001366:	2512      	movs	r5, #18
 8001368:	197b      	adds	r3, r7, r5
 800136a:	0212      	lsls	r2, r2, #8
 800136c:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	197b      	adds	r3, r7, r5
 8001376:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001378:	197b      	adds	r3, r7, r5
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d049      	beq.n	8001414 <eMBFuncReadHoldingRegister+0xfe>
 8001380:	197b      	adds	r3, r7, r5
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2b7d      	cmp	r3, #125	; 0x7d
 8001386:	d845      	bhi.n	8001414 <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	60fa      	str	r2, [r7, #12]
 8001398:	2203      	movs	r2, #3
 800139a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80013a8:	197b      	adds	r3, r7, r5
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b2d9      	uxtb	r1, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	60fa      	str	r2, [r7, #12]
 80013b4:	1c0a      	adds	r2, r1, #0
 80013b6:	1892      	adds	r2, r2, r2
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80013c8:	260b      	movs	r6, #11
 80013ca:	19bc      	adds	r4, r7, r6
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	8819      	ldrh	r1, [r3, #0]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	2300      	movs	r3, #0
 80013d8:	f7ff fbf8 	bl	8000bcc <eMBRegHoldingCB>
 80013dc:	0003      	movs	r3, r0
 80013de:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80013e0:	19bb      	adds	r3, r7, r6
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d009      	beq.n	80013fc <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80013e8:	2317      	movs	r3, #23
 80013ea:	18fc      	adds	r4, r7, r3
 80013ec:	19bb      	adds	r3, r7, r6
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 f9b7 	bl	8001764 <prveMBError2Exception>
 80013f6:	0003      	movs	r3, r0
 80013f8:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80013fa:	e014      	b.n	8001426 <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	2312      	movs	r3, #18
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	18db      	adds	r3, r3, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	18d3      	adds	r3, r2, r3
 800140c:	b29a      	uxth	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001412:	e008      	b.n	8001426 <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001414:	2317      	movs	r3, #23
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2203      	movs	r2, #3
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e003      	b.n	8001426 <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800141e:	2317      	movs	r3, #23
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2203      	movs	r2, #3
 8001424:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001426:	2317      	movs	r3, #23
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	781b      	ldrb	r3, [r3, #0]
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b007      	add	sp, #28
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001434 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800143e:	2317      	movs	r3, #23
 8001440:	18fb      	adds	r3, r7, r3
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	2b09      	cmp	r3, #9
 800144c:	d800      	bhi.n	8001450 <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 800144e:	e0d0      	b.n	80015f2 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29a      	uxth	r2, r3
 8001458:	2014      	movs	r0, #20
 800145a:	183b      	adds	r3, r7, r0
 800145c:	0212      	lsls	r2, r2, #8
 800145e:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3302      	adds	r3, #2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b299      	uxth	r1, r3
 8001468:	183b      	adds	r3, r7, r0
 800146a:	183a      	adds	r2, r7, r0
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 8001472:	183b      	adds	r3, r7, r0
 8001474:	881a      	ldrh	r2, [r3, #0]
 8001476:	0006      	movs	r6, r0
 8001478:	183b      	adds	r3, r7, r0
 800147a:	3201      	adds	r2, #1
 800147c:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3303      	adds	r3, #3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b29a      	uxth	r2, r3
 8001486:	2012      	movs	r0, #18
 8001488:	183b      	adds	r3, r7, r0
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b299      	uxth	r1, r3
 8001496:	183b      	adds	r3, r7, r0
 8001498:	183a      	adds	r2, r7, r0
 800149a:	8812      	ldrh	r2, [r2, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3305      	adds	r3, #5
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	2410      	movs	r4, #16
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3306      	adds	r3, #6
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b299      	uxth	r1, r3
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	193a      	adds	r2, r7, r4
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	3201      	adds	r2, #1
 80014ca:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3307      	adds	r3, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	240e      	movs	r4, #14
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0212      	lsls	r2, r2, #8
 80014da:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3308      	adds	r3, #8
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b299      	uxth	r1, r3
 80014e4:	193b      	adds	r3, r7, r4
 80014e6:	193a      	adds	r2, r7, r4
 80014e8:	8812      	ldrh	r2, [r2, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80014ee:	220d      	movs	r2, #13
 80014f0:	18bb      	adds	r3, r7, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	7a52      	ldrb	r2, [r2, #9]
 80014f6:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80014f8:	183b      	adds	r3, r7, r0
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d100      	bne.n	8001502 <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 8001500:	e073      	b.n	80015ea <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 8001502:	0005      	movs	r5, r0
 8001504:	183b      	adds	r3, r7, r0
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b7d      	cmp	r3, #125	; 0x7d
 800150a:	d900      	bls.n	800150e <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 800150c:	e06d      	b.n	80015ea <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 800150e:	0021      	movs	r1, r4
 8001510:	187b      	adds	r3, r7, r1
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d068      	beq.n	80015ea <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8001518:	187b      	adds	r3, r7, r1
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	2b79      	cmp	r3, #121	; 0x79
 800151e:	d864      	bhi.n	80015ea <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8001520:	187b      	adds	r3, r7, r1
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	005a      	lsls	r2, r3, #1
 8001526:	200d      	movs	r0, #13
 8001528:	183b      	adds	r3, r7, r0
 800152a:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 800152c:	429a      	cmp	r2, r3
 800152e:	d15c      	bne.n	80015ea <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	0018      	movs	r0, r3
 8001534:	300a      	adds	r0, #10
 8001536:	2216      	movs	r2, #22
 8001538:	18bc      	adds	r4, r7, r2
 800153a:	187b      	adds	r3, r7, r1
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	2310      	movs	r3, #16
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	8819      	ldrh	r1, [r3, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	f7ff fb41 	bl	8000bcc <eMBRegHoldingCB>
 800154a:	0003      	movs	r3, r0
 800154c:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 800154e:	2016      	movs	r0, #22
 8001550:	183b      	adds	r3, r7, r0
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d139      	bne.n	80015cc <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	60ba      	str	r2, [r7, #8]
 8001568:	2217      	movs	r2, #23
 800156a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8001578:	197b      	adds	r3, r7, r5
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	b2d9      	uxtb	r1, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	1c0a      	adds	r2, r1, #0
 8001586:	1892      	adds	r2, r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8001598:	183c      	adds	r4, r7, r0
 800159a:	197b      	adds	r3, r7, r5
 800159c:	881a      	ldrh	r2, [r3, #0]
 800159e:	19bb      	adds	r3, r7, r6
 80015a0:	8819      	ldrh	r1, [r3, #0]
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	2300      	movs	r3, #0
 80015a6:	f7ff fb11 	bl	8000bcc <eMBRegHoldingCB>
 80015aa:	0003      	movs	r3, r0
 80015ac:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 80015ae:	2016      	movs	r0, #22
 80015b0:	183b      	adds	r3, r7, r0
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	197b      	adds	r3, r7, r5
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	18db      	adds	r3, r3, r3
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	18d3      	adds	r3, r2, r3
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 80015cc:	2216      	movs	r2, #22
 80015ce:	18bb      	adds	r3, r7, r2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00d      	beq.n	80015f2 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80015d6:	2317      	movs	r3, #23
 80015d8:	18fc      	adds	r4, r7, r3
 80015da:	18bb      	adds	r3, r7, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 f8c0 	bl	8001764 <prveMBError2Exception>
 80015e4:	0003      	movs	r3, r0
 80015e6:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80015e8:	e003      	b.n	80015f2 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2203      	movs	r2, #3
 80015f0:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 80015f2:	2317      	movs	r3, #23
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	781b      	ldrb	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b007      	add	sp, #28
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001600 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800160a:	2317      	movs	r3, #23
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d000      	beq.n	800161c <eMBFuncReadInputRegister+0x1c>
 800161a:	e07a      	b.n	8001712 <eMBFuncReadInputRegister+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	2014      	movs	r0, #20
 8001626:	183b      	adds	r3, r7, r0
 8001628:	0212      	lsls	r2, r2, #8
 800162a:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3302      	adds	r3, #2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b299      	uxth	r1, r3
 8001634:	183b      	adds	r3, r7, r0
 8001636:	183a      	adds	r2, r7, r0
 8001638:	8812      	ldrh	r2, [r2, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800163e:	183b      	adds	r3, r7, r0
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	0005      	movs	r5, r0
 8001644:	183b      	adds	r3, r7, r0
 8001646:	3201      	adds	r2, #1
 8001648:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3303      	adds	r3, #3
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b29a      	uxth	r2, r3
 8001652:	2012      	movs	r0, #18
 8001654:	183b      	adds	r3, r7, r0
 8001656:	0212      	lsls	r2, r2, #8
 8001658:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3304      	adds	r3, #4
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b299      	uxth	r1, r3
 8001662:	183b      	adds	r3, r7, r0
 8001664:	183a      	adds	r2, r7, r0
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800166c:	183b      	adds	r3, r7, r0
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d049      	beq.n	8001708 <eMBFuncReadInputRegister+0x108>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001674:	183b      	adds	r3, r7, r0
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	2b7c      	cmp	r3, #124	; 0x7c
 800167a:	d845      	bhi.n	8001708 <eMBFuncReadInputRegister+0x108>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	60fa      	str	r2, [r7, #12]
 800168c:	2204      	movs	r2, #4
 800168e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800169c:	183b      	adds	r3, r7, r0
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b2d9      	uxtb	r1, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	60fa      	str	r2, [r7, #12]
 80016a8:	1c0a      	adds	r2, r1, #0
 80016aa:	1892      	adds	r2, r2, r2
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80016bc:	260b      	movs	r6, #11
 80016be:	19bc      	adds	r4, r7, r6
 80016c0:	183b      	adds	r3, r7, r0
 80016c2:	881a      	ldrh	r2, [r3, #0]
 80016c4:	197b      	adds	r3, r7, r5
 80016c6:	8819      	ldrh	r1, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff fa1a 	bl	8000b04 <eMBRegInputCB>
 80016d0:	0003      	movs	r3, r0
 80016d2:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80016d4:	19bb      	adds	r3, r7, r6
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <eMBFuncReadInputRegister+0xf0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80016dc:	2317      	movs	r3, #23
 80016de:	18fc      	adds	r4, r7, r3
 80016e0:	19bb      	adds	r3, r7, r6
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f83d 	bl	8001764 <prveMBError2Exception>
 80016ea:	0003      	movs	r3, r0
 80016ec:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80016ee:	e014      	b.n	800171a <eMBFuncReadInputRegister+0x11a>
            }
            else
            {
                *usLen += usRegCount * 2;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	2312      	movs	r3, #18
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	18db      	adds	r3, r3, r3
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	18d3      	adds	r3, r2, r3
 8001700:	b29a      	uxth	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001706:	e008      	b.n	800171a <eMBFuncReadInputRegister+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001708:	2317      	movs	r3, #23
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2203      	movs	r2, #3
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e003      	b.n	800171a <eMBFuncReadInputRegister+0x11a>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001712:	2317      	movs	r3, #23
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	2203      	movs	r2, #3
 8001718:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 800171a:	2317      	movs	r3, #23
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b007      	add	sp, #28
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001728 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	1c58      	adds	r0, r3, #1
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <eMBFuncReportSlaveID+0x34>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	001a      	movs	r2, r3
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <eMBFuncReportSlaveID+0x38>)
 800173e:	0019      	movs	r1, r3
 8001740:	f003 f83f 	bl	80047c2 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <eMBFuncReportSlaveID+0x34>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8001750:	2300      	movs	r3, #0
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	2000022c 	.word	0x2000022c
 8001760:	2000020c 	.word	0x2000020c

08001764 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	0002      	movs	r2, r0
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d00f      	beq.n	8001798 <prveMBError2Exception+0x34>
 8001778:	dc13      	bgt.n	80017a2 <prveMBError2Exception+0x3e>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <prveMBError2Exception+0x20>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d005      	beq.n	800178e <prveMBError2Exception+0x2a>
 8001782:	e00e      	b.n	80017a2 <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
            break;
 800178c:	e00e      	b.n	80017ac <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800178e:	230f      	movs	r3, #15
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
            break;
 8001796:	e009      	b.n	80017ac <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8001798:	230f      	movs	r3, #15
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2206      	movs	r2, #6
 800179e:	701a      	strb	r2, [r3, #0]
            break;
 80017a0:	e004      	b.n	80017ac <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80017a2:	230f      	movs	r3, #15
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2204      	movs	r2, #4
 80017a8:	701a      	strb	r2, [r3, #0]
            break;
 80017aa:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	781b      	ldrb	r3, [r3, #0]
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0004      	movs	r4, r0
 80017c4:	0008      	movs	r0, r1
 80017c6:	0011      	movs	r1, r2
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	1c22      	adds	r2, r4, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	1dbb      	adds	r3, r7, #6
 80017d2:	1c02      	adds	r2, r0, #0
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	1d7b      	adds	r3, r7, #5
 80017d8:	1c0a      	adds	r2, r1, #0
 80017da:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80017dc:	230f      	movs	r3, #15
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <eMBInit+0x40>
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80017f4:	1dbb      	adds	r3, r7, #6
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2bf7      	cmp	r3, #247	; 0xf7
 80017fa:	d904      	bls.n	8001806 <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2202      	movs	r2, #2
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e047      	b.n	8001896 <eMBInit+0xda>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <eMBInit+0xe8>)
 8001808:	1dba      	adds	r2, r7, #6
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d127      	bne.n	8001866 <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <eMBInit+0xec>)
 8001818:	4a24      	ldr	r2, [pc, #144]	; (80018ac <eMBInit+0xf0>)
 800181a:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <eMBInit+0xf4>)
 800181e:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <eMBInit+0xf8>)
 8001820:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <eMBInit+0xfc>)
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <eMBInit+0x100>)
 8001826:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <eMBInit+0x104>)
 800182a:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <eMBInit+0x108>)
 800182c:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <eMBInit+0x10c>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <eMBInit+0x110>)
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <eMBInit+0x114>)
 8001838:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <eMBInit+0x118>)
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <eMBInit+0x11c>)
 800183e:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <eMBInit+0x120>)
 8001842:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <eMBInit+0x124>)
 8001844:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <eMBInit+0xe8>)
 8001848:	7818      	ldrb	r0, [r3, #0]
 800184a:	230f      	movs	r3, #15
 800184c:	18fc      	adds	r4, r7, r3
 800184e:	2320      	movs	r3, #32
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	781d      	ldrb	r5, [r3, #0]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	1d7b      	adds	r3, r7, #5
 8001858:	7819      	ldrb	r1, [r3, #0]
 800185a:	002b      	movs	r3, r5
 800185c:	f000 faa0 	bl	8001da0 <eMBRTUInit>
 8001860:	0003      	movs	r3, r0
 8001862:	7023      	strb	r3, [r4, #0]
            break;
 8001864:	e003      	b.n	800186e <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8001866:	230f      	movs	r3, #15
 8001868:	18fb      	adds	r3, r7, r3
 800186a:	2202      	movs	r2, #2
 800186c:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 800186e:	240f      	movs	r4, #15
 8001870:	193b      	adds	r3, r7, r4
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10e      	bne.n	8001896 <eMBInit+0xda>
        {
            if( !xMBPortEventInit(  ) )
 8001878:	f000 f91e 	bl	8001ab8 <xMBPortEventInit>
 800187c:	1e03      	subs	r3, r0, #0
 800187e:	d103      	bne.n	8001888 <eMBInit+0xcc>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8001880:	193b      	adds	r3, r7, r4
 8001882:	2203      	movs	r2, #3
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e006      	b.n	8001896 <eMBInit+0xda>
            }
            else
            {
                eMBCurrentMode = eMode;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <eMBInit+0x128>)
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <eMBInit+0x12c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8001896:	230f      	movs	r3, #15
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	781b      	ldrb	r3, [r3, #0]
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b004      	add	sp, #16
 80018a2:	bdb0      	pop	{r4, r5, r7, pc}
 80018a4:	2000022e 	.word	0x2000022e
 80018a8:	20000234 	.word	0x20000234
 80018ac:	08001e3d 	.word	0x08001e3d
 80018b0:	20000238 	.word	0x20000238
 80018b4:	08001e65 	.word	0x08001e65
 80018b8:	20000230 	.word	0x20000230
 80018bc:	08001f35 	.word	0x08001f35
 80018c0:	2000023c 	.word	0x2000023c
 80018c4:	08001e85 	.word	0x08001e85
 80018c8:	20000240 	.word	0x20000240
 80018cc:	20000244 	.word	0x20000244
 80018d0:	0800201d 	.word	0x0800201d
 80018d4:	20000248 	.word	0x20000248
 80018d8:	080020f1 	.word	0x080020f1
 80018dc:	2000024c 	.word	0x2000024c
 80018e0:	080021a5 	.word	0x080021a5
 80018e4:	2000022f 	.word	0x2000022f
 80018e8:	20000006 	.word	0x20000006

080018ec <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <eMBEnable+0x34>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <eMBEnable+0x38>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <eMBEnable+0x34>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	e002      	b.n	8001914 <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	2206      	movs	r2, #6
 8001912:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	781b      	ldrb	r3, [r3, #0]
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000006 	.word	0x20000006
 8001924:	20000234 	.word	0x20000234

08001928 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800192e:	1cfb      	adds	r3, r7, #3
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001934:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <eMBPoll+0x168>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 800193c:	2306      	movs	r3, #6
 800193e:	e0a3      	b.n	8001a88 <eMBPoll+0x160>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f8da 	bl	8001afc <xMBPortEventGet>
 8001948:	0003      	movs	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	d000      	beq.n	8001950 <eMBPoll+0x28>
 800194e:	e09a      	b.n	8001a86 <eMBPoll+0x15e>
    {
        switch ( eEvent )
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d100      	bne.n	800195a <eMBPoll+0x32>
 8001958:	e08e      	b.n	8001a78 <eMBPoll+0x150>
 800195a:	dd00      	ble.n	800195e <eMBPoll+0x36>
 800195c:	e093      	b.n	8001a86 <eMBPoll+0x15e>
 800195e:	2b02      	cmp	r3, #2
 8001960:	d024      	beq.n	80019ac <eMBPoll+0x84>
 8001962:	dd00      	ble.n	8001966 <eMBPoll+0x3e>
 8001964:	e08f      	b.n	8001a86 <eMBPoll+0x15e>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d100      	bne.n	800196c <eMBPoll+0x44>
 800196a:	e087      	b.n	8001a7c <eMBPoll+0x154>
 800196c:	2b01      	cmp	r3, #1
 800196e:	d000      	beq.n	8001972 <eMBPoll+0x4a>
 8001970:	e089      	b.n	8001a86 <eMBPoll+0x15e>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8001972:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <eMBPoll+0x16c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1cfc      	adds	r4, r7, #3
 8001978:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <eMBPoll+0x170>)
 800197a:	4948      	ldr	r1, [pc, #288]	; (8001a9c <eMBPoll+0x174>)
 800197c:	4848      	ldr	r0, [pc, #288]	; (8001aa0 <eMBPoll+0x178>)
 800197e:	4798      	blx	r3
 8001980:	0003      	movs	r3, r0
 8001982:	7023      	strb	r3, [r4, #0]
            if( eStatus == MB_ENOERR )
 8001984:	1cfb      	adds	r3, r7, #3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d000      	beq.n	800198e <eMBPoll+0x66>
 800198c:	e078      	b.n	8001a80 <eMBPoll+0x158>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <eMBPoll+0x178>)
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <eMBPoll+0x17c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d004      	beq.n	80019a4 <eMBPoll+0x7c>
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <eMBPoll+0x178>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d000      	beq.n	80019a4 <eMBPoll+0x7c>
 80019a2:	e06d      	b.n	8001a80 <eMBPoll+0x158>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80019a4:	2002      	movs	r0, #2
 80019a6:	f000 f893 	bl	8001ad0 <xMBPortEventPost>
                }
            }
            break;
 80019aa:	e069      	b.n	8001a80 <eMBPoll+0x158>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80019ac:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <eMBPoll+0x174>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <eMBPoll+0x180>)
 80019b4:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <eMBPoll+0x184>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	e020      	b.n	8001a04 <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <eMBPoll+0x188>)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	00d2      	lsls	r2, r2, #3
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01e      	beq.n	8001a0c <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <eMBPoll+0x188>)
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	5cd2      	ldrb	r2, [r2, r3]
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <eMBPoll+0x180>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d10f      	bne.n	80019fe <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80019de:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <eMBPoll+0x188>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	18d3      	adds	r3, r2, r3
 80019e6:	3304      	adds	r3, #4
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <eMBPoll+0x174>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	492a      	ldr	r1, [pc, #168]	; (8001a98 <eMBPoll+0x170>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	4790      	blx	r2
 80019f4:	0003      	movs	r3, r0
 80019f6:	001a      	movs	r2, r3
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <eMBPoll+0x184>)
 80019fa:	701a      	strb	r2, [r3, #0]
                    break;
 80019fc:	e007      	b.n	8001a0e <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3301      	adds	r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	dddb      	ble.n	80019c2 <eMBPoll+0x9a>
 8001a0a:	e000      	b.n	8001a0e <eMBPoll+0xe6>
                    break;
 8001a0c:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <eMBPoll+0x178>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d036      	beq.n	8001a84 <eMBPoll+0x15c>
            {
                if( eException != MB_EX_NONE )
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <eMBPoll+0x184>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01e      	beq.n	8001a5c <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <eMBPoll+0x170>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <eMBPoll+0x180>)
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <eMBPoll+0x174>)
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <eMBPoll+0x170>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	1c58      	adds	r0, r3, #1
 8001a32:	b284      	uxth	r4, r0
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <eMBPoll+0x170>)
 8001a36:	8004      	strh	r4, [r0, #0]
 8001a38:	18cb      	adds	r3, r1, r3
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	4249      	negs	r1, r1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <eMBPoll+0x174>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <eMBPoll+0x170>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	1c59      	adds	r1, r3, #1
 8001a4e:	b288      	uxth	r0, r1
 8001a50:	4911      	ldr	r1, [pc, #68]	; (8001a98 <eMBPoll+0x170>)
 8001a52:	8008      	strh	r0, [r1, #0]
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <eMBPoll+0x184>)
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <eMBPoll+0x18c>)
 8001a5e:	681d      	ldr	r5, [r3, #0]
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <eMBPoll+0x17c>)
 8001a62:	7818      	ldrb	r0, [r3, #0]
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <eMBPoll+0x174>)
 8001a66:	6819      	ldr	r1, [r3, #0]
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <eMBPoll+0x170>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	1cfc      	adds	r4, r7, #3
 8001a6e:	001a      	movs	r2, r3
 8001a70:	47a8      	blx	r5
 8001a72:	0003      	movs	r3, r0
 8001a74:	7023      	strb	r3, [r4, #0]
            }
            break;
 8001a76:	e005      	b.n	8001a84 <eMBPoll+0x15c>

        case EV_FRAME_SENT:
            break;
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	e004      	b.n	8001a86 <eMBPoll+0x15e>
            break;
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	e002      	b.n	8001a86 <eMBPoll+0x15e>
            break;
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	e000      	b.n	8001a86 <eMBPoll+0x15e>
            break;
 8001a84:	46c0      	nop			; (mov r8, r8)
        }
    }
    return MB_ENOERR;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a90:	20000006 	.word	0x20000006
 8001a94:	2000023c 	.word	0x2000023c
 8001a98:	20000258 	.word	0x20000258
 8001a9c:	20000254 	.word	0x20000254
 8001aa0:	20000250 	.word	0x20000250
 8001aa4:	2000022e 	.word	0x2000022e
 8001aa8:	2000025a 	.word	0x2000025a
 8001aac:	2000025b 	.word	0x2000025b
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000230 	.word	0x20000230

08001ab8 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <xMBPortEventInit+0x14>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	2000025d 	.word	0x2000025d

08001ad0 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	701a      	strb	r2, [r3, #0]
    xEventInQueue = TRUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <xMBPortEventPost+0x24>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <xMBPortEventPost+0x28>)
 8001ae4:	1dfa      	adds	r2, r7, #7
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000025d 	.word	0x2000025d
 8001af8:	2000025c 	.word	0x2000025c

08001afc <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8001b04:	210f      	movs	r1, #15
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]

    if( xEventInQueue )
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <xMBPortEventGet+0x3c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <xMBPortEventGet+0x2c>
    {
        *eEvent = eQueuedEvent;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <xMBPortEventGet+0x40>)
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <xMBPortEventGet+0x3c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
    }
    return xEventHappened;
 8001b28:	230f      	movs	r3, #15
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b004      	add	sp, #16
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	2000025d 	.word	0x2000025d
 8001b3c:	2000025c 	.word	0x2000025c

08001b40 <vMBPortSerialEnable>:
#define hlpuart1 huart1
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	0002      	movs	r2, r0
 8001b48:	1dfb      	adds	r3, r7, #7
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	1dbb      	adds	r3, r7, #6
 8001b4e:	1c0a      	adds	r2, r1, #0
 8001b50:	701a      	strb	r2, [r3, #0]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00f      	beq.n	8001b7a <vMBPortSerialEnable+0x3a>
	HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_RESET);
 8001b5a:	2390      	movs	r3, #144	; 0x90
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2102      	movs	r1, #2
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 fe2f 	bl	80027c6 <HAL_GPIO_WritePin>
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2120      	movs	r1, #32
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e007      	b.n	8001b8a <vMBPortSerialEnable+0x4a>
  } else {    
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2120      	movs	r1, #32
 8001b86:	438a      	bics	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
  }
  
  if (xTxEnable) {
 8001b8a:	1dbb      	adds	r3, r7, #6
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00f      	beq.n	8001bb2 <vMBPortSerialEnable+0x72>
	HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_SET);
 8001b92:	2390      	movs	r3, #144	; 0x90
 8001b94:	05db      	lsls	r3, r3, #23
 8001b96:	2201      	movs	r2, #1
 8001b98:	2102      	movs	r1, #2
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fe13 	bl	80027c6 <HAL_GPIO_WritePin>
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_TXE);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
  } else {
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_TXE);
  }  
}
 8001bb0:	e007      	b.n	8001bc2 <vMBPortSerialEnable+0x82>
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_TXE);
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <vMBPortSerialEnable+0x8c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	438a      	bics	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000160 	.word	0x20000160

08001bd0 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	0004      	movs	r4, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	0010      	movs	r0, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	1c22      	adds	r2, r4, #0
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	1dbb      	adds	r3, r7, #6
 8001be6:	1c02      	adds	r2, r0, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	1d7b      	adds	r3, r7, #5
 8001bec:	1c0a      	adds	r2, r1, #0
 8001bee:	701a      	strb	r2, [r3, #0]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b003      	add	sp, #12
 8001bf8:	bd90      	pop	{r4, r7, pc}
	...

08001bfc <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	0002      	movs	r2, r0
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	701a      	strb	r2, [r3, #0]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ucByte, 1, 10));
 8001c08:	1df9      	adds	r1, r7, #7
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <xMBPortSerialPutByte+0x28>)
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f002 f81e 	bl	8003c50 <HAL_UART_Transmit>
 8001c14:	0003      	movs	r3, r0
 8001c16:	425a      	negs	r2, r3
 8001c18:	4153      	adcs	r3, r2
 8001c1a:	b2db      	uxtb	r3, r3
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000160 	.word	0x20000160

08001c28 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(hlpuart1.Instance->RDR & (uint8_t)0x00FF);
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <xMBPortSerialGetByte+0x20>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000160 	.word	0x20000160

08001c4c <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	0002      	movs	r2, r0
 8001c54:	1dbb      	adds	r3, r7, #6
 8001c56:	801a      	strh	r2, [r3, #0]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim2.Instance = TIM2;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <xMBPortTimersInit+0x7c>)
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	05d2      	lsls	r2, r2, #23
 8001c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8001c60:	f001 fa84 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8001c64:	0003      	movs	r3, r0
 8001c66:	4919      	ldr	r1, [pc, #100]	; (8001ccc <xMBPortTimersInit+0x80>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7fe fa57 	bl	800011c <__udivsi3>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <xMBPortTimersInit+0x7c>)
 8001c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <xMBPortTimersInit+0x7c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <xMBPortTimersInit+0x7c>)
 8001c7e:	2231      	movs	r2, #49	; 0x31
 8001c80:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <xMBPortTimersInit+0x84>)
 8001c84:	1dba      	adds	r2, r7, #6
 8001c86:	8812      	ldrh	r2, [r2, #0]
 8001c88:	801a      	strh	r2, [r3, #0]
  
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <xMBPortTimersInit+0x7c>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f001 fb51 	bl	8003334 <HAL_TIM_Base_Init>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <xMBPortTimersInit+0x4e>
  {
    return FALSE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e011      	b.n	8001cbe <xMBPortTimersInit+0x72>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca8:	187a      	adds	r2, r7, r1
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <xMBPortTimersInit+0x7c>)
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f001 ff12 	bl	8003ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	d001      	beq.n	8001cbc <xMBPortTimersInit+0x70>
  {
    return FALSE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <xMBPortTimersInit+0x72>
  }
  
  return TRUE;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	20000118 	.word	0x20000118
 8001ccc:	000f4240 	.word	0x000f4240
 8001cd0:	2000025e 	.word	0x2000025e

08001cd4 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <vMBPortTimersEnable+0x1c>)
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <vMBPortTimersEnable+0x20>)
 8001cde:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <vMBPortTimersEnable+0x24>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f001 fb76 	bl	80033d4 <HAL_TIM_Base_Start_IT>
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	2000025e 	.word	0x2000025e
 8001cf4:	20000260 	.word	0x20000260
 8001cf8:	20000118 	.word	0x20000118

08001cfc <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim2);
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <vMBPortTimersDisable+0x14>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f001 fbb2 	bl	800346c <HAL_TIM_Base_Stop_IT>
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	20000118 	.word	0x20000118

08001d14 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	000a      	movs	r2, r1
 8001d1e:	1cbb      	adds	r3, r7, #2
 8001d20:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 8001d22:	230f      	movs	r3, #15
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 8001d2a:	230e      	movs	r3, #14
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	22ff      	movs	r2, #255	; 0xff
 8001d30:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 8001d32:	e019      	b.n	8001d68 <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	200e      	movs	r0, #14
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4053      	eors	r3, r2
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8001d48:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <usMBCRC16+0x84>)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	18d3      	adds	r3, r2, r3
 8001d4e:	7819      	ldrb	r1, [r3, #0]
 8001d50:	183b      	adds	r3, r7, r0
 8001d52:	200f      	movs	r0, #15
 8001d54:	183a      	adds	r2, r7, r0
 8001d56:	7812      	ldrb	r2, [r2, #0]
 8001d58:	404a      	eors	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 8001d5c:	183b      	adds	r3, r7, r0
 8001d5e:	490f      	ldr	r1, [pc, #60]	; (8001d9c <usMBCRC16+0x88>)
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	188a      	adds	r2, r1, r2
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8001d68:	1cbb      	adds	r3, r7, #2
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	1cba      	adds	r2, r7, #2
 8001d6e:	1e59      	subs	r1, r3, #1
 8001d70:	8011      	strh	r1, [r2, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1de      	bne.n	8001d34 <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8001d76:	230f      	movs	r3, #15
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	230e      	movs	r3, #14
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	b29b      	uxth	r3, r3
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	08005514 	.word	0x08005514
 8001d9c:	08005614 	.word	0x08005614

08001da0 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0004      	movs	r4, r0
 8001da8:	0008      	movs	r0, r1
 8001daa:	603a      	str	r2, [r7, #0]
 8001dac:	0019      	movs	r1, r3
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	1c22      	adds	r2, r4, #0
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	1c02      	adds	r2, r0, #0
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	1d7b      	adds	r3, r7, #5
 8001dbc:	1c0a      	adds	r2, r1, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001dc0:	240f      	movs	r4, #15
 8001dc2:	193b      	adds	r3, r7, r4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	46c0      	nop			; (mov r8, r8)

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8001dcc:	1d7b      	adds	r3, r7, #5
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	1dbb      	adds	r3, r7, #6
 8001dd4:	7818      	ldrb	r0, [r3, #0]
 8001dd6:	0013      	movs	r3, r2
 8001dd8:	2208      	movs	r2, #8
 8001dda:	f7ff fef9 	bl	8001bd0 <xMBPortSerialInit>
 8001dde:	0003      	movs	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d003      	beq.n	8001dec <eMBRTUInit+0x4c>
    {
        eStatus = MB_EPORTERR;
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e01b      	b.n	8001e24 <eMBRTUInit+0x84>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	2396      	movs	r3, #150	; 0x96
 8001df0:	01db      	lsls	r3, r3, #7
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d902      	bls.n	8001dfc <eMBRTUInit+0x5c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8001df6:	2323      	movs	r3, #35	; 0x23
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	e007      	b.n	8001e0c <eMBRTUInit+0x6c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	0019      	movs	r1, r3
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <eMBRTUInit+0x98>)
 8001e04:	f7fe f98a 	bl	800011c <__udivsi3>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff ff1b 	bl	8001c4c <xMBPortTimersInit>
 8001e16:	0003      	movs	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d003      	beq.n	8001e24 <eMBRTUInit+0x84>
        {
            eStatus = MB_EPORTERR;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2203      	movs	r2, #3
 8001e22:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e24:	b662      	cpsie	i
}
 8001e26:	46c0      	nop			; (mov r8, r8)
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781b      	ldrb	r3, [r3, #0]
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b005      	add	sp, #20
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	00177fa0 	.word	0x00177fa0

08001e3c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	46c0      	nop			; (mov r8, r8)
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <eMBRTUStart+0x24>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff fe77 	bl	8001b40 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8001e52:	f7ff ff3f 	bl	8001cd4 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e56:	b662      	cpsie	i
}
 8001e58:	46c0      	nop			; (mov r8, r8)

    EXIT_CRITICAL_SECTION(  );
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000263 	.word	0x20000263

08001e64 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fe66 	bl	8001b40 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8001e74:	f7ff ff42 	bl	8001cfc <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e78:	b662      	cpsie	i
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
    EXIT_CRITICAL_SECTION(  );
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8001e90:	2316      	movs	r3, #22
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001e98:	2317      	movs	r3, #23
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	46c0      	nop			; (mov r8, r8)

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <eMBRTUReceive+0x98>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d905      	bls.n	8001eba <eMBRTUReceive+0x36>
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <eMBRTUReceive+0x9c>)
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <eMBRTUReceive+0xa0>)
 8001eb2:	481d      	ldr	r0, [pc, #116]	; (8001f28 <eMBRTUReceive+0xa4>)
 8001eb4:	219c      	movs	r1, #156	; 0x9c
 8001eb6:	f002 fac3 	bl	8004440 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <eMBRTUReceive+0x98>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d91d      	bls.n	8001f00 <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <eMBRTUReceive+0x98>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <eMBRTUReceive+0xa8>)
 8001ecc:	0011      	movs	r1, r2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ff20 	bl	8001d14 <usMBCRC16>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d113      	bne.n	8001f00 <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <eMBRTUReceive+0xa8>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <eMBRTUReceive+0x98>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <eMBRTUReceive+0xac>)
 8001ef4:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8001ef6:	2316      	movs	r3, #22
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	e003      	b.n	8001f08 <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 8001f00:	2317      	movs	r3, #23
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2205      	movs	r2, #5
 8001f06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f08:	b662      	cpsie	i
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8001f0c:	2317      	movs	r3, #23
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b006      	add	sp, #24
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	2000036a 	.word	0x2000036a
 8001f20:	0800541c 	.word	0x0800541c
 8001f24:	08005714 	.word	0x08005714
 8001f28:	08005444 	.word	0x08005444
 8001f2c:	20000264 	.word	0x20000264
 8001f30:	20000265 	.word	0x20000265

08001f34 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6039      	str	r1, [r7, #0]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	1dfb      	adds	r3, r7, #7
 8001f40:	1c02      	adds	r2, r0, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	1c0a      	adds	r2, r1, #0
 8001f48:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f52:	b672      	cpsid	i
}
 8001f54:	46c0      	nop			; (mov r8, r8)

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8001f56:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <eMBRTUSend+0xd4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d145      	bne.n	8001fec <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	4b29      	ldr	r3, [pc, #164]	; (800200c <eMBRTUSend+0xd8>)
 8001f66:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <eMBRTUSend+0xdc>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <eMBRTUSend+0xd8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1dfa      	adds	r2, r7, #7
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <eMBRTUSend+0xdc>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	18d3      	adds	r3, r2, r3
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <eMBRTUSend+0xdc>)
 8001f88:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <eMBRTUSend+0xd8>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <eMBRTUSend+0xdc>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	250c      	movs	r5, #12
 8001f96:	197c      	adds	r4, r7, r5
 8001f98:	0019      	movs	r1, r3
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	f7ff feba 	bl	8001d14 <usMBCRC16>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <eMBRTUSend+0xdc>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	b291      	uxth	r1, r2
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <eMBRTUSend+0xdc>)
 8001fb0:	8011      	strh	r1, [r2, #0]
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	197b      	adds	r3, r7, r5
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	b2d9      	uxtb	r1, r3
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <eMBRTUSend+0xe0>)
 8001fbc:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8001fbe:	197b      	adds	r3, r7, r5
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <eMBRTUSend+0xdc>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	b290      	uxth	r0, r2
 8001fd0:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <eMBRTUSend+0xdc>)
 8001fd2:	8010      	strh	r0, [r2, #0]
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	b2c9      	uxtb	r1, r1
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <eMBRTUSend+0xe0>)
 8001fda:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <eMBRTUSend+0xe4>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff fdab 	bl	8001b40 <vMBPortSerialEnable>
 8001fea:	e003      	b.n	8001ff4 <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 8001fec:	230f      	movs	r3, #15
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff4:	b662      	cpsie	i
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bdb0      	pop	{r4, r5, r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	20000263 	.word	0x20000263
 800200c:	20000364 	.word	0x20000364
 8002010:	20000368 	.word	0x20000368
 8002014:	20000264 	.word	0x20000264
 8002018:	20000262 	.word	0x20000262

0800201c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <xMBRTUReceiveFSM+0xb8>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <xMBRTUReceiveFSM+0x22>
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <xMBRTUReceiveFSM+0xbc>)
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <xMBRTUReceiveFSM+0xc0>)
 8002036:	482a      	ldr	r0, [pc, #168]	; (80020e0 <xMBRTUReceiveFSM+0xc4>)
 8002038:	21e6      	movs	r1, #230	; 0xe6
 800203a:	f002 fa01 	bl	8004440 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff fdf1 	bl	8001c28 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <xMBRTUReceiveFSM+0xc8>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d00b      	beq.n	8002068 <xMBRTUReceiveFSM+0x4c>
 8002050:	dc3a      	bgt.n	80020c8 <xMBRTUReceiveFSM+0xac>
 8002052:	2b02      	cmp	r3, #2
 8002054:	d020      	beq.n	8002098 <xMBRTUReceiveFSM+0x7c>
 8002056:	dc37      	bgt.n	80020c8 <xMBRTUReceiveFSM+0xac>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <xMBRTUReceiveFSM+0x46>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d006      	beq.n	800206e <xMBRTUReceiveFSM+0x52>
 8002060:	e032      	b.n	80020c8 <xMBRTUReceiveFSM+0xac>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8002062:	f7ff fe37 	bl	8001cd4 <vMBPortTimersEnable>
        break;
 8002066:	e02f      	b.n	80020c8 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8002068:	f7ff fe34 	bl	8001cd4 <vMBPortTimersEnable>
        break;
 800206c:	e02c      	b.n	80020c8 <xMBRTUReceiveFSM+0xac>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <xMBRTUReceiveFSM+0xcc>)
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <xMBRTUReceiveFSM+0xcc>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	b291      	uxth	r1, r2
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <xMBRTUReceiveFSM+0xcc>)
 8002080:	8011      	strh	r1, [r2, #0]
 8002082:	001a      	movs	r2, r3
 8002084:	1dbb      	adds	r3, r7, #6
 8002086:	7819      	ldrb	r1, [r3, #0]
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <xMBRTUReceiveFSM+0xd0>)
 800208a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <xMBRTUReceiveFSM+0xc8>)
 800208e:	2202      	movs	r2, #2
 8002090:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8002092:	f7ff fe1f 	bl	8001cd4 <vMBPortTimersEnable>
        break;
 8002096:	e017      	b.n	80020c8 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <xMBRTUReceiveFSM+0xcc>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	2bff      	cmp	r3, #255	; 0xff
 80020a0:	d80c      	bhi.n	80020bc <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <xMBRTUReceiveFSM+0xcc>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	b291      	uxth	r1, r2
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <xMBRTUReceiveFSM+0xcc>)
 80020ae:	8011      	strh	r1, [r2, #0]
 80020b0:	001a      	movs	r2, r3
 80020b2:	1dbb      	adds	r3, r7, #6
 80020b4:	7819      	ldrb	r1, [r3, #0]
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <xMBRTUReceiveFSM+0xd0>)
 80020b8:	5499      	strb	r1, [r3, r2]
 80020ba:	e002      	b.n	80020c2 <xMBRTUReceiveFSM+0xa6>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <xMBRTUReceiveFSM+0xc8>)
 80020be:	2203      	movs	r2, #3
 80020c0:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80020c2:	f7ff fe07 	bl	8001cd4 <vMBPortTimersEnable>
        break;
 80020c6:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000262 	.word	0x20000262
 80020d8:	08005460 	.word	0x08005460
 80020dc:	08005724 	.word	0x08005724
 80020e0:	08005444 	.word	0x08005444
 80020e4:	20000263 	.word	0x20000263
 80020e8:	2000036a 	.word	0x2000036a
 80020ec:	20000264 	.word	0x20000264

080020f0 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <xMBRTUTransmitFSM+0x98>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d006      	beq.n	8002114 <xMBRTUTransmitFSM+0x24>
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <xMBRTUTransmitFSM+0x9c>)
 8002108:	4a21      	ldr	r2, [pc, #132]	; (8002190 <xMBRTUTransmitFSM+0xa0>)
 800210a:	2122      	movs	r1, #34	; 0x22
 800210c:	31ff      	adds	r1, #255	; 0xff
 800210e:	4821      	ldr	r0, [pc, #132]	; (8002194 <xMBRTUTransmitFSM+0xa4>)
 8002110:	f002 f996 	bl	8004440 <__assert_func>

    switch ( eSndState )
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <xMBRTUTransmitFSM+0xa8>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <xMBRTUTransmitFSM+0x34>
 800211e:	2b01      	cmp	r3, #1
 8002120:	d005      	beq.n	800212e <xMBRTUTransmitFSM+0x3e>
 8002122:	e02b      	b.n	800217c <xMBRTUTransmitFSM+0x8c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8002124:	2100      	movs	r1, #0
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff fd0a 	bl	8001b40 <vMBPortSerialEnable>
        break;
 800212c:	e026      	b.n	800217c <xMBRTUTransmitFSM+0x8c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <xMBRTUTransmitFSM+0xac>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <xMBRTUTransmitFSM+0x70>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <xMBRTUTransmitFSM+0xb0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fd5b 	bl	8001bfc <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <xMBRTUTransmitFSM+0xb0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <xMBRTUTransmitFSM+0xb0>)
 800214e:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <xMBRTUTransmitFSM+0xac>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <xMBRTUTransmitFSM+0xac>)
 800215c:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800215e:	e00c      	b.n	800217a <xMBRTUTransmitFSM+0x8a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8002160:	1dfc      	adds	r4, r7, #7
 8002162:	2003      	movs	r0, #3
 8002164:	f7ff fcb4 	bl	8001ad0 <xMBPortEventPost>
 8002168:	0003      	movs	r3, r0
 800216a:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 800216c:	2100      	movs	r1, #0
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff fce6 	bl	8001b40 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <xMBRTUTransmitFSM+0xa8>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
        break;
 800217a:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b003      	add	sp, #12
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	20000263 	.word	0x20000263
 800218c:	0800547c 	.word	0x0800547c
 8002190:	08005738 	.word	0x08005738
 8002194:	08005444 	.word	0x08005444
 8002198:	20000262 	.word	0x20000262
 800219c:	20000368 	.word	0x20000368
 80021a0:	20000364 	.word	0x20000364

080021a4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <xMBRTUTimerT35Expired+0x84>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d029      	beq.n	800220e <xMBRTUTimerT35Expired+0x6a>
 80021ba:	dc12      	bgt.n	80021e2 <xMBRTUTimerT35Expired+0x3e>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <xMBRTUTimerT35Expired+0x22>
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <xMBRTUTimerT35Expired+0x30>
 80021c4:	e00d      	b.n	80021e2 <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 80021c6:	1dfc      	adds	r4, r7, #7
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff fc81 	bl	8001ad0 <xMBPortEventPost>
 80021ce:	0003      	movs	r3, r0
 80021d0:	7023      	strb	r3, [r4, #0]
        break;
 80021d2:	e01d      	b.n	8002210 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80021d4:	1dfc      	adds	r4, r7, #7
 80021d6:	2001      	movs	r0, #1
 80021d8:	f7ff fc7a 	bl	8001ad0 <xMBPortEventPost>
 80021dc:	0003      	movs	r3, r0
 80021de:	7023      	strb	r3, [r4, #0]
        break;
 80021e0:	e016      	b.n	8002210 <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <xMBRTUTimerT35Expired+0x84>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d011      	beq.n	8002210 <xMBRTUTimerT35Expired+0x6c>
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <xMBRTUTimerT35Expired+0x84>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d00c      	beq.n	8002210 <xMBRTUTimerT35Expired+0x6c>
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <xMBRTUTimerT35Expired+0x84>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d007      	beq.n	8002210 <xMBRTUTimerT35Expired+0x6c>
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <xMBRTUTimerT35Expired+0x88>)
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <xMBRTUTimerT35Expired+0x8c>)
 8002204:	21ad      	movs	r1, #173	; 0xad
 8002206:	0049      	lsls	r1, r1, #1
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <xMBRTUTimerT35Expired+0x90>)
 800220a:	f002 f919 	bl	8004440 <__assert_func>
        break;
 800220e:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8002210:	f7ff fd74 	bl	8001cfc <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <xMBRTUTimerT35Expired+0x84>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b003      	add	sp, #12
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	20000263 	.word	0x20000263
 800222c:	08005498 	.word	0x08005498
 8002230:	0800574c 	.word	0x0800574c
 8002234:	08005444 	.word	0x08005444

08002238 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_Init+0x24>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_Init+0x24>)
 8002242:	2110      	movs	r1, #16
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 f809 	bl	8002260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224e:	f7fe f9ad 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40022000 	.word	0x40022000

08002260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_InitTick+0x5c>)
 800226a:	681c      	ldr	r4, [r3, #0]
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_InitTick+0x60>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	0019      	movs	r1, r3
 8002272:	23fa      	movs	r3, #250	; 0xfa
 8002274:	0098      	lsls	r0, r3, #2
 8002276:	f7fd ff51 	bl	800011c <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	0019      	movs	r1, r3
 800227e:	0020      	movs	r0, r4
 8002280:	f7fd ff4c 	bl	800011c <__udivsi3>
 8002284:	0003      	movs	r3, r0
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f90b 	bl	80024a2 <HAL_SYSTICK_Config>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e00f      	b.n	80022b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d80b      	bhi.n	80022b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	2301      	movs	r3, #1
 800229e:	425b      	negs	r3, r3
 80022a0:	2200      	movs	r2, #0
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f8d8 	bl	8002458 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_InitTick+0x64>)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b003      	add	sp, #12
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	20000000 	.word	0x20000000
 80022c0:	2000008c 	.word	0x2000008c
 80022c4:	20000088 	.word	0x20000088

080022c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_IncTick+0x1c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_IncTick+0x20>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	18d2      	adds	r2, r2, r3
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_IncTick+0x20>)
 80022da:	601a      	str	r2, [r3, #0]
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	2000008c 	.word	0x2000008c
 80022e8:	2000036c 	.word	0x2000036c

080022ec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <HAL_GetTick+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	2000036c 	.word	0x2000036c

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	0002      	movs	r2, r0
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b7f      	cmp	r3, #127	; 0x7f
 8002312:	d809      	bhi.n	8002328 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	001a      	movs	r2, r3
 800231a:	231f      	movs	r3, #31
 800231c:	401a      	ands	r2, r3
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_EnableIRQ+0x30>)
 8002320:	2101      	movs	r1, #1
 8002322:	4091      	lsls	r1, r2
 8002324:	000a      	movs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	0002      	movs	r2, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b7f      	cmp	r3, #127	; 0x7f
 8002348:	d828      	bhi.n	800239c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800234a:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <__NVIC_SetPriority+0xd4>)
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b25b      	sxtb	r3, r3
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	33c0      	adds	r3, #192	; 0xc0
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	589b      	ldr	r3, [r3, r2]
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	0011      	movs	r1, r2
 8002360:	2203      	movs	r2, #3
 8002362:	400a      	ands	r2, r1
 8002364:	00d2      	lsls	r2, r2, #3
 8002366:	21ff      	movs	r1, #255	; 0xff
 8002368:	4091      	lsls	r1, r2
 800236a:	000a      	movs	r2, r1
 800236c:	43d2      	mvns	r2, r2
 800236e:	401a      	ands	r2, r3
 8002370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	401a      	ands	r2, r3
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	2303      	movs	r3, #3
 8002382:	4003      	ands	r3, r0
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002388:	481f      	ldr	r0, [pc, #124]	; (8002408 <__NVIC_SetPriority+0xd4>)
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b25b      	sxtb	r3, r3
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	430a      	orrs	r2, r1
 8002394:	33c0      	adds	r3, #192	; 0xc0
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800239a:	e031      	b.n	8002400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <__NVIC_SetPriority+0xd8>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	0019      	movs	r1, r3
 80023a4:	230f      	movs	r3, #15
 80023a6:	400b      	ands	r3, r1
 80023a8:	3b08      	subs	r3, #8
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3306      	adds	r3, #6
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	3304      	adds	r3, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1dfa      	adds	r2, r7, #7
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	0011      	movs	r1, r2
 80023bc:	2203      	movs	r2, #3
 80023be:	400a      	ands	r2, r1
 80023c0:	00d2      	lsls	r2, r2, #3
 80023c2:	21ff      	movs	r1, #255	; 0xff
 80023c4:	4091      	lsls	r1, r2
 80023c6:	000a      	movs	r2, r1
 80023c8:	43d2      	mvns	r2, r2
 80023ca:	401a      	ands	r2, r3
 80023cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	401a      	ands	r2, r3
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	2303      	movs	r3, #3
 80023de:	4003      	ands	r3, r0
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e4:	4809      	ldr	r0, [pc, #36]	; (800240c <__NVIC_SetPriority+0xd8>)
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	001c      	movs	r4, r3
 80023ec:	230f      	movs	r3, #15
 80023ee:	4023      	ands	r3, r4
 80023f0:	3b08      	subs	r3, #8
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	430a      	orrs	r2, r1
 80023f6:	3306      	adds	r3, #6
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	18c3      	adds	r3, r0, r3
 80023fc:	3304      	adds	r3, #4
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b003      	add	sp, #12
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1e5a      	subs	r2, r3, #1
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	045b      	lsls	r3, r3, #17
 8002420:	429a      	cmp	r2, r3
 8002422:	d301      	bcc.n	8002428 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002424:	2301      	movs	r3, #1
 8002426:	e010      	b.n	800244a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <SysTick_Config+0x44>)
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	3a01      	subs	r2, #1
 800242e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002430:	2301      	movs	r3, #1
 8002432:	425b      	negs	r3, r3
 8002434:	2103      	movs	r1, #3
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff7c 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x44>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x44>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	210f      	movs	r1, #15
 8002464:	187b      	adds	r3, r7, r1
 8002466:	1c02      	adds	r2, r0, #0
 8002468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	187b      	adds	r3, r7, r1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	0002      	movs	r2, r0
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff ff33 	bl	8002300 <__NVIC_EnableIRQ>
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ffaf 	bl	8002410 <SysTick_Config>
 80024b2:	0003      	movs	r3, r0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e149      	b.n	8002760 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4091      	lsls	r1, r2
 80024d6:	000a      	movs	r2, r1
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <HAL_GPIO_Init+0x28>
 80024e2:	e13a      	b.n	800275a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d005      	beq.n	80024fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2203      	movs	r2, #3
 80024f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d130      	bne.n	800255e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	43da      	mvns	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002532:	2201      	movs	r2, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	2201      	movs	r2, #1
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	4013      	ands	r3, r2
 8002566:	2b03      	cmp	r3, #3
 8002568:	d017      	beq.n	800259a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d123      	bne.n	80025ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	58d3      	ldr	r3, [r2, r3]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2207      	movs	r2, #7
 80025b8:	4013      	ands	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2107      	movs	r1, #7
 80025d2:	400b      	ands	r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	6939      	ldr	r1, [r7, #16]
 80025ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	43da      	mvns	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	401a      	ands	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d100      	bne.n	8002630 <HAL_GPIO_Init+0x174>
 800262e:	e094      	b.n	800275a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 8002636:	2101      	movs	r1, #1
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
 800263c:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002648:	4a4c      	ldr	r2, [pc, #304]	; (800277c <HAL_GPIO_Init+0x2c0>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	589b      	ldr	r3, [r3, r2]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2203      	movs	r2, #3
 800265a:	4013      	ands	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	409a      	lsls	r2, r3
 8002662:	0013      	movs	r3, r2
 8002664:	43da      	mvns	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	2390      	movs	r3, #144	; 0x90
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	429a      	cmp	r2, r3
 8002674:	d00d      	beq.n	8002692 <HAL_GPIO_Init+0x1d6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a41      	ldr	r2, [pc, #260]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x1d2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a40      	ldr	r2, [pc, #256]	; (8002784 <HAL_GPIO_Init+0x2c8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_GPIO_Init+0x1ce>
 8002686:	2302      	movs	r3, #2
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 800268a:	2305      	movs	r3, #5
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x1d8>
 8002692:	2300      	movs	r3, #0
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	2103      	movs	r1, #3
 8002698:	400a      	ands	r2, r1
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	; (800277c <HAL_GPIO_Init+0x2c0>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	035b      	lsls	r3, r3, #13
 80026ca:	4013      	ands	r3, r2
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43da      	mvns	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	039b      	lsls	r3, r3, #14
 80026f4:	4013      	ands	r3, r2
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43da      	mvns	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	029b      	lsls	r3, r3, #10
 800271e:	4013      	ands	r3, r2
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43da      	mvns	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	4013      	ands	r3, r2
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	40da      	lsrs	r2, r3
 8002768:	1e13      	subs	r3, r2, #0
 800276a:	d000      	beq.n	800276e <HAL_GPIO_Init+0x2b2>
 800276c:	e6ae      	b.n	80024cc <HAL_GPIO_Init+0x10>
  } 
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b006      	add	sp, #24
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000
 8002780:	48000400 	.word	0x48000400
 8002784:	48000800 	.word	0x48000800
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	000a      	movs	r2, r1
 8002796:	1cbb      	adds	r3, r7, #2
 8002798:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	1cba      	adds	r2, r7, #2
 80027a0:	8812      	ldrh	r2, [r2, #0]
 80027a2:	4013      	ands	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027a6:	230f      	movs	r3, #15
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e003      	b.n	80027b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b0:	230f      	movs	r3, #15
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
  }
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	0008      	movs	r0, r1
 80027d0:	0011      	movs	r1, r2
 80027d2:	1cbb      	adds	r3, r7, #2
 80027d4:	1c02      	adds	r2, r0, #0
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	1c7b      	adds	r3, r7, #1
 80027da:	1c0a      	adds	r2, r1, #0
 80027dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027de:	1c7b      	adds	r3, r7, #1
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e6:	1cbb      	adds	r3, r7, #2
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f0:	1cbb      	adds	r3, r7, #2
 80027f2:	881a      	ldrh	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	0002      	movs	r2, r0
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	1dba      	adds	r2, r7, #6
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	4013      	ands	r3, r2
 8002816:	d008      	beq.n	800282a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800281a:	1dba      	adds	r2, r7, #6
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	0018      	movs	r0, r3
 8002826:	f7fd ffef 	bl	8000808 <HAL_GPIO_EXTI_Callback>
  }
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b002      	add	sp, #8
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e03d      	b.n	80028c6 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_IWDG_Init+0x98>)
 8002850:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_IWDG_Init+0x9c>)
 8002858:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6852      	ldr	r2, [r2, #4]
 8002862:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800286e:	f7ff fd3d 	bl	80022ec <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002876:	e00e      	b.n	8002896 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002878:	f7ff fd38 	bl	80022ec <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b27      	cmp	r3, #39	; 0x27
 8002884:	d907      	bls.n	8002896 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2207      	movs	r2, #7
 800288e:	4013      	ands	r3, r2
 8002890:	d001      	beq.n	8002896 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e017      	b.n	80028c6 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2207      	movs	r2, #7
 800289e:	4013      	ands	r3, r2
 80028a0:	d1ea      	bne.n	8002878 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d005      	beq.n	80028bc <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e003      	b.n	80028c4 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <HAL_IWDG_Init+0xa0>)
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	0000cccc 	.word	0x0000cccc
 80028d4:	00005555 	.word	0x00005555
 80028d8:	0000aaaa 	.word	0x0000aaaa

080028dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e301      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d100      	bne.n	80028fa <HAL_RCC_OscConfig+0x1e>
 80028f8:	e08d      	b.n	8002a16 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028fa:	4bc3      	ldr	r3, [pc, #780]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	220c      	movs	r2, #12
 8002900:	4013      	ands	r3, r2
 8002902:	2b04      	cmp	r3, #4
 8002904:	d00e      	beq.n	8002924 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002906:	4bc0      	ldr	r3, [pc, #768]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	220c      	movs	r2, #12
 800290c:	4013      	ands	r3, r2
 800290e:	2b08      	cmp	r3, #8
 8002910:	d116      	bne.n	8002940 <HAL_RCC_OscConfig+0x64>
 8002912:	4bbd      	ldr	r3, [pc, #756]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	401a      	ands	r2, r3
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	429a      	cmp	r2, r3
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	4bb8      	ldr	r3, [pc, #736]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	4013      	ands	r3, r2
 800292e:	d100      	bne.n	8002932 <HAL_RCC_OscConfig+0x56>
 8002930:	e070      	b.n	8002a14 <HAL_RCC_OscConfig+0x138>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d000      	beq.n	800293c <HAL_RCC_OscConfig+0x60>
 800293a:	e06b      	b.n	8002a14 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e2d8      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_RCC_OscConfig+0x7c>
 8002948:	4baf      	ldr	r3, [pc, #700]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4bae      	ldr	r3, [pc, #696]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 800294e:	2180      	movs	r1, #128	; 0x80
 8002950:	0249      	lsls	r1, r1, #9
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e02f      	b.n	80029b8 <HAL_RCC_OscConfig+0xdc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0x9e>
 8002960:	4ba9      	ldr	r3, [pc, #676]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4ba8      	ldr	r3, [pc, #672]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002966:	49a9      	ldr	r1, [pc, #676]	; (8002c0c <HAL_RCC_OscConfig+0x330>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4ba6      	ldr	r3, [pc, #664]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4ba5      	ldr	r3, [pc, #660]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002972:	49a7      	ldr	r1, [pc, #668]	; (8002c10 <HAL_RCC_OscConfig+0x334>)
 8002974:	400a      	ands	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e01e      	b.n	80029b8 <HAL_RCC_OscConfig+0xdc>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10e      	bne.n	80029a0 <HAL_RCC_OscConfig+0xc4>
 8002982:	4ba1      	ldr	r3, [pc, #644]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4ba0      	ldr	r3, [pc, #640]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	02c9      	lsls	r1, r1, #11
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	4b9d      	ldr	r3, [pc, #628]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b9c      	ldr	r3, [pc, #624]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xdc>
 80029a0:	4b99      	ldr	r3, [pc, #612]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b98      	ldr	r3, [pc, #608]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 80029a6:	4999      	ldr	r1, [pc, #612]	; (8002c0c <HAL_RCC_OscConfig+0x330>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4b96      	ldr	r3, [pc, #600]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b95      	ldr	r3, [pc, #596]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	4997      	ldr	r1, [pc, #604]	; (8002c10 <HAL_RCC_OscConfig+0x334>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d014      	beq.n	80029ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fc94 	bl	80022ec <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ca:	f7ff fc8f 	bl	80022ec <HAL_GetTick>
 80029ce:	0002      	movs	r2, r0
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e28a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029dc:	4b8a      	ldr	r3, [pc, #552]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	4013      	ands	r3, r2
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0xee>
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7ff fc7f 	bl	80022ec <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff fc7a 	bl	80022ec <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e275      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	4b80      	ldr	r3, [pc, #512]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x118>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d100      	bne.n	8002a22 <HAL_RCC_OscConfig+0x146>
 8002a20:	e069      	b.n	8002af6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a22:	4b79      	ldr	r3, [pc, #484]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	220c      	movs	r2, #12
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a2c:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	220c      	movs	r2, #12
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d11c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x196>
 8002a38:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	025b      	lsls	r3, r3, #9
 8002a40:	4013      	ands	r3, r2
 8002a42:	d116      	bne.n	8002a72 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a44:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e24b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b6b      	ldr	r3, [pc, #428]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	22f8      	movs	r2, #248	; 0xf8
 8002a60:	4393      	bics	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	00da      	lsls	r2, r3, #3
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a70:	e041      	b.n	8002af6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d024      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b62      	ldr	r3, [pc, #392]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff fc31 	bl	80022ec <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a90:	f7ff fc2c 	bl	80022ec <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e227      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d0f1      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	22f8      	movs	r2, #248	; 0xf8
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00da      	lsls	r2, r3, #3
 8002abc:	4b52      	ldr	r3, [pc, #328]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e018      	b.n	8002af6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	438a      	bics	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fc0c 	bl	80022ec <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ada:	f7ff fc07 	bl	80022ec <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e202      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2202      	movs	r2, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	d1f1      	bne.n	8002ada <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2208      	movs	r2, #8
 8002afc:	4013      	ands	r3, r2
 8002afe:	d036      	beq.n	8002b6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d019      	beq.n	8002b3c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b08:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	430a      	orrs	r2, r1
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7ff fbea 	bl	80022ec <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7ff fbe5 	bl	80022ec <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1e0      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d0f1      	beq.n	8002b1e <HAL_RCC_OscConfig+0x242>
 8002b3a:	e018      	b.n	8002b6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3c:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	438a      	bics	r2, r1
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff fbd0 	bl	80022ec <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7ff fbcb 	bl	80022ec <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1c6      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2202      	movs	r2, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d1f1      	bne.n	8002b52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	d100      	bne.n	8002b7a <HAL_RCC_OscConfig+0x29e>
 8002b78:	e0b4      	b.n	8002ce4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	201f      	movs	r0, #31
 8002b7c:	183b      	adds	r3, r7, r0
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d110      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0549      	lsls	r1, r1, #21
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	055b      	lsls	r3, r3, #21
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_RCC_OscConfig+0x338>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d11a      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_RCC_OscConfig+0x338>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_RCC_OscConfig+0x338>)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0049      	lsls	r1, r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bca:	f7ff fb8f 	bl	80022ec <HAL_GetTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7ff fb8a 	bl	80022ec <HAL_GetTick>
 8002bd8:	0002      	movs	r2, r0
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e185      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x338>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10e      	bne.n	8002c18 <HAL_RCC_OscConfig+0x33c>
 8002bfa:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	4b02      	ldr	r3, [pc, #8]	; (8002c08 <HAL_RCC_OscConfig+0x32c>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	621a      	str	r2, [r3, #32]
 8002c06:	e035      	b.n	8002c74 <HAL_RCC_OscConfig+0x398>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	fffeffff 	.word	0xfffeffff
 8002c10:	fffbffff 	.word	0xfffbffff
 8002c14:	40007000 	.word	0x40007000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x35e>
 8002c20:	4bb6      	ldr	r3, [pc, #728]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	4bb5      	ldr	r3, [pc, #724]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	621a      	str	r2, [r3, #32]
 8002c2c:	4bb3      	ldr	r3, [pc, #716]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	4bb2      	ldr	r3, [pc, #712]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c32:	2104      	movs	r1, #4
 8002c34:	438a      	bics	r2, r1
 8002c36:	621a      	str	r2, [r3, #32]
 8002c38:	e01c      	b.n	8002c74 <HAL_RCC_OscConfig+0x398>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b05      	cmp	r3, #5
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x380>
 8002c42:	4bae      	ldr	r3, [pc, #696]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	4bad      	ldr	r3, [pc, #692]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c48:	2104      	movs	r1, #4
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	621a      	str	r2, [r3, #32]
 8002c4e:	4bab      	ldr	r3, [pc, #684]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	4baa      	ldr	r3, [pc, #680]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	430a      	orrs	r2, r1
 8002c58:	621a      	str	r2, [r3, #32]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0x398>
 8002c5c:	4ba7      	ldr	r3, [pc, #668]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	4ba6      	ldr	r3, [pc, #664]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c62:	2101      	movs	r1, #1
 8002c64:	438a      	bics	r2, r1
 8002c66:	621a      	str	r2, [r3, #32]
 8002c68:	4ba4      	ldr	r3, [pc, #656]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	4ba3      	ldr	r3, [pc, #652]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c6e:	2104      	movs	r1, #4
 8002c70:	438a      	bics	r2, r1
 8002c72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d014      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fb36 	bl	80022ec <HAL_GetTick>
 8002c80:	0003      	movs	r3, r0
 8002c82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	e009      	b.n	8002c9a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7ff fb31 	bl	80022ec <HAL_GetTick>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	4a9b      	ldr	r2, [pc, #620]	; (8002f00 <HAL_RCC_OscConfig+0x624>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e12b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	4b98      	ldr	r3, [pc, #608]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x3aa>
 8002ca4:	e013      	b.n	8002cce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7ff fb21 	bl	80022ec <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cae:	e009      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fb1c 	bl	80022ec <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	4a91      	ldr	r2, [pc, #580]	; (8002f00 <HAL_RCC_OscConfig+0x624>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e116      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cce:	231f      	movs	r3, #31
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd8:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	4b87      	ldr	r3, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002cde:	4989      	ldr	r1, [pc, #548]	; (8002f04 <HAL_RCC_OscConfig+0x628>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2210      	movs	r2, #16
 8002cea:	4013      	ands	r3, r2
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d12a      	bne.n	8002d4c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfa:	4b80      	ldr	r3, [pc, #512]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002d02:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b7d      	ldr	r3, [pc, #500]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff faed 	bl	80022ec <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d18:	f7ff fae8 	bl	80022ec <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0e3      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d2a:	4b74      	ldr	r3, [pc, #464]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	2202      	movs	r2, #2
 8002d30:	4013      	ands	r3, r2
 8002d32:	d0f1      	beq.n	8002d18 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d34:	4b71      	ldr	r3, [pc, #452]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	22f8      	movs	r2, #248	; 0xf8
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	00da      	lsls	r2, r3, #3
 8002d44:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4a:	e034      	b.n	8002db6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	3305      	adds	r3, #5
 8002d52:	d111      	bne.n	8002d78 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d54:	4b69      	ldr	r3, [pc, #420]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	22f8      	movs	r2, #248	; 0xf8
 8002d66:	4393      	bics	r3, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	00da      	lsls	r2, r3, #3
 8002d70:	4b62      	ldr	r3, [pc, #392]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d72:	430a      	orrs	r2, r1
 8002d74:	635a      	str	r2, [r3, #52]	; 0x34
 8002d76:	e01e      	b.n	8002db6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d78:	4b60      	ldr	r3, [pc, #384]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d7c:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d7e:	2104      	movs	r1, #4
 8002d80:	430a      	orrs	r2, r1
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d84:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d88:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7ff faac 	bl	80022ec <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d9a:	f7ff faa7 	bl	80022ec <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0a2      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	2202      	movs	r2, #2
 8002db2:	4013      	ands	r3, r2
 8002db4:	d1f1      	bne.n	8002d9a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d100      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x4e4>
 8002dbe:	e097      	b.n	8002ef0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	220c      	movs	r2, #12
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d100      	bne.n	8002dce <HAL_RCC_OscConfig+0x4f2>
 8002dcc:	e06b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d14c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	4b49      	ldr	r3, [pc, #292]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b48      	ldr	r3, [pc, #288]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002ddc:	494a      	ldr	r1, [pc, #296]	; (8002f08 <HAL_RCC_OscConfig+0x62c>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff fa83 	bl	80022ec <HAL_GetTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7ff fa7e 	bl	80022ec <HAL_GetTick>
 8002df0:	0002      	movs	r2, r0
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e079      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	049b      	lsls	r3, r3, #18
 8002e06:	4013      	ands	r3, r2
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0a:	4b3c      	ldr	r3, [pc, #240]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	220f      	movs	r2, #15
 8002e10:	4393      	bics	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a3a      	ldr	r2, [pc, #232]	; (8002f0c <HAL_RCC_OscConfig+0x630>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	0449      	lsls	r1, r1, #17
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7ff fa51 	bl	80022ec <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7ff fa4c 	bl	80022ec <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e047      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	049b      	lsls	r3, r3, #18
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x574>
 8002e6e:	e03f      	b.n	8002ef0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e76:	4924      	ldr	r1, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x62c>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7ff fa36 	bl	80022ec <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7ff fa31 	bl	80022ec <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e02c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	049b      	lsls	r3, r3, #18
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5aa>
 8002ea4:	e024      	b.n	8002ef0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e01f      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x620>)
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	025b      	lsls	r3, r3, #9
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d10e      	bne.n	8002eec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	23f0      	movs	r3, #240	; 0xf0
 8002ee0:	039b      	lsls	r3, r3, #14
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b008      	add	sp, #32
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	40021000 	.word	0x40021000
 8002f00:	00001388 	.word	0x00001388
 8002f04:	efffffff 	.word	0xefffffff
 8002f08:	feffffff 	.word	0xfeffffff
 8002f0c:	ffc2ffff 	.word	0xffc2ffff

08002f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0b3      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d911      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b58      	ldr	r3, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4393      	bics	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	4b55      	ldr	r3, [pc, #340]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e09a      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2204      	movs	r2, #4
 8002f66:	4013      	ands	r3, r2
 8002f68:	d006      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002f70:	21e0      	movs	r1, #224	; 0xe0
 8002f72:	00c9      	lsls	r1, r1, #3
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	22f0      	movs	r2, #240	; 0xf0
 8002f7e:	4393      	bics	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d114      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06e      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	049b      	lsls	r3, r3, #18
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e062      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e05b      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	4393      	bics	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7ff f980 	bl	80022ec <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff2:	f7ff f97b 	bl	80022ec <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <HAL_RCC_ClockConfig+0x18c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e042      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	220c      	movs	r2, #12
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1ec      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	4013      	ands	r3, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d211      	bcs.n	800304a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	4393      	bics	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x184>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e020      	b.n	800308c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2204      	movs	r2, #4
 8003050:	4013      	ands	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_RCC_ClockConfig+0x190>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003068:	f000 f820 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306c:	0001      	movs	r1, r0
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x188>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	220f      	movs	r2, #15
 8003076:	4013      	ands	r3, r2
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_RCC_ClockConfig+0x194>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	000a      	movs	r2, r1
 800307e:	40da      	lsrs	r2, r3
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x198>)
 8003082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003084:	2003      	movs	r0, #3
 8003086:	f7ff f8eb 	bl	8002260 <HAL_InitTick>
  
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	00001388 	.word	0x00001388
 80030a0:	fffff8ff 	.word	0xfffff8ff
 80030a4:	080054fc 	.word	0x080054fc
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	220c      	movs	r2, #12
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x30>
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x36>
 80030da:	e02c      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030de:	613b      	str	r3, [r7, #16]
      break;
 80030e0:	e02c      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0c9b      	lsrs	r3, r3, #18
 80030e6:	220f      	movs	r2, #15
 80030e8:	4013      	ands	r3, r2
 80030ea:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
 80030ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	220f      	movs	r2, #15
 80030f6:	4013      	ands	r3, r2
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_RCC_GetSysClockFreq+0xa8>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	4013      	ands	r3, r2
 8003106:	d009      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4810      	ldr	r0, [pc, #64]	; (800314c <HAL_RCC_GetSysClockFreq+0xa0>)
 800310c:	f7fd f806 	bl	800011c <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4353      	muls	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e009      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	000a      	movs	r2, r1
 8003120:	0152      	lsls	r2, r2, #5
 8003122:	1a52      	subs	r2, r2, r1
 8003124:	0193      	lsls	r3, r2, #6
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	185b      	adds	r3, r3, r1
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	613b      	str	r3, [r7, #16]
      break;
 8003134:	e002      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003138:	613b      	str	r3, [r7, #16]
      break;
 800313a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800313c:	693b      	ldr	r3, [r7, #16]
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b006      	add	sp, #24
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	40021000 	.word	0x40021000
 800314c:	007a1200 	.word	0x007a1200
 8003150:	08005764 	.word	0x08005764
 8003154:	08005774 	.word	0x08005774

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b02      	ldr	r3, [pc, #8]	; (8003168 <HAL_RCC_GetHCLKFreq+0x10>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003170:	f7ff fff2 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003174:	0001      	movs	r1, r0
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	2207      	movs	r2, #7
 800317e:	4013      	ands	r3, r2
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	40d9      	lsrs	r1, r3
 8003186:	000b      	movs	r3, r1
}    
 8003188:	0018      	movs	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	40021000 	.word	0x40021000
 8003194:	0800550c 	.word	0x0800550c

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	025b      	lsls	r3, r3, #9
 80031b0:	4013      	ands	r3, r2
 80031b2:	d100      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031b4:	e08e      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2017      	movs	r0, #23
 80031b8:	183b      	adds	r3, r7, r0
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031be:	4b57      	ldr	r3, [pc, #348]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	055b      	lsls	r3, r3, #21
 80031c6:	4013      	ands	r3, r2
 80031c8:	d110      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0549      	lsls	r1, r1, #21
 80031d4:	430a      	orrs	r2, r1
 80031d6:	61da      	str	r2, [r3, #28]
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	055b      	lsls	r3, r3, #21
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e6:	183b      	adds	r3, r7, r0
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	d11a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b48      	ldr	r3, [pc, #288]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	0049      	lsls	r1, r1, #1
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7ff f871 	bl	80022ec <HAL_GetTick>
 800320a:	0003      	movs	r3, r0
 800320c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	e008      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7ff f86c 	bl	80022ec <HAL_GetTick>
 8003214:	0002      	movs	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e077      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d0f0      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	23c0      	movs	r3, #192	; 0xc0
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d034      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	23c0      	movs	r3, #192	; 0xc0
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4013      	ands	r3, r2
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	d02c      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003256:	4013      	ands	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0249      	lsls	r1, r1, #9
 8003264:	430a      	orrs	r2, r1
 8003266:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800326a:	6a1a      	ldr	r2, [r3, #32]
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800326e:	492e      	ldr	r1, [pc, #184]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003270:	400a      	ands	r2, r1
 8003272:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7ff f833 	bl	80022ec <HAL_GetTick>
 8003286:	0003      	movs	r3, r0
 8003288:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	e009      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7ff f82e 	bl	80022ec <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	4a25      	ldr	r2, [pc, #148]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e038      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d0f0      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032be:	2317      	movs	r3, #23
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ce:	4918      	ldr	r1, [pc, #96]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2201      	movs	r2, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	2203      	movs	r2, #3
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2220      	movs	r2, #32
 80032f8:	4013      	ands	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	2210      	movs	r2, #16
 8003302:	4393      	bics	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800330c:	430a      	orrs	r2, r1
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	fffffcff 	.word	0xfffffcff
 8003328:	fffeffff 	.word	0xfffeffff
 800332c:	00001388 	.word	0x00001388
 8003330:	efffffff 	.word	0xefffffff

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e042      	b.n	80033cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223d      	movs	r2, #61	; 0x3d
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	223c      	movs	r2, #60	; 0x3c
 8003356:	2100      	movs	r1, #0
 8003358:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f7fd f949 	bl	80005f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223d      	movs	r2, #61	; 0x3d
 8003366:	2102      	movs	r1, #2
 8003368:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	0019      	movs	r1, r3
 8003374:	0010      	movs	r0, r2
 8003376:	f000 fa91 	bl	800389c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2246      	movs	r2, #70	; 0x46
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	223e      	movs	r2, #62	; 0x3e
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	223f      	movs	r2, #63	; 0x3f
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2241      	movs	r2, #65	; 0x41
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2242      	movs	r2, #66	; 0x42
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2243      	movs	r2, #67	; 0x43
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2244      	movs	r2, #68	; 0x44
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2245      	movs	r2, #69	; 0x45
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	223d      	movs	r2, #61	; 0x3d
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	223d      	movs	r2, #61	; 0x3d
 80033e0:	5c9b      	ldrb	r3, [r3, r2]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d001      	beq.n	80033ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e036      	b.n	800345a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	223d      	movs	r2, #61	; 0x3d
 80033f0:	2102      	movs	r1, #2
 80033f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	430a      	orrs	r2, r1
 8003402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIM_Base_Start_IT+0x90>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00a      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x50>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	429a      	cmp	r2, r3
 8003418:	d004      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x50>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_TIM_Base_Start_IT+0x94>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d111      	bne.n	8003448 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2207      	movs	r2, #7
 800342c:	4013      	ands	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d010      	beq.n	8003458 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	e007      	b.n	8003458 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2101      	movs	r1, #1
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400

0800346c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2101      	movs	r1, #1
 8003480:	438a      	bics	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_TIM_Base_Stop_IT+0x54>)
 800348c:	4013      	ands	r3, r2
 800348e:	d10d      	bne.n	80034ac <HAL_TIM_Base_Stop_IT+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <HAL_TIM_Base_Stop_IT+0x58>)
 8003498:	4013      	ands	r3, r2
 800349a:	d107      	bne.n	80034ac <HAL_TIM_Base_Stop_IT+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	438a      	bics	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	223d      	movs	r2, #61	; 0x3d
 80034b0:	2101      	movs	r1, #1
 80034b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	00001111 	.word	0x00001111
 80034c4:	00000444 	.word	0x00000444

080034c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2202      	movs	r2, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d021      	beq.n	800352c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	d01d      	beq.n	800352c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4252      	negs	r2, r2
 80034f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2203      	movs	r2, #3
 8003508:	4013      	ands	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 f9ac 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003514:	e007      	b.n	8003526 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f99f 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f000 f9ab 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	d022      	beq.n	800357a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2204      	movs	r2, #4
 8003538:	4013      	ands	r3, r2
 800353a:	d01e      	beq.n	800357a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2205      	movs	r2, #5
 8003542:	4252      	negs	r2, r2
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	23c0      	movs	r3, #192	; 0xc0
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f985 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003562:	e007      	b.n	8003574 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f978 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f984 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2208      	movs	r2, #8
 800357e:	4013      	ands	r3, r2
 8003580:	d021      	beq.n	80035c6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	d01d      	beq.n	80035c6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2209      	movs	r2, #9
 8003590:	4252      	negs	r2, r2
 8003592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2204      	movs	r2, #4
 8003598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2203      	movs	r2, #3
 80035a2:	4013      	ands	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 f95f 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80035ae:	e007      	b.n	80035c0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 f952 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f95e 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2210      	movs	r2, #16
 80035ca:	4013      	ands	r3, r2
 80035cc:	d022      	beq.n	8003614 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2210      	movs	r2, #16
 80035d2:	4013      	ands	r3, r2
 80035d4:	d01e      	beq.n	8003614 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2211      	movs	r2, #17
 80035dc:	4252      	negs	r2, r2
 80035de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2208      	movs	r2, #8
 80035e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	23c0      	movs	r3, #192	; 0xc0
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4013      	ands	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f938 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80035fc:	e007      	b.n	800360e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f92b 	bl	800385c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f937 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2201      	movs	r2, #1
 8003618:	4013      	ands	r3, r2
 800361a:	d00c      	beq.n	8003636 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	4013      	ands	r3, r2
 8003622:	d008      	beq.n	8003636 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2202      	movs	r2, #2
 800362a:	4252      	negs	r2, r2
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f90b 	bl	800384c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	4013      	ands	r3, r2
 800363c:	d00c      	beq.n	8003658 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	4013      	ands	r3, r2
 8003644:	d008      	beq.n	8003658 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2281      	movs	r2, #129	; 0x81
 800364c:	4252      	negs	r2, r2
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 faa0 	bl	8003b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	4013      	ands	r3, r2
 800365e:	d00c      	beq.n	800367a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	4013      	ands	r3, r2
 8003666:	d008      	beq.n	800367a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2241      	movs	r2, #65	; 0x41
 800366e:	4252      	negs	r2, r2
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 f909 	bl	800388c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2220      	movs	r2, #32
 800367e:	4013      	ands	r3, r2
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	4013      	ands	r3, r2
 8003688:	d008      	beq.n	800369c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2221      	movs	r2, #33	; 0x21
 8003690:	4252      	negs	r2, r2
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 fa76 	bl	8003b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b004      	add	sp, #16
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	230f      	movs	r3, #15
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	223c      	movs	r2, #60	; 0x3c
 80036ba:	5c9b      	ldrb	r3, [r3, r2]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_ConfigClockSource+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0bc      	b.n	800383e <HAL_TIM_ConfigClockSource+0x19a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	223c      	movs	r2, #60	; 0x3c
 80036c8:	2101      	movs	r1, #1
 80036ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223d      	movs	r2, #61	; 0x3d
 80036d0:	2102      	movs	r1, #2
 80036d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2277      	movs	r2, #119	; 0x77
 80036e0:	4393      	bics	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_TIM_ConfigClockSource+0x1a4>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	0192      	lsls	r2, r2, #6
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xde>
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	0192      	lsls	r2, r2, #6
 8003704:	4293      	cmp	r3, r2
 8003706:	d900      	bls.n	800370a <HAL_TIM_ConfigClockSource+0x66>
 8003708:	e088      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	0152      	lsls	r2, r2, #5
 800370e:	4293      	cmp	r3, r2
 8003710:	d100      	bne.n	8003714 <HAL_TIM_ConfigClockSource+0x70>
 8003712:	e088      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x182>
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0152      	lsls	r2, r2, #5
 8003718:	4293      	cmp	r3, r2
 800371a:	d900      	bls.n	800371e <HAL_TIM_ConfigClockSource+0x7a>
 800371c:	e07e      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 800371e:	2b70      	cmp	r3, #112	; 0x70
 8003720:	d018      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0xb0>
 8003722:	d900      	bls.n	8003726 <HAL_TIM_ConfigClockSource+0x82>
 8003724:	e07a      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 8003726:	2b60      	cmp	r3, #96	; 0x60
 8003728:	d04f      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x126>
 800372a:	d900      	bls.n	800372e <HAL_TIM_ConfigClockSource+0x8a>
 800372c:	e076      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 800372e:	2b50      	cmp	r3, #80	; 0x50
 8003730:	d03b      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x106>
 8003732:	d900      	bls.n	8003736 <HAL_TIM_ConfigClockSource+0x92>
 8003734:	e072      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d057      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x146>
 800373a:	d900      	bls.n	800373e <HAL_TIM_ConfigClockSource+0x9a>
 800373c:	e06e      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d063      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x166>
 8003742:	d86b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 8003744:	2b20      	cmp	r3, #32
 8003746:	d060      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x166>
 8003748:	d868      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x178>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d05d      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x166>
 800374e:	2b10      	cmp	r3, #16
 8003750:	d05b      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x166>
 8003752:	e063      	b.n	800381c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003764:	f000 f998 	bl	8003a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2277      	movs	r2, #119	; 0x77
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
      break;
 8003780:	e052      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003792:	f000 f981 	bl	8003a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2180      	movs	r1, #128	; 0x80
 80037a2:	01c9      	lsls	r1, r1, #7
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
      break;
 80037a8:	e03e      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	001a      	movs	r2, r3
 80037b8:	f000 f8f4 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2150      	movs	r1, #80	; 0x50
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f94e 	bl	8003a64 <TIM_ITRx_SetConfig>
      break;
 80037c8:	e02e      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	001a      	movs	r2, r3
 80037d8:	f000 f912 	bl	8003a00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2160      	movs	r1, #96	; 0x60
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f93e 	bl	8003a64 <TIM_ITRx_SetConfig>
      break;
 80037e8:	e01e      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	001a      	movs	r2, r3
 80037f8:	f000 f8d4 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	0018      	movs	r0, r3
 8003804:	f000 f92e 	bl	8003a64 <TIM_ITRx_SetConfig>
      break;
 8003808:	e00e      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	0019      	movs	r1, r3
 8003814:	0010      	movs	r0, r2
 8003816:	f000 f925 	bl	8003a64 <TIM_ITRx_SetConfig>
      break;
 800381a:	e005      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800381c:	230f      	movs	r3, #15
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
      break;
 8003824:	e000      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003826:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	223d      	movs	r2, #61	; 0x3d
 800382c:	2101      	movs	r1, #1
 800382e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	223c      	movs	r2, #60	; 0x3c
 8003834:	2100      	movs	r1, #0
 8003836:	5499      	strb	r1, [r3, r2]

  return status;
 8003838:	230f      	movs	r3, #15
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	ffff00ff 	.word	0xffff00ff

0800384c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a37      	ldr	r2, [pc, #220]	; (800398c <TIM_Base_SetConfig+0xf0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d008      	beq.n	80038c6 <TIM_Base_SetConfig+0x2a>
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2380      	movs	r3, #128	; 0x80
 80038b8:	05db      	lsls	r3, r3, #23
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0x2a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a33      	ldr	r2, [pc, #204]	; (8003990 <TIM_Base_SetConfig+0xf4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2270      	movs	r2, #112	; 0x70
 80038ca:	4393      	bics	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a2c      	ldr	r2, [pc, #176]	; (800398c <TIM_Base_SetConfig+0xf0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d014      	beq.n	800390a <TIM_Base_SetConfig+0x6e>
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	05db      	lsls	r3, r3, #23
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d00f      	beq.n	800390a <TIM_Base_SetConfig+0x6e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a28      	ldr	r2, [pc, #160]	; (8003990 <TIM_Base_SetConfig+0xf4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_Base_SetConfig+0x6e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a27      	ldr	r2, [pc, #156]	; (8003994 <TIM_Base_SetConfig+0xf8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_Base_SetConfig+0x6e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a26      	ldr	r2, [pc, #152]	; (8003998 <TIM_Base_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0x6e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a25      	ldr	r2, [pc, #148]	; (800399c <TIM_Base_SetConfig+0x100>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <TIM_Base_SetConfig+0x104>)
 800390e:	4013      	ands	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	4393      	bics	r3, r2
 8003922:	001a      	movs	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a11      	ldr	r2, [pc, #68]	; (800398c <TIM_Base_SetConfig+0xf0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <TIM_Base_SetConfig+0xbe>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a12      	ldr	r2, [pc, #72]	; (8003998 <TIM_Base_SetConfig+0xfc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_Base_SetConfig+0xbe>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a11      	ldr	r2, [pc, #68]	; (800399c <TIM_Base_SetConfig+0x100>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d103      	bne.n	8003962 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	2b01      	cmp	r3, #1
 8003972:	d106      	bne.n	8003982 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2201      	movs	r2, #1
 800397a:	4393      	bics	r3, r2
 800397c:	001a      	movs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]
  }
}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b004      	add	sp, #16
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400
 8003994:	40002000 	.word	0x40002000
 8003998:	40014400 	.word	0x40014400
 800399c:	40014800 	.word	0x40014800
 80039a0:	fffffcff 	.word	0xfffffcff

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	2201      	movs	r2, #1
 80039bc:	4393      	bics	r3, r2
 80039be:	001a      	movs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	22f0      	movs	r2, #240	; 0xf0
 80039ce:	4393      	bics	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	220a      	movs	r2, #10
 80039e0:	4393      	bics	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b006      	add	sp, #24
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	2210      	movs	r2, #16
 8003a18:	4393      	bics	r3, r2
 8003a1a:	001a      	movs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <TIM_TI2_ConfigInputStage+0x60>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	22a0      	movs	r2, #160	; 0xa0
 8003a3c:	4393      	bics	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b006      	add	sp, #24
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	ffff0fff 	.word	0xffff0fff

08003a64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2270      	movs	r2, #112	; 0x70
 8003a78:	4393      	bics	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	2207      	movs	r2, #7
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <TIM_ETR_SetConfig+0x3c>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b006      	add	sp, #24
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	ffff00ff 	.word	0xffff00ff

08003ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	223c      	movs	r2, #60	; 0x3c
 8003ae6:	5c9b      	ldrb	r3, [r3, r2]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e042      	b.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	223c      	movs	r2, #60	; 0x3c
 8003af4:	2101      	movs	r1, #1
 8003af6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	223d      	movs	r2, #61	; 0x3d
 8003afc:	2102      	movs	r1, #2
 8003afe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2270      	movs	r2, #112	; 0x70
 8003b14:	4393      	bics	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00a      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	05db      	lsls	r3, r3, #23
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d004      	beq.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10c      	bne.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	4393      	bics	r3, r2
 8003b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	223d      	movs	r2, #61	; 0x3d
 8003b68:	2101      	movs	r1, #1
 8003b6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	223c      	movs	r2, #60	; 0x3c
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40000400 	.word	0x40000400

08003b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e044      	b.n	8003c44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2278      	movs	r2, #120	; 0x78
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f7fc fd35 	bl	800063c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2224      	movs	r2, #36	; 0x24
 8003bd6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2101      	movs	r1, #1
 8003be4:	438a      	bics	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f9f4 	bl	8003fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f8c8 	bl	8003d90 <UART_SetConfig>
 8003c00:	0003      	movs	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e01c      	b.n	8003c44 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	490d      	ldr	r1, [pc, #52]	; (8003c4c <HAL_UART_Init+0xa4>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	212a      	movs	r1, #42	; 0x2a
 8003c26:	438a      	bics	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 fa83 	bl	8004148 <UART_CheckIdleState>
 8003c42:	0003      	movs	r3, r0
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	ffffb7ff 	.word	0xffffb7ff

08003c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d000      	beq.n	8003c6a <HAL_UART_Transmit+0x1a>
 8003c68:	e08d      	b.n	8003d86 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_UART_Transmit+0x28>
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e085      	b.n	8003d88 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	015b      	lsls	r3, r3, #5
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d109      	bne.n	8003c9c <HAL_UART_Transmit+0x4c>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4013      	ands	r3, r2
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e075      	b.n	8003d88 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2284      	movs	r2, #132	; 0x84
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2221      	movs	r2, #33	; 0x21
 8003ca8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003caa:	f7fe fb1f 	bl	80022ec <HAL_GetTick>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1dba      	adds	r2, r7, #6
 8003cb6:	2150      	movs	r1, #80	; 0x50
 8003cb8:	8812      	ldrh	r2, [r2, #0]
 8003cba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1dba      	adds	r2, r7, #6
 8003cc0:	2152      	movs	r1, #82	; 0x52
 8003cc2:	8812      	ldrh	r2, [r2, #0]
 8003cc4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	015b      	lsls	r3, r3, #5
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d108      	bne.n	8003ce4 <HAL_UART_Transmit+0x94>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cec:	e030      	b.n	8003d50 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	0013      	movs	r3, r2
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	f000 facc 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 8003d00:	1e03      	subs	r3, r0, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e03c      	b.n	8003d88 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	05d2      	lsls	r2, r2, #23
 8003d1e:	0dd2      	lsrs	r2, r2, #23
 8003d20:	b292      	uxth	r2, r2
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3302      	adds	r3, #2
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e008      	b.n	8003d3e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	b292      	uxth	r2, r2
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2252      	movs	r2, #82	; 0x52
 8003d42:	5a9b      	ldrh	r3, [r3, r2]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b299      	uxth	r1, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2252      	movs	r2, #82	; 0x52
 8003d4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2252      	movs	r2, #82	; 0x52
 8003d54:	5a9b      	ldrh	r3, [r3, r2]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1c8      	bne.n	8003cee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	0013      	movs	r3, r2
 8003d66:	2200      	movs	r2, #0
 8003d68:	2140      	movs	r1, #64	; 0x40
 8003d6a:	f000 fa95 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d004      	beq.n	8003d7c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e005      	b.n	8003d88 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e000      	b.n	8003d88 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
  }
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b008      	add	sp, #32
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d98:	231e      	movs	r3, #30
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a83      	ldr	r2, [pc, #524]	; (8003fcc <UART_SetConfig+0x23c>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a7e      	ldr	r2, [pc, #504]	; (8003fd0 <UART_SetConfig+0x240>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a75      	ldr	r2, [pc, #468]	; (8003fd4 <UART_SetConfig+0x244>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e0c:	4b72      	ldr	r3, [pc, #456]	; (8003fd8 <UART_SetConfig+0x248>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	2203      	movs	r2, #3
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d00d      	beq.n	8003e34 <UART_SetConfig+0xa4>
 8003e18:	d81b      	bhi.n	8003e52 <UART_SetConfig+0xc2>
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d014      	beq.n	8003e48 <UART_SetConfig+0xb8>
 8003e1e:	d818      	bhi.n	8003e52 <UART_SetConfig+0xc2>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <UART_SetConfig+0x9a>
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d00a      	beq.n	8003e3e <UART_SetConfig+0xae>
 8003e28:	e013      	b.n	8003e52 <UART_SetConfig+0xc2>
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e012      	b.n	8003e5a <UART_SetConfig+0xca>
 8003e34:	231f      	movs	r3, #31
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2202      	movs	r2, #2
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e00d      	b.n	8003e5a <UART_SetConfig+0xca>
 8003e3e:	231f      	movs	r3, #31
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2204      	movs	r2, #4
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e008      	b.n	8003e5a <UART_SetConfig+0xca>
 8003e48:	231f      	movs	r3, #31
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e003      	b.n	8003e5a <UART_SetConfig+0xca>
 8003e52:	231f      	movs	r3, #31
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2210      	movs	r2, #16
 8003e58:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d15c      	bne.n	8003f20 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8003e66:	231f      	movs	r3, #31
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d015      	beq.n	8003e9c <UART_SetConfig+0x10c>
 8003e70:	dc18      	bgt.n	8003ea4 <UART_SetConfig+0x114>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00d      	beq.n	8003e92 <UART_SetConfig+0x102>
 8003e76:	dc15      	bgt.n	8003ea4 <UART_SetConfig+0x114>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <UART_SetConfig+0xf2>
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d005      	beq.n	8003e8c <UART_SetConfig+0xfc>
 8003e80:	e010      	b.n	8003ea4 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e82:	f7ff f973 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8003e86:	0003      	movs	r3, r0
 8003e88:	61bb      	str	r3, [r7, #24]
        break;
 8003e8a:	e012      	b.n	8003eb2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <UART_SetConfig+0x24c>)
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e00f      	b.n	8003eb2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7ff f90b 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003e96:	0003      	movs	r3, r0
 8003e98:	61bb      	str	r3, [r7, #24]
        break;
 8003e9a:	e00a      	b.n	8003eb2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	61bb      	str	r3, [r7, #24]
        break;
 8003ea2:	e006      	b.n	8003eb2 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ea8:	231e      	movs	r3, #30
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2201      	movs	r2, #1
 8003eae:	701a      	strb	r2, [r3, #0]
        break;
 8003eb0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d100      	bne.n	8003eba <UART_SetConfig+0x12a>
 8003eb8:	e07a      	b.n	8003fb0 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	005a      	lsls	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	18d2      	adds	r2, r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0019      	movs	r1, r3
 8003ecc:	0010      	movs	r0, r2
 8003ece:	f7fc f925 	bl	800011c <__udivsi3>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d91c      	bls.n	8003f16 <UART_SetConfig+0x186>
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	025b      	lsls	r3, r3, #9
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d217      	bcs.n	8003f16 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	200e      	movs	r0, #14
 8003eec:	183b      	adds	r3, r7, r0
 8003eee:	210f      	movs	r1, #15
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2207      	movs	r2, #7
 8003efc:	4013      	ands	r3, r2
 8003efe:	b299      	uxth	r1, r3
 8003f00:	183b      	adds	r3, r7, r0
 8003f02:	183a      	adds	r2, r7, r0
 8003f04:	8812      	ldrh	r2, [r2, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	183a      	adds	r2, r7, r0
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	e04c      	b.n	8003fb0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8003f16:	231e      	movs	r3, #30
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e047      	b.n	8003fb0 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f20:	231f      	movs	r3, #31
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d015      	beq.n	8003f56 <UART_SetConfig+0x1c6>
 8003f2a:	dc18      	bgt.n	8003f5e <UART_SetConfig+0x1ce>
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d00d      	beq.n	8003f4c <UART_SetConfig+0x1bc>
 8003f30:	dc15      	bgt.n	8003f5e <UART_SetConfig+0x1ce>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <UART_SetConfig+0x1ac>
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d005      	beq.n	8003f46 <UART_SetConfig+0x1b6>
 8003f3a:	e010      	b.n	8003f5e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f7ff f916 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8003f40:	0003      	movs	r3, r0
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e012      	b.n	8003f6c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f46:	4b25      	ldr	r3, [pc, #148]	; (8003fdc <UART_SetConfig+0x24c>)
 8003f48:	61bb      	str	r3, [r7, #24]
        break;
 8003f4a:	e00f      	b.n	8003f6c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4c:	f7ff f8ae 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003f50:	0003      	movs	r3, r0
 8003f52:	61bb      	str	r3, [r7, #24]
        break;
 8003f54:	e00a      	b.n	8003f6c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	61bb      	str	r3, [r7, #24]
        break;
 8003f5c:	e006      	b.n	8003f6c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f62:	231e      	movs	r3, #30
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
        break;
 8003f6a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01e      	beq.n	8003fb0 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	085a      	lsrs	r2, r3, #1
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	18d2      	adds	r2, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0019      	movs	r1, r3
 8003f82:	0010      	movs	r0, r2
 8003f84:	f7fc f8ca 	bl	800011c <__udivsi3>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d90a      	bls.n	8003fa8 <UART_SetConfig+0x218>
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	025b      	lsls	r3, r3, #9
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d205      	bcs.n	8003fa8 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	e003      	b.n	8003fb0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa8:	231e      	movs	r3, #30
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fbc:	231e      	movs	r3, #30
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b008      	add	sp, #32
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	ffff69f3 	.word	0xffff69f3
 8003fd0:	ffffcfff 	.word	0xffffcfff
 8003fd4:	fffff4ff 	.word	0xfffff4ff
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	007a1200 	.word	0x007a1200

08003fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	2208      	movs	r2, #8
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d00b      	beq.n	800400a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <UART_AdvFeatureConfig+0x144>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2201      	movs	r2, #1
 8004010:	4013      	ands	r3, r2
 8004012:	d00b      	beq.n	800402c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <UART_AdvFeatureConfig+0x148>)
 800401c:	4013      	ands	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d00b      	beq.n	800404e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a3b      	ldr	r2, [pc, #236]	; (800412c <UART_AdvFeatureConfig+0x14c>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2204      	movs	r2, #4
 8004054:	4013      	ands	r3, r2
 8004056:	d00b      	beq.n	8004070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a34      	ldr	r2, [pc, #208]	; (8004130 <UART_AdvFeatureConfig+0x150>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2210      	movs	r2, #16
 8004076:	4013      	ands	r3, r2
 8004078:	d00b      	beq.n	8004092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <UART_AdvFeatureConfig+0x154>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2220      	movs	r2, #32
 8004098:	4013      	ands	r3, r2
 800409a:	d00b      	beq.n	80040b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4a25      	ldr	r2, [pc, #148]	; (8004138 <UART_AdvFeatureConfig+0x158>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	0019      	movs	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2240      	movs	r2, #64	; 0x40
 80040ba:	4013      	ands	r3, r2
 80040bc:	d01d      	beq.n	80040fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <UART_AdvFeatureConfig+0x15c>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	035b      	lsls	r3, r3, #13
 80040de:	429a      	cmp	r2, r3
 80040e0:	d10b      	bne.n	80040fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <UART_AdvFeatureConfig+0x160>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	4013      	ands	r3, r2
 8004102:	d00b      	beq.n	800411c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <UART_AdvFeatureConfig+0x164>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}
 8004124:	ffff7fff 	.word	0xffff7fff
 8004128:	fffdffff 	.word	0xfffdffff
 800412c:	fffeffff 	.word	0xfffeffff
 8004130:	fffbffff 	.word	0xfffbffff
 8004134:	ffffefff 	.word	0xffffefff
 8004138:	ffffdfff 	.word	0xffffdfff
 800413c:	ffefffff 	.word	0xffefffff
 8004140:	ff9fffff 	.word	0xff9fffff
 8004144:	fff7ffff 	.word	0xfff7ffff

08004148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b092      	sub	sp, #72	; 0x48
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2284      	movs	r2, #132	; 0x84
 8004154:	2100      	movs	r1, #0
 8004156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004158:	f7fe f8c8 	bl	80022ec <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2208      	movs	r2, #8
 8004168:	4013      	ands	r3, r2
 800416a:	2b08      	cmp	r3, #8
 800416c:	d12c      	bne.n	80041c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	2280      	movs	r2, #128	; 0x80
 8004172:	0391      	lsls	r1, r2, #14
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4a46      	ldr	r2, [pc, #280]	; (8004290 <UART_CheckIdleState+0x148>)
 8004178:	9200      	str	r2, [sp, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	f000 f88c 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d021      	beq.n	80041c8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
 800418e:	2301      	movs	r3, #1
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	438a      	bics	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2278      	movs	r2, #120	; 0x78
 80041c0:	2100      	movs	r1, #0
 80041c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e05f      	b.n	8004288 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2204      	movs	r2, #4
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d146      	bne.n	8004264 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d8:	2280      	movs	r2, #128	; 0x80
 80041da:	03d1      	lsls	r1, r2, #15
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <UART_CheckIdleState+0x148>)
 80041e0:	9200      	str	r2, [sp, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f000 f858 	bl	8004298 <UART_WaitOnFlagUntilTimeout>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d03b      	beq.n	8004264 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ec:	f3ef 8310 	mrs	r3, PRIMASK
 80041f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
 80041f6:	2301      	movs	r3, #1
 80041f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4921      	ldr	r1, [pc, #132]	; (8004294 <UART_CheckIdleState+0x14c>)
 800420e:	400a      	ands	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f383 8810 	msr	PRIMASK, r3
}
 800421c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421e:	f3ef 8310 	mrs	r3, PRIMASK
 8004222:	61bb      	str	r3, [r7, #24]
  return(result);
 8004224:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	633b      	str	r3, [r7, #48]	; 0x30
 8004228:	2301      	movs	r3, #1
 800422a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2101      	movs	r1, #1
 8004240:	438a      	bics	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	2120      	movs	r1, #32
 8004256:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2278      	movs	r2, #120	; 0x78
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e011      	b.n	8004288 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2280      	movs	r2, #128	; 0x80
 800426e:	2120      	movs	r1, #32
 8004270:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2278      	movs	r2, #120	; 0x78
 8004282:	2100      	movs	r1, #0
 8004284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	b010      	add	sp, #64	; 0x40
 800428e:	bd80      	pop	{r7, pc}
 8004290:	01ffffff 	.word	0x01ffffff
 8004294:	fffffedf 	.word	0xfffffedf

08004298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a8:	e051      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3301      	adds	r3, #1
 80042ae:	d04e      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b0:	f7fe f81c 	bl	80022ec <HAL_GetTick>
 80042b4:	0002      	movs	r2, r0
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d302      	bcc.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e051      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2204      	movs	r2, #4
 80042d2:	4013      	ands	r3, r2
 80042d4:	d03b      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0xb6>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d038      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0xb6>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d035      	beq.n	800434e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	2208      	movs	r2, #8
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d111      	bne.n	8004314 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2208      	movs	r2, #8
 80042f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 f83c 	bl	8004378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2284      	movs	r2, #132	; 0x84
 8004304:	2108      	movs	r1, #8
 8004306:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2278      	movs	r2, #120	; 0x78
 800430c:	2100      	movs	r1, #0
 800430e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e02c      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	401a      	ands	r2, r3
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	429a      	cmp	r2, r3
 8004326:	d112      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2280      	movs	r2, #128	; 0x80
 800432e:	0112      	lsls	r2, r2, #4
 8004330:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	0018      	movs	r0, r3
 8004336:	f000 f81f 	bl	8004378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2284      	movs	r2, #132	; 0x84
 800433e:	2120      	movs	r1, #32
 8004340:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2278      	movs	r2, #120	; 0x78
 8004346:	2100      	movs	r1, #0
 8004348:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e00f      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	425a      	negs	r2, r3
 800435e:	4153      	adcs	r3, r2
 8004360:	b2db      	uxtb	r3, r3
 8004362:	001a      	movs	r2, r3
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d09e      	beq.n	80042aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b004      	add	sp, #16
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08e      	sub	sp, #56	; 0x38
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004380:	f3ef 8310 	mrs	r3, PRIMASK
 8004384:	617b      	str	r3, [r7, #20]
  return(result);
 8004386:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
 800438a:	2301      	movs	r3, #1
 800438c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f383 8810 	msr	PRIMASK, r3
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4926      	ldr	r1, [pc, #152]	; (800443c <UART_EndRxTransfer+0xc4>)
 80043a2:	400a      	ands	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f383 8810 	msr	PRIMASK, r3
}
 80043b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b2:	f3ef 8310 	mrs	r3, PRIMASK
 80043b6:	623b      	str	r3, [r7, #32]
  return(result);
 80043b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
 80043bc:	2301      	movs	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f383 8810 	msr	PRIMASK, r3
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d118      	bne.n	800441e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ec:	f3ef 8310 	mrs	r3, PRIMASK
 80043f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f6:	2301      	movs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f383 8810 	msr	PRIMASK, r3
}
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2110      	movs	r1, #16
 800440e:	438a      	bics	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f383 8810 	msr	PRIMASK, r3
}
 800441c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2280      	movs	r2, #128	; 0x80
 8004422:	2120      	movs	r1, #32
 8004424:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b00e      	add	sp, #56	; 0x38
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	fffffedf 	.word	0xfffffedf

08004440 <__assert_func>:
 8004440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004442:	0014      	movs	r4, r2
 8004444:	001a      	movs	r2, r3
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <__assert_func+0x2c>)
 8004448:	0005      	movs	r5, r0
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	000e      	movs	r6, r1
 800444e:	68d8      	ldr	r0, [r3, #12]
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <__assert_func+0x30>)
 8004452:	2c00      	cmp	r4, #0
 8004454:	d101      	bne.n	800445a <__assert_func+0x1a>
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <__assert_func+0x34>)
 8004458:	001c      	movs	r4, r3
 800445a:	4907      	ldr	r1, [pc, #28]	; (8004478 <__assert_func+0x38>)
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	9402      	str	r4, [sp, #8]
 8004460:	002b      	movs	r3, r5
 8004462:	9600      	str	r6, [sp, #0]
 8004464:	f000 f8b2 	bl	80045cc <fiprintf>
 8004468:	f000 f9b4 	bl	80047d4 <abort>
 800446c:	200000e8 	.word	0x200000e8
 8004470:	08005784 	.word	0x08005784
 8004474:	080057bf 	.word	0x080057bf
 8004478:	08005791 	.word	0x08005791

0800447c <std>:
 800447c:	2300      	movs	r3, #0
 800447e:	b510      	push	{r4, lr}
 8004480:	0004      	movs	r4, r0
 8004482:	6003      	str	r3, [r0, #0]
 8004484:	6043      	str	r3, [r0, #4]
 8004486:	6083      	str	r3, [r0, #8]
 8004488:	8181      	strh	r1, [r0, #12]
 800448a:	6643      	str	r3, [r0, #100]	; 0x64
 800448c:	81c2      	strh	r2, [r0, #14]
 800448e:	6103      	str	r3, [r0, #16]
 8004490:	6143      	str	r3, [r0, #20]
 8004492:	6183      	str	r3, [r0, #24]
 8004494:	0019      	movs	r1, r3
 8004496:	2208      	movs	r2, #8
 8004498:	305c      	adds	r0, #92	; 0x5c
 800449a:	f000 f90f 	bl	80046bc <memset>
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <std+0x50>)
 80044a0:	6224      	str	r4, [r4, #32]
 80044a2:	6263      	str	r3, [r4, #36]	; 0x24
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <std+0x54>)
 80044a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <std+0x58>)
 80044aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <std+0x5c>)
 80044ae:	6323      	str	r3, [r4, #48]	; 0x30
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <std+0x60>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	d005      	beq.n	80044c2 <std+0x46>
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <std+0x64>)
 80044b8:	429c      	cmp	r4, r3
 80044ba:	d002      	beq.n	80044c2 <std+0x46>
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <std+0x68>)
 80044be:	429c      	cmp	r4, r3
 80044c0:	d103      	bne.n	80044ca <std+0x4e>
 80044c2:	0020      	movs	r0, r4
 80044c4:	3058      	adds	r0, #88	; 0x58
 80044c6:	f000 f979 	bl	80047bc <__retarget_lock_init_recursive>
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	08004625 	.word	0x08004625
 80044d0:	0800464d 	.word	0x0800464d
 80044d4:	08004685 	.word	0x08004685
 80044d8:	080046b1 	.word	0x080046b1
 80044dc:	20000370 	.word	0x20000370
 80044e0:	200003d8 	.word	0x200003d8
 80044e4:	20000440 	.word	0x20000440

080044e8 <stdio_exit_handler>:
 80044e8:	b510      	push	{r4, lr}
 80044ea:	4a03      	ldr	r2, [pc, #12]	; (80044f8 <stdio_exit_handler+0x10>)
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <stdio_exit_handler+0x14>)
 80044ee:	4804      	ldr	r0, [pc, #16]	; (8004500 <stdio_exit_handler+0x18>)
 80044f0:	f000 f87c 	bl	80045ec <_fwalk_sglue>
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	20000090 	.word	0x20000090
 80044fc:	0800507d 	.word	0x0800507d
 8004500:	2000009c 	.word	0x2000009c

08004504 <cleanup_stdio>:
 8004504:	6841      	ldr	r1, [r0, #4]
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <cleanup_stdio+0x30>)
 8004508:	b510      	push	{r4, lr}
 800450a:	0004      	movs	r4, r0
 800450c:	4299      	cmp	r1, r3
 800450e:	d001      	beq.n	8004514 <cleanup_stdio+0x10>
 8004510:	f000 fdb4 	bl	800507c <_fflush_r>
 8004514:	68a1      	ldr	r1, [r4, #8]
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <cleanup_stdio+0x34>)
 8004518:	4299      	cmp	r1, r3
 800451a:	d002      	beq.n	8004522 <cleanup_stdio+0x1e>
 800451c:	0020      	movs	r0, r4
 800451e:	f000 fdad 	bl	800507c <_fflush_r>
 8004522:	68e1      	ldr	r1, [r4, #12]
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <cleanup_stdio+0x38>)
 8004526:	4299      	cmp	r1, r3
 8004528:	d002      	beq.n	8004530 <cleanup_stdio+0x2c>
 800452a:	0020      	movs	r0, r4
 800452c:	f000 fda6 	bl	800507c <_fflush_r>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	20000370 	.word	0x20000370
 8004538:	200003d8 	.word	0x200003d8
 800453c:	20000440 	.word	0x20000440

08004540 <global_stdio_init.part.0>:
 8004540:	b510      	push	{r4, lr}
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <global_stdio_init.part.0+0x28>)
 8004544:	4a09      	ldr	r2, [pc, #36]	; (800456c <global_stdio_init.part.0+0x2c>)
 8004546:	2104      	movs	r1, #4
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	4809      	ldr	r0, [pc, #36]	; (8004570 <global_stdio_init.part.0+0x30>)
 800454c:	2200      	movs	r2, #0
 800454e:	f7ff ff95 	bl	800447c <std>
 8004552:	2201      	movs	r2, #1
 8004554:	2109      	movs	r1, #9
 8004556:	4807      	ldr	r0, [pc, #28]	; (8004574 <global_stdio_init.part.0+0x34>)
 8004558:	f7ff ff90 	bl	800447c <std>
 800455c:	2202      	movs	r2, #2
 800455e:	2112      	movs	r1, #18
 8004560:	4805      	ldr	r0, [pc, #20]	; (8004578 <global_stdio_init.part.0+0x38>)
 8004562:	f7ff ff8b 	bl	800447c <std>
 8004566:	bd10      	pop	{r4, pc}
 8004568:	200004a8 	.word	0x200004a8
 800456c:	080044e9 	.word	0x080044e9
 8004570:	20000370 	.word	0x20000370
 8004574:	200003d8 	.word	0x200003d8
 8004578:	20000440 	.word	0x20000440

0800457c <__sfp_lock_acquire>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <__sfp_lock_acquire+0xc>)
 8004580:	f000 f91d 	bl	80047be <__retarget_lock_acquire_recursive>
 8004584:	bd10      	pop	{r4, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	200004b1 	.word	0x200004b1

0800458c <__sfp_lock_release>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4802      	ldr	r0, [pc, #8]	; (8004598 <__sfp_lock_release+0xc>)
 8004590:	f000 f916 	bl	80047c0 <__retarget_lock_release_recursive>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	200004b1 	.word	0x200004b1

0800459c <__sinit>:
 800459c:	b510      	push	{r4, lr}
 800459e:	0004      	movs	r4, r0
 80045a0:	f7ff ffec 	bl	800457c <__sfp_lock_acquire>
 80045a4:	6a23      	ldr	r3, [r4, #32]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <__sinit+0x14>
 80045aa:	f7ff ffef 	bl	800458c <__sfp_lock_release>
 80045ae:	bd10      	pop	{r4, pc}
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <__sinit+0x28>)
 80045b2:	6223      	str	r3, [r4, #32]
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <__sinit+0x2c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f6      	bne.n	80045aa <__sinit+0xe>
 80045bc:	f7ff ffc0 	bl	8004540 <global_stdio_init.part.0>
 80045c0:	e7f3      	b.n	80045aa <__sinit+0xe>
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	08004505 	.word	0x08004505
 80045c8:	200004a8 	.word	0x200004a8

080045cc <fiprintf>:
 80045cc:	b40e      	push	{r1, r2, r3}
 80045ce:	b517      	push	{r0, r1, r2, r4, lr}
 80045d0:	4c05      	ldr	r4, [pc, #20]	; (80045e8 <fiprintf+0x1c>)
 80045d2:	ab05      	add	r3, sp, #20
 80045d4:	cb04      	ldmia	r3!, {r2}
 80045d6:	0001      	movs	r1, r0
 80045d8:	6820      	ldr	r0, [r4, #0]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	f000 fa28 	bl	8004a30 <_vfiprintf_r>
 80045e0:	bc1e      	pop	{r1, r2, r3, r4}
 80045e2:	bc08      	pop	{r3}
 80045e4:	b003      	add	sp, #12
 80045e6:	4718      	bx	r3
 80045e8:	200000e8 	.word	0x200000e8

080045ec <_fwalk_sglue>:
 80045ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ee:	0014      	movs	r4, r2
 80045f0:	2600      	movs	r6, #0
 80045f2:	9000      	str	r0, [sp, #0]
 80045f4:	9101      	str	r1, [sp, #4]
 80045f6:	68a5      	ldr	r5, [r4, #8]
 80045f8:	6867      	ldr	r7, [r4, #4]
 80045fa:	3f01      	subs	r7, #1
 80045fc:	d504      	bpl.n	8004608 <_fwalk_sglue+0x1c>
 80045fe:	6824      	ldr	r4, [r4, #0]
 8004600:	2c00      	cmp	r4, #0
 8004602:	d1f8      	bne.n	80045f6 <_fwalk_sglue+0xa>
 8004604:	0030      	movs	r0, r6
 8004606:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004608:	89ab      	ldrh	r3, [r5, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d908      	bls.n	8004620 <_fwalk_sglue+0x34>
 800460e:	220e      	movs	r2, #14
 8004610:	5eab      	ldrsh	r3, [r5, r2]
 8004612:	3301      	adds	r3, #1
 8004614:	d004      	beq.n	8004620 <_fwalk_sglue+0x34>
 8004616:	0029      	movs	r1, r5
 8004618:	9800      	ldr	r0, [sp, #0]
 800461a:	9b01      	ldr	r3, [sp, #4]
 800461c:	4798      	blx	r3
 800461e:	4306      	orrs	r6, r0
 8004620:	3568      	adds	r5, #104	; 0x68
 8004622:	e7ea      	b.n	80045fa <_fwalk_sglue+0xe>

08004624 <__sread>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	000c      	movs	r4, r1
 8004628:	250e      	movs	r5, #14
 800462a:	5f49      	ldrsh	r1, [r1, r5]
 800462c:	f000 f874 	bl	8004718 <_read_r>
 8004630:	2800      	cmp	r0, #0
 8004632:	db03      	blt.n	800463c <__sread+0x18>
 8004634:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004636:	181b      	adds	r3, r3, r0
 8004638:	6563      	str	r3, [r4, #84]	; 0x54
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	4a02      	ldr	r2, [pc, #8]	; (8004648 <__sread+0x24>)
 8004640:	4013      	ands	r3, r2
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	e7f9      	b.n	800463a <__sread+0x16>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	ffffefff 	.word	0xffffefff

0800464c <__swrite>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	001f      	movs	r7, r3
 8004650:	898b      	ldrh	r3, [r1, #12]
 8004652:	0005      	movs	r5, r0
 8004654:	000c      	movs	r4, r1
 8004656:	0016      	movs	r6, r2
 8004658:	05db      	lsls	r3, r3, #23
 800465a:	d505      	bpl.n	8004668 <__swrite+0x1c>
 800465c:	230e      	movs	r3, #14
 800465e:	5ec9      	ldrsh	r1, [r1, r3]
 8004660:	2200      	movs	r2, #0
 8004662:	2302      	movs	r3, #2
 8004664:	f000 f844 	bl	80046f0 <_lseek_r>
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <__swrite+0x34>)
 800466c:	0028      	movs	r0, r5
 800466e:	4013      	ands	r3, r2
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	0032      	movs	r2, r6
 8004674:	230e      	movs	r3, #14
 8004676:	5ee1      	ldrsh	r1, [r4, r3]
 8004678:	003b      	movs	r3, r7
 800467a:	f000 f861 	bl	8004740 <_write_r>
 800467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004680:	ffffefff 	.word	0xffffefff

08004684 <__sseek>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	000c      	movs	r4, r1
 8004688:	250e      	movs	r5, #14
 800468a:	5f49      	ldrsh	r1, [r1, r5]
 800468c:	f000 f830 	bl	80046f0 <_lseek_r>
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	1c42      	adds	r2, r0, #1
 8004694:	d103      	bne.n	800469e <__sseek+0x1a>
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <__sseek+0x28>)
 8004698:	4013      	ands	r3, r2
 800469a:	81a3      	strh	r3, [r4, #12]
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	0152      	lsls	r2, r2, #5
 80046a2:	4313      	orrs	r3, r2
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	6560      	str	r0, [r4, #84]	; 0x54
 80046a8:	e7f8      	b.n	800469c <__sseek+0x18>
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	ffffefff 	.word	0xffffefff

080046b0 <__sclose>:
 80046b0:	b510      	push	{r4, lr}
 80046b2:	230e      	movs	r3, #14
 80046b4:	5ec9      	ldrsh	r1, [r1, r3]
 80046b6:	f000 f809 	bl	80046cc <_close_r>
 80046ba:	bd10      	pop	{r4, pc}

080046bc <memset>:
 80046bc:	0003      	movs	r3, r0
 80046be:	1882      	adds	r2, r0, r2
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d100      	bne.n	80046c6 <memset+0xa>
 80046c4:	4770      	bx	lr
 80046c6:	7019      	strb	r1, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	e7f9      	b.n	80046c0 <memset+0x4>

080046cc <_close_r>:
 80046cc:	2300      	movs	r3, #0
 80046ce:	b570      	push	{r4, r5, r6, lr}
 80046d0:	4d06      	ldr	r5, [pc, #24]	; (80046ec <_close_r+0x20>)
 80046d2:	0004      	movs	r4, r0
 80046d4:	0008      	movs	r0, r1
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	f7fc f921 	bl	800091e <_close>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d103      	bne.n	80046e8 <_close_r+0x1c>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d000      	beq.n	80046e8 <_close_r+0x1c>
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	200004ac 	.word	0x200004ac

080046f0 <_lseek_r>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	0004      	movs	r4, r0
 80046f4:	0008      	movs	r0, r1
 80046f6:	0011      	movs	r1, r2
 80046f8:	001a      	movs	r2, r3
 80046fa:	2300      	movs	r3, #0
 80046fc:	4d05      	ldr	r5, [pc, #20]	; (8004714 <_lseek_r+0x24>)
 80046fe:	602b      	str	r3, [r5, #0]
 8004700:	f7fc f92e 	bl	8000960 <_lseek>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d103      	bne.n	8004710 <_lseek_r+0x20>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d000      	beq.n	8004710 <_lseek_r+0x20>
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	bd70      	pop	{r4, r5, r6, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	200004ac 	.word	0x200004ac

08004718 <_read_r>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	0004      	movs	r4, r0
 800471c:	0008      	movs	r0, r1
 800471e:	0011      	movs	r1, r2
 8004720:	001a      	movs	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	4d05      	ldr	r5, [pc, #20]	; (800473c <_read_r+0x24>)
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	f7fc f8c0 	bl	80008ac <_read>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	d103      	bne.n	8004738 <_read_r+0x20>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d000      	beq.n	8004738 <_read_r+0x20>
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	bd70      	pop	{r4, r5, r6, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	200004ac 	.word	0x200004ac

08004740 <_write_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	0004      	movs	r4, r0
 8004744:	0008      	movs	r0, r1
 8004746:	0011      	movs	r1, r2
 8004748:	001a      	movs	r2, r3
 800474a:	2300      	movs	r3, #0
 800474c:	4d05      	ldr	r5, [pc, #20]	; (8004764 <_write_r+0x24>)
 800474e:	602b      	str	r3, [r5, #0]
 8004750:	f7fc f8c9 	bl	80008e6 <_write>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d103      	bne.n	8004760 <_write_r+0x20>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d000      	beq.n	8004760 <_write_r+0x20>
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	bd70      	pop	{r4, r5, r6, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	200004ac 	.word	0x200004ac

08004768 <__errno>:
 8004768:	4b01      	ldr	r3, [pc, #4]	; (8004770 <__errno+0x8>)
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	4770      	bx	lr
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	200000e8 	.word	0x200000e8

08004774 <__libc_init_array>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	2600      	movs	r6, #0
 8004778:	4c0c      	ldr	r4, [pc, #48]	; (80047ac <__libc_init_array+0x38>)
 800477a:	4d0d      	ldr	r5, [pc, #52]	; (80047b0 <__libc_init_array+0x3c>)
 800477c:	1b64      	subs	r4, r4, r5
 800477e:	10a4      	asrs	r4, r4, #2
 8004780:	42a6      	cmp	r6, r4
 8004782:	d109      	bne.n	8004798 <__libc_init_array+0x24>
 8004784:	2600      	movs	r6, #0
 8004786:	f000 fe3d 	bl	8005404 <_init>
 800478a:	4c0a      	ldr	r4, [pc, #40]	; (80047b4 <__libc_init_array+0x40>)
 800478c:	4d0a      	ldr	r5, [pc, #40]	; (80047b8 <__libc_init_array+0x44>)
 800478e:	1b64      	subs	r4, r4, r5
 8004790:	10a4      	asrs	r4, r4, #2
 8004792:	42a6      	cmp	r6, r4
 8004794:	d105      	bne.n	80047a2 <__libc_init_array+0x2e>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	00b3      	lsls	r3, r6, #2
 800479a:	58eb      	ldr	r3, [r5, r3]
 800479c:	4798      	blx	r3
 800479e:	3601      	adds	r6, #1
 80047a0:	e7ee      	b.n	8004780 <__libc_init_array+0xc>
 80047a2:	00b3      	lsls	r3, r6, #2
 80047a4:	58eb      	ldr	r3, [r5, r3]
 80047a6:	4798      	blx	r3
 80047a8:	3601      	adds	r6, #1
 80047aa:	e7f2      	b.n	8004792 <__libc_init_array+0x1e>
 80047ac:	08005c00 	.word	0x08005c00
 80047b0:	08005c00 	.word	0x08005c00
 80047b4:	08005c04 	.word	0x08005c04
 80047b8:	08005c00 	.word	0x08005c00

080047bc <__retarget_lock_init_recursive>:
 80047bc:	4770      	bx	lr

080047be <__retarget_lock_acquire_recursive>:
 80047be:	4770      	bx	lr

080047c0 <__retarget_lock_release_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <memcpy>:
 80047c2:	2300      	movs	r3, #0
 80047c4:	b510      	push	{r4, lr}
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d100      	bne.n	80047cc <memcpy+0xa>
 80047ca:	bd10      	pop	{r4, pc}
 80047cc:	5ccc      	ldrb	r4, [r1, r3]
 80047ce:	54c4      	strb	r4, [r0, r3]
 80047d0:	3301      	adds	r3, #1
 80047d2:	e7f8      	b.n	80047c6 <memcpy+0x4>

080047d4 <abort>:
 80047d4:	2006      	movs	r0, #6
 80047d6:	b510      	push	{r4, lr}
 80047d8:	f000 fd4c 	bl	8005274 <raise>
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fc f859 	bl	8000894 <_exit>
	...

080047e4 <_free_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	0005      	movs	r5, r0
 80047e8:	2900      	cmp	r1, #0
 80047ea:	d010      	beq.n	800480e <_free_r+0x2a>
 80047ec:	1f0c      	subs	r4, r1, #4
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	da00      	bge.n	80047f6 <_free_r+0x12>
 80047f4:	18e4      	adds	r4, r4, r3
 80047f6:	0028      	movs	r0, r5
 80047f8:	f000 f8e2 	bl	80049c0 <__malloc_lock>
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <_free_r+0x90>)
 80047fe:	6813      	ldr	r3, [r2, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <_free_r+0x2c>
 8004804:	6063      	str	r3, [r4, #4]
 8004806:	6014      	str	r4, [r2, #0]
 8004808:	0028      	movs	r0, r5
 800480a:	f000 f8e1 	bl	80049d0 <__malloc_unlock>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	42a3      	cmp	r3, r4
 8004812:	d908      	bls.n	8004826 <_free_r+0x42>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	1821      	adds	r1, r4, r0
 8004818:	428b      	cmp	r3, r1
 800481a:	d1f3      	bne.n	8004804 <_free_r+0x20>
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	1809      	adds	r1, r1, r0
 8004822:	6021      	str	r1, [r4, #0]
 8004824:	e7ee      	b.n	8004804 <_free_r+0x20>
 8004826:	001a      	movs	r2, r3
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <_free_r+0x4e>
 800482e:	42a3      	cmp	r3, r4
 8004830:	d9f9      	bls.n	8004826 <_free_r+0x42>
 8004832:	6811      	ldr	r1, [r2, #0]
 8004834:	1850      	adds	r0, r2, r1
 8004836:	42a0      	cmp	r0, r4
 8004838:	d10b      	bne.n	8004852 <_free_r+0x6e>
 800483a:	6820      	ldr	r0, [r4, #0]
 800483c:	1809      	adds	r1, r1, r0
 800483e:	1850      	adds	r0, r2, r1
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	4283      	cmp	r3, r0
 8004844:	d1e0      	bne.n	8004808 <_free_r+0x24>
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	1841      	adds	r1, r0, r1
 800484c:	6011      	str	r1, [r2, #0]
 800484e:	6053      	str	r3, [r2, #4]
 8004850:	e7da      	b.n	8004808 <_free_r+0x24>
 8004852:	42a0      	cmp	r0, r4
 8004854:	d902      	bls.n	800485c <_free_r+0x78>
 8004856:	230c      	movs	r3, #12
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	e7d5      	b.n	8004808 <_free_r+0x24>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	1821      	adds	r1, r4, r0
 8004860:	428b      	cmp	r3, r1
 8004862:	d103      	bne.n	800486c <_free_r+0x88>
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	1809      	adds	r1, r1, r0
 800486a:	6021      	str	r1, [r4, #0]
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6054      	str	r4, [r2, #4]
 8004870:	e7ca      	b.n	8004808 <_free_r+0x24>
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	200004b4 	.word	0x200004b4

08004878 <sbrk_aligned>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4e0f      	ldr	r6, [pc, #60]	; (80048b8 <sbrk_aligned+0x40>)
 800487c:	000d      	movs	r5, r1
 800487e:	6831      	ldr	r1, [r6, #0]
 8004880:	0004      	movs	r4, r0
 8004882:	2900      	cmp	r1, #0
 8004884:	d102      	bne.n	800488c <sbrk_aligned+0x14>
 8004886:	f000 fd15 	bl	80052b4 <_sbrk_r>
 800488a:	6030      	str	r0, [r6, #0]
 800488c:	0029      	movs	r1, r5
 800488e:	0020      	movs	r0, r4
 8004890:	f000 fd10 	bl	80052b4 <_sbrk_r>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d00a      	beq.n	80048ae <sbrk_aligned+0x36>
 8004898:	2303      	movs	r3, #3
 800489a:	1cc5      	adds	r5, r0, #3
 800489c:	439d      	bics	r5, r3
 800489e:	42a8      	cmp	r0, r5
 80048a0:	d007      	beq.n	80048b2 <sbrk_aligned+0x3a>
 80048a2:	1a29      	subs	r1, r5, r0
 80048a4:	0020      	movs	r0, r4
 80048a6:	f000 fd05 	bl	80052b4 <_sbrk_r>
 80048aa:	3001      	adds	r0, #1
 80048ac:	d101      	bne.n	80048b2 <sbrk_aligned+0x3a>
 80048ae:	2501      	movs	r5, #1
 80048b0:	426d      	negs	r5, r5
 80048b2:	0028      	movs	r0, r5
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	200004b8 	.word	0x200004b8

080048bc <_malloc_r>:
 80048bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048be:	2203      	movs	r2, #3
 80048c0:	1ccb      	adds	r3, r1, #3
 80048c2:	4393      	bics	r3, r2
 80048c4:	3308      	adds	r3, #8
 80048c6:	0006      	movs	r6, r0
 80048c8:	001f      	movs	r7, r3
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d238      	bcs.n	8004940 <_malloc_r+0x84>
 80048ce:	270c      	movs	r7, #12
 80048d0:	42b9      	cmp	r1, r7
 80048d2:	d837      	bhi.n	8004944 <_malloc_r+0x88>
 80048d4:	0030      	movs	r0, r6
 80048d6:	f000 f873 	bl	80049c0 <__malloc_lock>
 80048da:	4b38      	ldr	r3, [pc, #224]	; (80049bc <_malloc_r+0x100>)
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	001c      	movs	r4, r3
 80048e2:	2c00      	cmp	r4, #0
 80048e4:	d133      	bne.n	800494e <_malloc_r+0x92>
 80048e6:	0039      	movs	r1, r7
 80048e8:	0030      	movs	r0, r6
 80048ea:	f7ff ffc5 	bl	8004878 <sbrk_aligned>
 80048ee:	0004      	movs	r4, r0
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d15e      	bne.n	80049b2 <_malloc_r+0xf6>
 80048f4:	9b00      	ldr	r3, [sp, #0]
 80048f6:	681c      	ldr	r4, [r3, #0]
 80048f8:	0025      	movs	r5, r4
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	d14e      	bne.n	800499c <_malloc_r+0xe0>
 80048fe:	2c00      	cmp	r4, #0
 8004900:	d051      	beq.n	80049a6 <_malloc_r+0xea>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0029      	movs	r1, r5
 8004906:	18e3      	adds	r3, r4, r3
 8004908:	0030      	movs	r0, r6
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	f000 fcd2 	bl	80052b4 <_sbrk_r>
 8004910:	9b01      	ldr	r3, [sp, #4]
 8004912:	4283      	cmp	r3, r0
 8004914:	d147      	bne.n	80049a6 <_malloc_r+0xea>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	0030      	movs	r0, r6
 800491a:	1aff      	subs	r7, r7, r3
 800491c:	0039      	movs	r1, r7
 800491e:	f7ff ffab 	bl	8004878 <sbrk_aligned>
 8004922:	3001      	adds	r0, #1
 8004924:	d03f      	beq.n	80049a6 <_malloc_r+0xea>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	19db      	adds	r3, r3, r7
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	9b00      	ldr	r3, [sp, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d040      	beq.n	80049b6 <_malloc_r+0xfa>
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	42a2      	cmp	r2, r4
 8004938:	d133      	bne.n	80049a2 <_malloc_r+0xe6>
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e014      	b.n	800496a <_malloc_r+0xae>
 8004940:	2b00      	cmp	r3, #0
 8004942:	dac5      	bge.n	80048d0 <_malloc_r+0x14>
 8004944:	230c      	movs	r3, #12
 8004946:	2500      	movs	r5, #0
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	0028      	movs	r0, r5
 800494c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	1bc9      	subs	r1, r1, r7
 8004952:	d420      	bmi.n	8004996 <_malloc_r+0xda>
 8004954:	290b      	cmp	r1, #11
 8004956:	d918      	bls.n	800498a <_malloc_r+0xce>
 8004958:	19e2      	adds	r2, r4, r7
 800495a:	6027      	str	r7, [r4, #0]
 800495c:	42a3      	cmp	r3, r4
 800495e:	d112      	bne.n	8004986 <_malloc_r+0xca>
 8004960:	9b00      	ldr	r3, [sp, #0]
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	6011      	str	r1, [r2, #0]
 8004968:	6053      	str	r3, [r2, #4]
 800496a:	0030      	movs	r0, r6
 800496c:	0025      	movs	r5, r4
 800496e:	f000 f82f 	bl	80049d0 <__malloc_unlock>
 8004972:	2207      	movs	r2, #7
 8004974:	350b      	adds	r5, #11
 8004976:	1d23      	adds	r3, r4, #4
 8004978:	4395      	bics	r5, r2
 800497a:	1aea      	subs	r2, r5, r3
 800497c:	429d      	cmp	r5, r3
 800497e:	d0e4      	beq.n	800494a <_malloc_r+0x8e>
 8004980:	1b5b      	subs	r3, r3, r5
 8004982:	50a3      	str	r3, [r4, r2]
 8004984:	e7e1      	b.n	800494a <_malloc_r+0x8e>
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	e7ec      	b.n	8004964 <_malloc_r+0xa8>
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	42a3      	cmp	r3, r4
 800498e:	d1d5      	bne.n	800493c <_malloc_r+0x80>
 8004990:	9b00      	ldr	r3, [sp, #0]
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e7e9      	b.n	800496a <_malloc_r+0xae>
 8004996:	0023      	movs	r3, r4
 8004998:	6864      	ldr	r4, [r4, #4]
 800499a:	e7a2      	b.n	80048e2 <_malloc_r+0x26>
 800499c:	002c      	movs	r4, r5
 800499e:	686d      	ldr	r5, [r5, #4]
 80049a0:	e7ab      	b.n	80048fa <_malloc_r+0x3e>
 80049a2:	0013      	movs	r3, r2
 80049a4:	e7c4      	b.n	8004930 <_malloc_r+0x74>
 80049a6:	230c      	movs	r3, #12
 80049a8:	0030      	movs	r0, r6
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	f000 f810 	bl	80049d0 <__malloc_unlock>
 80049b0:	e7cb      	b.n	800494a <_malloc_r+0x8e>
 80049b2:	6027      	str	r7, [r4, #0]
 80049b4:	e7d9      	b.n	800496a <_malloc_r+0xae>
 80049b6:	605b      	str	r3, [r3, #4]
 80049b8:	deff      	udf	#255	; 0xff
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	200004b4 	.word	0x200004b4

080049c0 <__malloc_lock>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <__malloc_lock+0xc>)
 80049c4:	f7ff fefb 	bl	80047be <__retarget_lock_acquire_recursive>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	200004b0 	.word	0x200004b0

080049d0 <__malloc_unlock>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4802      	ldr	r0, [pc, #8]	; (80049dc <__malloc_unlock+0xc>)
 80049d4:	f7ff fef4 	bl	80047c0 <__retarget_lock_release_recursive>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200004b0 	.word	0x200004b0

080049e0 <__sfputc_r>:
 80049e0:	6893      	ldr	r3, [r2, #8]
 80049e2:	b510      	push	{r4, lr}
 80049e4:	3b01      	subs	r3, #1
 80049e6:	6093      	str	r3, [r2, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da04      	bge.n	80049f6 <__sfputc_r+0x16>
 80049ec:	6994      	ldr	r4, [r2, #24]
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	db07      	blt.n	8004a02 <__sfputc_r+0x22>
 80049f2:	290a      	cmp	r1, #10
 80049f4:	d005      	beq.n	8004a02 <__sfputc_r+0x22>
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	1c58      	adds	r0, r3, #1
 80049fa:	6010      	str	r0, [r2, #0]
 80049fc:	7019      	strb	r1, [r3, #0]
 80049fe:	0008      	movs	r0, r1
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	f000 fb66 	bl	80050d2 <__swbuf_r>
 8004a06:	0001      	movs	r1, r0
 8004a08:	e7f9      	b.n	80049fe <__sfputc_r+0x1e>

08004a0a <__sfputs_r>:
 8004a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0c:	0006      	movs	r6, r0
 8004a0e:	000f      	movs	r7, r1
 8004a10:	0014      	movs	r4, r2
 8004a12:	18d5      	adds	r5, r2, r3
 8004a14:	42ac      	cmp	r4, r5
 8004a16:	d101      	bne.n	8004a1c <__sfputs_r+0x12>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e007      	b.n	8004a2c <__sfputs_r+0x22>
 8004a1c:	7821      	ldrb	r1, [r4, #0]
 8004a1e:	003a      	movs	r2, r7
 8004a20:	0030      	movs	r0, r6
 8004a22:	f7ff ffdd 	bl	80049e0 <__sfputc_r>
 8004a26:	3401      	adds	r4, #1
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d1f3      	bne.n	8004a14 <__sfputs_r+0xa>
 8004a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a30 <_vfiprintf_r>:
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b0a1      	sub	sp, #132	; 0x84
 8004a34:	000f      	movs	r7, r1
 8004a36:	0015      	movs	r5, r2
 8004a38:	001e      	movs	r6, r3
 8004a3a:	9003      	str	r0, [sp, #12]
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d004      	beq.n	8004a4a <_vfiprintf_r+0x1a>
 8004a40:	6a03      	ldr	r3, [r0, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <_vfiprintf_r+0x1a>
 8004a46:	f7ff fda9 	bl	800459c <__sinit>
 8004a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a4c:	07db      	lsls	r3, r3, #31
 8004a4e:	d405      	bmi.n	8004a5c <_vfiprintf_r+0x2c>
 8004a50:	89bb      	ldrh	r3, [r7, #12]
 8004a52:	059b      	lsls	r3, r3, #22
 8004a54:	d402      	bmi.n	8004a5c <_vfiprintf_r+0x2c>
 8004a56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004a58:	f7ff feb1 	bl	80047be <__retarget_lock_acquire_recursive>
 8004a5c:	89bb      	ldrh	r3, [r7, #12]
 8004a5e:	071b      	lsls	r3, r3, #28
 8004a60:	d502      	bpl.n	8004a68 <_vfiprintf_r+0x38>
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d113      	bne.n	8004a90 <_vfiprintf_r+0x60>
 8004a68:	0039      	movs	r1, r7
 8004a6a:	9803      	ldr	r0, [sp, #12]
 8004a6c:	f000 fb74 	bl	8005158 <__swsetup_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d00d      	beq.n	8004a90 <_vfiprintf_r+0x60>
 8004a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a76:	07db      	lsls	r3, r3, #31
 8004a78:	d503      	bpl.n	8004a82 <_vfiprintf_r+0x52>
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	4240      	negs	r0, r0
 8004a7e:	b021      	add	sp, #132	; 0x84
 8004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a82:	89bb      	ldrh	r3, [r7, #12]
 8004a84:	059b      	lsls	r3, r3, #22
 8004a86:	d4f8      	bmi.n	8004a7a <_vfiprintf_r+0x4a>
 8004a88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004a8a:	f7ff fe99 	bl	80047c0 <__retarget_lock_release_recursive>
 8004a8e:	e7f4      	b.n	8004a7a <_vfiprintf_r+0x4a>
 8004a90:	2300      	movs	r3, #0
 8004a92:	ac08      	add	r4, sp, #32
 8004a94:	6163      	str	r3, [r4, #20]
 8004a96:	3320      	adds	r3, #32
 8004a98:	7663      	strb	r3, [r4, #25]
 8004a9a:	3310      	adds	r3, #16
 8004a9c:	76a3      	strb	r3, [r4, #26]
 8004a9e:	9607      	str	r6, [sp, #28]
 8004aa0:	002e      	movs	r6, r5
 8004aa2:	7833      	ldrb	r3, [r6, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <_vfiprintf_r+0x7c>
 8004aa8:	2b25      	cmp	r3, #37	; 0x25
 8004aaa:	d148      	bne.n	8004b3e <_vfiprintf_r+0x10e>
 8004aac:	1b73      	subs	r3, r6, r5
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	42ae      	cmp	r6, r5
 8004ab2:	d00b      	beq.n	8004acc <_vfiprintf_r+0x9c>
 8004ab4:	002a      	movs	r2, r5
 8004ab6:	0039      	movs	r1, r7
 8004ab8:	9803      	ldr	r0, [sp, #12]
 8004aba:	f7ff ffa6 	bl	8004a0a <__sfputs_r>
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d100      	bne.n	8004ac4 <_vfiprintf_r+0x94>
 8004ac2:	e0af      	b.n	8004c24 <_vfiprintf_r+0x1f4>
 8004ac4:	6963      	ldr	r3, [r4, #20]
 8004ac6:	9a05      	ldr	r2, [sp, #20]
 8004ac8:	189b      	adds	r3, r3, r2
 8004aca:	6163      	str	r3, [r4, #20]
 8004acc:	7833      	ldrb	r3, [r6, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d100      	bne.n	8004ad4 <_vfiprintf_r+0xa4>
 8004ad2:	e0a7      	b.n	8004c24 <_vfiprintf_r+0x1f4>
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	4252      	negs	r2, r2
 8004ada:	6062      	str	r2, [r4, #4]
 8004adc:	a904      	add	r1, sp, #16
 8004ade:	3254      	adds	r2, #84	; 0x54
 8004ae0:	1852      	adds	r2, r2, r1
 8004ae2:	1c75      	adds	r5, r6, #1
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	60e3      	str	r3, [r4, #12]
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	7013      	strb	r3, [r2, #0]
 8004aec:	65a3      	str	r3, [r4, #88]	; 0x58
 8004aee:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <_vfiprintf_r+0x224>)
 8004af0:	2205      	movs	r2, #5
 8004af2:	0018      	movs	r0, r3
 8004af4:	7829      	ldrb	r1, [r5, #0]
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	f000 fbee 	bl	80052d8 <memchr>
 8004afc:	1c6e      	adds	r6, r5, #1
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d11f      	bne.n	8004b42 <_vfiprintf_r+0x112>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	06d3      	lsls	r3, r2, #27
 8004b06:	d504      	bpl.n	8004b12 <_vfiprintf_r+0xe2>
 8004b08:	2353      	movs	r3, #83	; 0x53
 8004b0a:	a904      	add	r1, sp, #16
 8004b0c:	185b      	adds	r3, r3, r1
 8004b0e:	2120      	movs	r1, #32
 8004b10:	7019      	strb	r1, [r3, #0]
 8004b12:	0713      	lsls	r3, r2, #28
 8004b14:	d504      	bpl.n	8004b20 <_vfiprintf_r+0xf0>
 8004b16:	2353      	movs	r3, #83	; 0x53
 8004b18:	a904      	add	r1, sp, #16
 8004b1a:	185b      	adds	r3, r3, r1
 8004b1c:	212b      	movs	r1, #43	; 0x2b
 8004b1e:	7019      	strb	r1, [r3, #0]
 8004b20:	782b      	ldrb	r3, [r5, #0]
 8004b22:	2b2a      	cmp	r3, #42	; 0x2a
 8004b24:	d016      	beq.n	8004b54 <_vfiprintf_r+0x124>
 8004b26:	002e      	movs	r6, r5
 8004b28:	2100      	movs	r1, #0
 8004b2a:	200a      	movs	r0, #10
 8004b2c:	68e3      	ldr	r3, [r4, #12]
 8004b2e:	7832      	ldrb	r2, [r6, #0]
 8004b30:	1c75      	adds	r5, r6, #1
 8004b32:	3a30      	subs	r2, #48	; 0x30
 8004b34:	2a09      	cmp	r2, #9
 8004b36:	d94e      	bls.n	8004bd6 <_vfiprintf_r+0x1a6>
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	d111      	bne.n	8004b60 <_vfiprintf_r+0x130>
 8004b3c:	e017      	b.n	8004b6e <_vfiprintf_r+0x13e>
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7af      	b.n	8004aa2 <_vfiprintf_r+0x72>
 8004b42:	9b05      	ldr	r3, [sp, #20]
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	1ac0      	subs	r0, r0, r3
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4083      	lsls	r3, r0
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	0035      	movs	r5, r6
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	e7cc      	b.n	8004aee <_vfiprintf_r+0xbe>
 8004b54:	9b07      	ldr	r3, [sp, #28]
 8004b56:	1d19      	adds	r1, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9107      	str	r1, [sp, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db01      	blt.n	8004b64 <_vfiprintf_r+0x134>
 8004b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b62:	e004      	b.n	8004b6e <_vfiprintf_r+0x13e>
 8004b64:	425b      	negs	r3, r3
 8004b66:	60e3      	str	r3, [r4, #12]
 8004b68:	2302      	movs	r3, #2
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	7833      	ldrb	r3, [r6, #0]
 8004b70:	2b2e      	cmp	r3, #46	; 0x2e
 8004b72:	d10a      	bne.n	8004b8a <_vfiprintf_r+0x15a>
 8004b74:	7873      	ldrb	r3, [r6, #1]
 8004b76:	2b2a      	cmp	r3, #42	; 0x2a
 8004b78:	d135      	bne.n	8004be6 <_vfiprintf_r+0x1b6>
 8004b7a:	9b07      	ldr	r3, [sp, #28]
 8004b7c:	3602      	adds	r6, #2
 8004b7e:	1d1a      	adds	r2, r3, #4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	9207      	str	r2, [sp, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	db2b      	blt.n	8004be0 <_vfiprintf_r+0x1b0>
 8004b88:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8a:	4d33      	ldr	r5, [pc, #204]	; (8004c58 <_vfiprintf_r+0x228>)
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	0028      	movs	r0, r5
 8004b90:	7831      	ldrb	r1, [r6, #0]
 8004b92:	f000 fba1 	bl	80052d8 <memchr>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d006      	beq.n	8004ba8 <_vfiprintf_r+0x178>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	1b40      	subs	r0, r0, r5
 8004b9e:	4083      	lsls	r3, r0
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	7831      	ldrb	r1, [r6, #0]
 8004baa:	2206      	movs	r2, #6
 8004bac:	482b      	ldr	r0, [pc, #172]	; (8004c5c <_vfiprintf_r+0x22c>)
 8004bae:	1c75      	adds	r5, r6, #1
 8004bb0:	7621      	strb	r1, [r4, #24]
 8004bb2:	f000 fb91 	bl	80052d8 <memchr>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d043      	beq.n	8004c42 <_vfiprintf_r+0x212>
 8004bba:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <_vfiprintf_r+0x230>)
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d125      	bne.n	8004c0c <_vfiprintf_r+0x1dc>
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	9b07      	ldr	r3, [sp, #28]
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	4393      	bics	r3, r2
 8004bc8:	3308      	adds	r3, #8
 8004bca:	9307      	str	r3, [sp, #28]
 8004bcc:	6963      	ldr	r3, [r4, #20]
 8004bce:	9a04      	ldr	r2, [sp, #16]
 8004bd0:	189b      	adds	r3, r3, r2
 8004bd2:	6163      	str	r3, [r4, #20]
 8004bd4:	e764      	b.n	8004aa0 <_vfiprintf_r+0x70>
 8004bd6:	4343      	muls	r3, r0
 8004bd8:	002e      	movs	r6, r5
 8004bda:	2101      	movs	r1, #1
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	e7a6      	b.n	8004b2e <_vfiprintf_r+0xfe>
 8004be0:	2301      	movs	r3, #1
 8004be2:	425b      	negs	r3, r3
 8004be4:	e7d0      	b.n	8004b88 <_vfiprintf_r+0x158>
 8004be6:	2300      	movs	r3, #0
 8004be8:	200a      	movs	r0, #10
 8004bea:	001a      	movs	r2, r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	6063      	str	r3, [r4, #4]
 8004bf0:	7831      	ldrb	r1, [r6, #0]
 8004bf2:	1c75      	adds	r5, r6, #1
 8004bf4:	3930      	subs	r1, #48	; 0x30
 8004bf6:	2909      	cmp	r1, #9
 8004bf8:	d903      	bls.n	8004c02 <_vfiprintf_r+0x1d2>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0c5      	beq.n	8004b8a <_vfiprintf_r+0x15a>
 8004bfe:	9209      	str	r2, [sp, #36]	; 0x24
 8004c00:	e7c3      	b.n	8004b8a <_vfiprintf_r+0x15a>
 8004c02:	4342      	muls	r2, r0
 8004c04:	002e      	movs	r6, r5
 8004c06:	2301      	movs	r3, #1
 8004c08:	1852      	adds	r2, r2, r1
 8004c0a:	e7f1      	b.n	8004bf0 <_vfiprintf_r+0x1c0>
 8004c0c:	aa07      	add	r2, sp, #28
 8004c0e:	9200      	str	r2, [sp, #0]
 8004c10:	0021      	movs	r1, r4
 8004c12:	003a      	movs	r2, r7
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <_vfiprintf_r+0x234>)
 8004c16:	9803      	ldr	r0, [sp, #12]
 8004c18:	e000      	b.n	8004c1c <_vfiprintf_r+0x1ec>
 8004c1a:	bf00      	nop
 8004c1c:	9004      	str	r0, [sp, #16]
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	d1d3      	bne.n	8004bcc <_vfiprintf_r+0x19c>
 8004c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c26:	07db      	lsls	r3, r3, #31
 8004c28:	d405      	bmi.n	8004c36 <_vfiprintf_r+0x206>
 8004c2a:	89bb      	ldrh	r3, [r7, #12]
 8004c2c:	059b      	lsls	r3, r3, #22
 8004c2e:	d402      	bmi.n	8004c36 <_vfiprintf_r+0x206>
 8004c30:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004c32:	f7ff fdc5 	bl	80047c0 <__retarget_lock_release_recursive>
 8004c36:	89bb      	ldrh	r3, [r7, #12]
 8004c38:	065b      	lsls	r3, r3, #25
 8004c3a:	d500      	bpl.n	8004c3e <_vfiprintf_r+0x20e>
 8004c3c:	e71d      	b.n	8004a7a <_vfiprintf_r+0x4a>
 8004c3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c40:	e71d      	b.n	8004a7e <_vfiprintf_r+0x4e>
 8004c42:	aa07      	add	r2, sp, #28
 8004c44:	9200      	str	r2, [sp, #0]
 8004c46:	0021      	movs	r1, r4
 8004c48:	003a      	movs	r2, r7
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <_vfiprintf_r+0x234>)
 8004c4c:	9803      	ldr	r0, [sp, #12]
 8004c4e:	f000 f87b 	bl	8004d48 <_printf_i>
 8004c52:	e7e3      	b.n	8004c1c <_vfiprintf_r+0x1ec>
 8004c54:	080057c0 	.word	0x080057c0
 8004c58:	080057c6 	.word	0x080057c6
 8004c5c:	080057ca 	.word	0x080057ca
 8004c60:	00000000 	.word	0x00000000
 8004c64:	08004a0b 	.word	0x08004a0b

08004c68 <_printf_common>:
 8004c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6a:	0016      	movs	r6, r2
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	688a      	ldr	r2, [r1, #8]
 8004c70:	690b      	ldr	r3, [r1, #16]
 8004c72:	000c      	movs	r4, r1
 8004c74:	9000      	str	r0, [sp, #0]
 8004c76:	4293      	cmp	r3, r2
 8004c78:	da00      	bge.n	8004c7c <_printf_common+0x14>
 8004c7a:	0013      	movs	r3, r2
 8004c7c:	0022      	movs	r2, r4
 8004c7e:	6033      	str	r3, [r6, #0]
 8004c80:	3243      	adds	r2, #67	; 0x43
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	d001      	beq.n	8004c8c <_printf_common+0x24>
 8004c88:	3301      	adds	r3, #1
 8004c8a:	6033      	str	r3, [r6, #0]
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	069b      	lsls	r3, r3, #26
 8004c90:	d502      	bpl.n	8004c98 <_printf_common+0x30>
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	3302      	adds	r3, #2
 8004c96:	6033      	str	r3, [r6, #0]
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	2306      	movs	r3, #6
 8004c9c:	0015      	movs	r5, r2
 8004c9e:	401d      	ands	r5, r3
 8004ca0:	421a      	tst	r2, r3
 8004ca2:	d027      	beq.n	8004cf4 <_printf_common+0x8c>
 8004ca4:	0023      	movs	r3, r4
 8004ca6:	3343      	adds	r3, #67	; 0x43
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	4193      	sbcs	r3, r2
 8004cae:	6822      	ldr	r2, [r4, #0]
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d430      	bmi.n	8004d16 <_printf_common+0xae>
 8004cb4:	0022      	movs	r2, r4
 8004cb6:	9901      	ldr	r1, [sp, #4]
 8004cb8:	9800      	ldr	r0, [sp, #0]
 8004cba:	9d08      	ldr	r5, [sp, #32]
 8004cbc:	3243      	adds	r2, #67	; 0x43
 8004cbe:	47a8      	blx	r5
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d025      	beq.n	8004d10 <_printf_common+0xa8>
 8004cc4:	2206      	movs	r2, #6
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	2500      	movs	r5, #0
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d105      	bne.n	8004cdc <_printf_common+0x74>
 8004cd0:	6833      	ldr	r3, [r6, #0]
 8004cd2:	68e5      	ldr	r5, [r4, #12]
 8004cd4:	1aed      	subs	r5, r5, r3
 8004cd6:	43eb      	mvns	r3, r5
 8004cd8:	17db      	asrs	r3, r3, #31
 8004cda:	401d      	ands	r5, r3
 8004cdc:	68a3      	ldr	r3, [r4, #8]
 8004cde:	6922      	ldr	r2, [r4, #16]
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	dd01      	ble.n	8004ce8 <_printf_common+0x80>
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	18ed      	adds	r5, r5, r3
 8004ce8:	2600      	movs	r6, #0
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d120      	bne.n	8004d30 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e010      	b.n	8004d14 <_printf_common+0xac>
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	68e3      	ldr	r3, [r4, #12]
 8004cf6:	6832      	ldr	r2, [r6, #0]
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	42ab      	cmp	r3, r5
 8004cfc:	ddd2      	ble.n	8004ca4 <_printf_common+0x3c>
 8004cfe:	0022      	movs	r2, r4
 8004d00:	2301      	movs	r3, #1
 8004d02:	9901      	ldr	r1, [sp, #4]
 8004d04:	9800      	ldr	r0, [sp, #0]
 8004d06:	9f08      	ldr	r7, [sp, #32]
 8004d08:	3219      	adds	r2, #25
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1f0      	bne.n	8004cf2 <_printf_common+0x8a>
 8004d10:	2001      	movs	r0, #1
 8004d12:	4240      	negs	r0, r0
 8004d14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d16:	2030      	movs	r0, #48	; 0x30
 8004d18:	18e1      	adds	r1, r4, r3
 8004d1a:	3143      	adds	r1, #67	; 0x43
 8004d1c:	7008      	strb	r0, [r1, #0]
 8004d1e:	0021      	movs	r1, r4
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	3145      	adds	r1, #69	; 0x45
 8004d24:	7809      	ldrb	r1, [r1, #0]
 8004d26:	18a2      	adds	r2, r4, r2
 8004d28:	3243      	adds	r2, #67	; 0x43
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	7011      	strb	r1, [r2, #0]
 8004d2e:	e7c1      	b.n	8004cb4 <_printf_common+0x4c>
 8004d30:	0022      	movs	r2, r4
 8004d32:	2301      	movs	r3, #1
 8004d34:	9901      	ldr	r1, [sp, #4]
 8004d36:	9800      	ldr	r0, [sp, #0]
 8004d38:	9f08      	ldr	r7, [sp, #32]
 8004d3a:	321a      	adds	r2, #26
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d0e6      	beq.n	8004d10 <_printf_common+0xa8>
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7d1      	b.n	8004cea <_printf_common+0x82>
	...

08004d48 <_printf_i>:
 8004d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4a:	b08b      	sub	sp, #44	; 0x2c
 8004d4c:	9206      	str	r2, [sp, #24]
 8004d4e:	000a      	movs	r2, r1
 8004d50:	3243      	adds	r2, #67	; 0x43
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	9005      	str	r0, [sp, #20]
 8004d56:	9204      	str	r2, [sp, #16]
 8004d58:	7e0a      	ldrb	r2, [r1, #24]
 8004d5a:	000c      	movs	r4, r1
 8004d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d5e:	2a78      	cmp	r2, #120	; 0x78
 8004d60:	d809      	bhi.n	8004d76 <_printf_i+0x2e>
 8004d62:	2a62      	cmp	r2, #98	; 0x62
 8004d64:	d80b      	bhi.n	8004d7e <_printf_i+0x36>
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	d100      	bne.n	8004d6c <_printf_i+0x24>
 8004d6a:	e0be      	b.n	8004eea <_printf_i+0x1a2>
 8004d6c:	497c      	ldr	r1, [pc, #496]	; (8004f60 <_printf_i+0x218>)
 8004d6e:	9103      	str	r1, [sp, #12]
 8004d70:	2a58      	cmp	r2, #88	; 0x58
 8004d72:	d100      	bne.n	8004d76 <_printf_i+0x2e>
 8004d74:	e093      	b.n	8004e9e <_printf_i+0x156>
 8004d76:	0026      	movs	r6, r4
 8004d78:	3642      	adds	r6, #66	; 0x42
 8004d7a:	7032      	strb	r2, [r6, #0]
 8004d7c:	e022      	b.n	8004dc4 <_printf_i+0x7c>
 8004d7e:	0010      	movs	r0, r2
 8004d80:	3863      	subs	r0, #99	; 0x63
 8004d82:	2815      	cmp	r0, #21
 8004d84:	d8f7      	bhi.n	8004d76 <_printf_i+0x2e>
 8004d86:	f7fb f9bf 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d8a:	0016      	.short	0x0016
 8004d8c:	fff6001f 	.word	0xfff6001f
 8004d90:	fff6fff6 	.word	0xfff6fff6
 8004d94:	001ffff6 	.word	0x001ffff6
 8004d98:	fff6fff6 	.word	0xfff6fff6
 8004d9c:	fff6fff6 	.word	0xfff6fff6
 8004da0:	003600a3 	.word	0x003600a3
 8004da4:	fff60083 	.word	0xfff60083
 8004da8:	00b4fff6 	.word	0x00b4fff6
 8004dac:	0036fff6 	.word	0x0036fff6
 8004db0:	fff6fff6 	.word	0xfff6fff6
 8004db4:	0087      	.short	0x0087
 8004db6:	0026      	movs	r6, r4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	3642      	adds	r6, #66	; 0x42
 8004dbc:	1d11      	adds	r1, r2, #4
 8004dbe:	6019      	str	r1, [r3, #0]
 8004dc0:	6813      	ldr	r3, [r2, #0]
 8004dc2:	7033      	strb	r3, [r6, #0]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0a2      	b.n	8004f0e <_printf_i+0x1c6>
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	6809      	ldr	r1, [r1, #0]
 8004dcc:	1d02      	adds	r2, r0, #4
 8004dce:	060d      	lsls	r5, r1, #24
 8004dd0:	d50b      	bpl.n	8004dea <_printf_i+0xa2>
 8004dd2:	6805      	ldr	r5, [r0, #0]
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	da03      	bge.n	8004de2 <_printf_i+0x9a>
 8004dda:	232d      	movs	r3, #45	; 0x2d
 8004ddc:	9a04      	ldr	r2, [sp, #16]
 8004dde:	426d      	negs	r5, r5
 8004de0:	7013      	strb	r3, [r2, #0]
 8004de2:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <_printf_i+0x218>)
 8004de4:	270a      	movs	r7, #10
 8004de6:	9303      	str	r3, [sp, #12]
 8004de8:	e01b      	b.n	8004e22 <_printf_i+0xda>
 8004dea:	6805      	ldr	r5, [r0, #0]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	0649      	lsls	r1, r1, #25
 8004df0:	d5f1      	bpl.n	8004dd6 <_printf_i+0x8e>
 8004df2:	b22d      	sxth	r5, r5
 8004df4:	e7ef      	b.n	8004dd6 <_printf_i+0x8e>
 8004df6:	680d      	ldr	r5, [r1, #0]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	1d08      	adds	r0, r1, #4
 8004dfc:	6018      	str	r0, [r3, #0]
 8004dfe:	062e      	lsls	r6, r5, #24
 8004e00:	d501      	bpl.n	8004e06 <_printf_i+0xbe>
 8004e02:	680d      	ldr	r5, [r1, #0]
 8004e04:	e003      	b.n	8004e0e <_printf_i+0xc6>
 8004e06:	066d      	lsls	r5, r5, #25
 8004e08:	d5fb      	bpl.n	8004e02 <_printf_i+0xba>
 8004e0a:	680d      	ldr	r5, [r1, #0]
 8004e0c:	b2ad      	uxth	r5, r5
 8004e0e:	4b54      	ldr	r3, [pc, #336]	; (8004f60 <_printf_i+0x218>)
 8004e10:	2708      	movs	r7, #8
 8004e12:	9303      	str	r3, [sp, #12]
 8004e14:	2a6f      	cmp	r2, #111	; 0x6f
 8004e16:	d000      	beq.n	8004e1a <_printf_i+0xd2>
 8004e18:	3702      	adds	r7, #2
 8004e1a:	0023      	movs	r3, r4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	3343      	adds	r3, #67	; 0x43
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	6863      	ldr	r3, [r4, #4]
 8004e24:	60a3      	str	r3, [r4, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	db03      	blt.n	8004e32 <_printf_i+0xea>
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	438a      	bics	r2, r1
 8004e30:	6022      	str	r2, [r4, #0]
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	d102      	bne.n	8004e3c <_printf_i+0xf4>
 8004e36:	9e04      	ldr	r6, [sp, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <_printf_i+0x10e>
 8004e3c:	9e04      	ldr	r6, [sp, #16]
 8004e3e:	0028      	movs	r0, r5
 8004e40:	0039      	movs	r1, r7
 8004e42:	f7fb f9f1 	bl	8000228 <__aeabi_uidivmod>
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	3e01      	subs	r6, #1
 8004e4a:	5c5b      	ldrb	r3, [r3, r1]
 8004e4c:	7033      	strb	r3, [r6, #0]
 8004e4e:	002b      	movs	r3, r5
 8004e50:	0005      	movs	r5, r0
 8004e52:	429f      	cmp	r7, r3
 8004e54:	d9f3      	bls.n	8004e3e <_printf_i+0xf6>
 8004e56:	2f08      	cmp	r7, #8
 8004e58:	d109      	bne.n	8004e6e <_printf_i+0x126>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	07db      	lsls	r3, r3, #31
 8004e5e:	d506      	bpl.n	8004e6e <_printf_i+0x126>
 8004e60:	6862      	ldr	r2, [r4, #4]
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	dc02      	bgt.n	8004e6e <_printf_i+0x126>
 8004e68:	2330      	movs	r3, #48	; 0x30
 8004e6a:	3e01      	subs	r6, #1
 8004e6c:	7033      	strb	r3, [r6, #0]
 8004e6e:	9b04      	ldr	r3, [sp, #16]
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	9b07      	ldr	r3, [sp, #28]
 8004e76:	0021      	movs	r1, r4
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	9805      	ldr	r0, [sp, #20]
 8004e7c:	9b06      	ldr	r3, [sp, #24]
 8004e7e:	aa09      	add	r2, sp, #36	; 0x24
 8004e80:	f7ff fef2 	bl	8004c68 <_printf_common>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d147      	bne.n	8004f18 <_printf_i+0x1d0>
 8004e88:	2001      	movs	r0, #1
 8004e8a:	4240      	negs	r0, r0
 8004e8c:	b00b      	add	sp, #44	; 0x2c
 8004e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e90:	2220      	movs	r2, #32
 8004e92:	6809      	ldr	r1, [r1, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	6022      	str	r2, [r4, #0]
 8004e98:	2278      	movs	r2, #120	; 0x78
 8004e9a:	4932      	ldr	r1, [pc, #200]	; (8004f64 <_printf_i+0x21c>)
 8004e9c:	9103      	str	r1, [sp, #12]
 8004e9e:	0021      	movs	r1, r4
 8004ea0:	3145      	adds	r1, #69	; 0x45
 8004ea2:	700a      	strb	r2, [r1, #0]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	c920      	ldmia	r1!, {r5}
 8004eaa:	0610      	lsls	r0, r2, #24
 8004eac:	d402      	bmi.n	8004eb4 <_printf_i+0x16c>
 8004eae:	0650      	lsls	r0, r2, #25
 8004eb0:	d500      	bpl.n	8004eb4 <_printf_i+0x16c>
 8004eb2:	b2ad      	uxth	r5, r5
 8004eb4:	6019      	str	r1, [r3, #0]
 8004eb6:	07d3      	lsls	r3, r2, #31
 8004eb8:	d502      	bpl.n	8004ec0 <_printf_i+0x178>
 8004eba:	2320      	movs	r3, #32
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	6023      	str	r3, [r4, #0]
 8004ec0:	2710      	movs	r7, #16
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	d1a9      	bne.n	8004e1a <_printf_i+0xd2>
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	4393      	bics	r3, r2
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	e7a4      	b.n	8004e1a <_printf_i+0xd2>
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	680d      	ldr	r5, [r1, #0]
 8004ed4:	1d10      	adds	r0, r2, #4
 8004ed6:	6949      	ldr	r1, [r1, #20]
 8004ed8:	6018      	str	r0, [r3, #0]
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	062e      	lsls	r6, r5, #24
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0x19c>
 8004ee0:	6019      	str	r1, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <_printf_i+0x1a2>
 8004ee4:	066d      	lsls	r5, r5, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0x198>
 8004ee8:	8019      	strh	r1, [r3, #0]
 8004eea:	2300      	movs	r3, #0
 8004eec:	9e04      	ldr	r6, [sp, #16]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	e7c0      	b.n	8004e74 <_printf_i+0x12c>
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	1d11      	adds	r1, r2, #4
 8004ef6:	6019      	str	r1, [r3, #0]
 8004ef8:	6816      	ldr	r6, [r2, #0]
 8004efa:	2100      	movs	r1, #0
 8004efc:	0030      	movs	r0, r6
 8004efe:	6862      	ldr	r2, [r4, #4]
 8004f00:	f000 f9ea 	bl	80052d8 <memchr>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	d001      	beq.n	8004f0c <_printf_i+0x1c4>
 8004f08:	1b80      	subs	r0, r0, r6
 8004f0a:	6060      	str	r0, [r4, #4]
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	6123      	str	r3, [r4, #16]
 8004f10:	2300      	movs	r3, #0
 8004f12:	9a04      	ldr	r2, [sp, #16]
 8004f14:	7013      	strb	r3, [r2, #0]
 8004f16:	e7ad      	b.n	8004e74 <_printf_i+0x12c>
 8004f18:	0032      	movs	r2, r6
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	9906      	ldr	r1, [sp, #24]
 8004f1e:	9805      	ldr	r0, [sp, #20]
 8004f20:	9d07      	ldr	r5, [sp, #28]
 8004f22:	47a8      	blx	r5
 8004f24:	3001      	adds	r0, #1
 8004f26:	d0af      	beq.n	8004e88 <_printf_i+0x140>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	079b      	lsls	r3, r3, #30
 8004f2c:	d415      	bmi.n	8004f5a <_printf_i+0x212>
 8004f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f30:	68e0      	ldr	r0, [r4, #12]
 8004f32:	4298      	cmp	r0, r3
 8004f34:	daaa      	bge.n	8004e8c <_printf_i+0x144>
 8004f36:	0018      	movs	r0, r3
 8004f38:	e7a8      	b.n	8004e8c <_printf_i+0x144>
 8004f3a:	0022      	movs	r2, r4
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	9906      	ldr	r1, [sp, #24]
 8004f40:	9805      	ldr	r0, [sp, #20]
 8004f42:	9e07      	ldr	r6, [sp, #28]
 8004f44:	3219      	adds	r2, #25
 8004f46:	47b0      	blx	r6
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d09d      	beq.n	8004e88 <_printf_i+0x140>
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	42ab      	cmp	r3, r5
 8004f56:	dcf0      	bgt.n	8004f3a <_printf_i+0x1f2>
 8004f58:	e7e9      	b.n	8004f2e <_printf_i+0x1e6>
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	e7f7      	b.n	8004f4e <_printf_i+0x206>
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	080057d1 	.word	0x080057d1
 8004f64:	080057e2 	.word	0x080057e2

08004f68 <__sflush_r>:
 8004f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f6a:	898b      	ldrh	r3, [r1, #12]
 8004f6c:	0005      	movs	r5, r0
 8004f6e:	000c      	movs	r4, r1
 8004f70:	071a      	lsls	r2, r3, #28
 8004f72:	d45c      	bmi.n	800502e <__sflush_r+0xc6>
 8004f74:	684a      	ldr	r2, [r1, #4]
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	dc04      	bgt.n	8004f84 <__sflush_r+0x1c>
 8004f7a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	dc01      	bgt.n	8004f84 <__sflush_r+0x1c>
 8004f80:	2000      	movs	r0, #0
 8004f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	d0fa      	beq.n	8004f80 <__sflush_r+0x18>
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2080      	movs	r0, #128	; 0x80
 8004f8e:	682e      	ldr	r6, [r5, #0]
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	001a      	movs	r2, r3
 8004f94:	0140      	lsls	r0, r0, #5
 8004f96:	6a21      	ldr	r1, [r4, #32]
 8004f98:	4002      	ands	r2, r0
 8004f9a:	4203      	tst	r3, r0
 8004f9c:	d034      	beq.n	8005008 <__sflush_r+0xa0>
 8004f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	075b      	lsls	r3, r3, #29
 8004fa4:	d506      	bpl.n	8004fb4 <__sflush_r+0x4c>
 8004fa6:	6863      	ldr	r3, [r4, #4]
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <__sflush_r+0x4c>
 8004fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb2:	1ac0      	subs	r0, r0, r3
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	0028      	movs	r0, r5
 8004fba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004fbc:	6a21      	ldr	r1, [r4, #32]
 8004fbe:	47b8      	blx	r7
 8004fc0:	89a2      	ldrh	r2, [r4, #12]
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d106      	bne.n	8004fd4 <__sflush_r+0x6c>
 8004fc6:	6829      	ldr	r1, [r5, #0]
 8004fc8:	291d      	cmp	r1, #29
 8004fca:	d82c      	bhi.n	8005026 <__sflush_r+0xbe>
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <__sflush_r+0x110>)
 8004fce:	410b      	asrs	r3, r1
 8004fd0:	07db      	lsls	r3, r3, #31
 8004fd2:	d428      	bmi.n	8005026 <__sflush_r+0xbe>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6063      	str	r3, [r4, #4]
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	04d2      	lsls	r2, r2, #19
 8004fde:	d505      	bpl.n	8004fec <__sflush_r+0x84>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <__sflush_r+0x82>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d100      	bne.n	8004fec <__sflush_r+0x84>
 8004fea:	6560      	str	r0, [r4, #84]	; 0x54
 8004fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fee:	602e      	str	r6, [r5, #0]
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d0c5      	beq.n	8004f80 <__sflush_r+0x18>
 8004ff4:	0023      	movs	r3, r4
 8004ff6:	3344      	adds	r3, #68	; 0x44
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	d002      	beq.n	8005002 <__sflush_r+0x9a>
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f7ff fbf1 	bl	80047e4 <_free_r>
 8005002:	2000      	movs	r0, #0
 8005004:	6360      	str	r0, [r4, #52]	; 0x34
 8005006:	e7bc      	b.n	8004f82 <__sflush_r+0x1a>
 8005008:	2301      	movs	r3, #1
 800500a:	0028      	movs	r0, r5
 800500c:	47b8      	blx	r7
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d1c6      	bne.n	8004fa0 <__sflush_r+0x38>
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0c3      	beq.n	8004fa0 <__sflush_r+0x38>
 8005018:	2b1d      	cmp	r3, #29
 800501a:	d001      	beq.n	8005020 <__sflush_r+0xb8>
 800501c:	2b16      	cmp	r3, #22
 800501e:	d101      	bne.n	8005024 <__sflush_r+0xbc>
 8005020:	602e      	str	r6, [r5, #0]
 8005022:	e7ad      	b.n	8004f80 <__sflush_r+0x18>
 8005024:	89a2      	ldrh	r2, [r4, #12]
 8005026:	2340      	movs	r3, #64	; 0x40
 8005028:	4313      	orrs	r3, r2
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	e7a9      	b.n	8004f82 <__sflush_r+0x1a>
 800502e:	690e      	ldr	r6, [r1, #16]
 8005030:	2e00      	cmp	r6, #0
 8005032:	d0a5      	beq.n	8004f80 <__sflush_r+0x18>
 8005034:	680f      	ldr	r7, [r1, #0]
 8005036:	600e      	str	r6, [r1, #0]
 8005038:	1bba      	subs	r2, r7, r6
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	079b      	lsls	r3, r3, #30
 8005040:	d100      	bne.n	8005044 <__sflush_r+0xdc>
 8005042:	694a      	ldr	r2, [r1, #20]
 8005044:	60a2      	str	r2, [r4, #8]
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	dd99      	ble.n	8004f80 <__sflush_r+0x18>
 800504c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800504e:	0032      	movs	r2, r6
 8005050:	001f      	movs	r7, r3
 8005052:	0028      	movs	r0, r5
 8005054:	9b01      	ldr	r3, [sp, #4]
 8005056:	6a21      	ldr	r1, [r4, #32]
 8005058:	47b8      	blx	r7
 800505a:	2800      	cmp	r0, #0
 800505c:	dc06      	bgt.n	800506c <__sflush_r+0x104>
 800505e:	2340      	movs	r3, #64	; 0x40
 8005060:	2001      	movs	r0, #1
 8005062:	89a2      	ldrh	r2, [r4, #12]
 8005064:	4240      	negs	r0, r0
 8005066:	4313      	orrs	r3, r2
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	e78a      	b.n	8004f82 <__sflush_r+0x1a>
 800506c:	9b01      	ldr	r3, [sp, #4]
 800506e:	1836      	adds	r6, r6, r0
 8005070:	1a1b      	subs	r3, r3, r0
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	e7e7      	b.n	8005046 <__sflush_r+0xde>
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	dfbffffe 	.word	0xdfbffffe

0800507c <_fflush_r>:
 800507c:	690b      	ldr	r3, [r1, #16]
 800507e:	b570      	push	{r4, r5, r6, lr}
 8005080:	0005      	movs	r5, r0
 8005082:	000c      	movs	r4, r1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <_fflush_r+0x12>
 8005088:	2500      	movs	r5, #0
 800508a:	0028      	movs	r0, r5
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	2800      	cmp	r0, #0
 8005090:	d004      	beq.n	800509c <_fflush_r+0x20>
 8005092:	6a03      	ldr	r3, [r0, #32]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <_fflush_r+0x20>
 8005098:	f7ff fa80 	bl	800459c <__sinit>
 800509c:	220c      	movs	r2, #12
 800509e:	5ea3      	ldrsh	r3, [r4, r2]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f1      	beq.n	8005088 <_fflush_r+0xc>
 80050a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050a6:	07d2      	lsls	r2, r2, #31
 80050a8:	d404      	bmi.n	80050b4 <_fflush_r+0x38>
 80050aa:	059b      	lsls	r3, r3, #22
 80050ac:	d402      	bmi.n	80050b4 <_fflush_r+0x38>
 80050ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050b0:	f7ff fb85 	bl	80047be <__retarget_lock_acquire_recursive>
 80050b4:	0028      	movs	r0, r5
 80050b6:	0021      	movs	r1, r4
 80050b8:	f7ff ff56 	bl	8004f68 <__sflush_r>
 80050bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050be:	0005      	movs	r5, r0
 80050c0:	07db      	lsls	r3, r3, #31
 80050c2:	d4e2      	bmi.n	800508a <_fflush_r+0xe>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	059b      	lsls	r3, r3, #22
 80050c8:	d4df      	bmi.n	800508a <_fflush_r+0xe>
 80050ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050cc:	f7ff fb78 	bl	80047c0 <__retarget_lock_release_recursive>
 80050d0:	e7db      	b.n	800508a <_fflush_r+0xe>

080050d2 <__swbuf_r>:
 80050d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d4:	0006      	movs	r6, r0
 80050d6:	000d      	movs	r5, r1
 80050d8:	0014      	movs	r4, r2
 80050da:	2800      	cmp	r0, #0
 80050dc:	d004      	beq.n	80050e8 <__swbuf_r+0x16>
 80050de:	6a03      	ldr	r3, [r0, #32]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <__swbuf_r+0x16>
 80050e4:	f7ff fa5a 	bl	800459c <__sinit>
 80050e8:	69a3      	ldr	r3, [r4, #24]
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	071b      	lsls	r3, r3, #28
 80050f0:	d528      	bpl.n	8005144 <__swbuf_r+0x72>
 80050f2:	6923      	ldr	r3, [r4, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d025      	beq.n	8005144 <__swbuf_r+0x72>
 80050f8:	6923      	ldr	r3, [r4, #16]
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	b2ef      	uxtb	r7, r5
 80050fe:	1ac0      	subs	r0, r0, r3
 8005100:	6963      	ldr	r3, [r4, #20]
 8005102:	b2ed      	uxtb	r5, r5
 8005104:	4283      	cmp	r3, r0
 8005106:	dc05      	bgt.n	8005114 <__swbuf_r+0x42>
 8005108:	0021      	movs	r1, r4
 800510a:	0030      	movs	r0, r6
 800510c:	f7ff ffb6 	bl	800507c <_fflush_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	d11d      	bne.n	8005150 <__swbuf_r+0x7e>
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	3001      	adds	r0, #1
 8005118:	3b01      	subs	r3, #1
 800511a:	60a3      	str	r3, [r4, #8]
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	6022      	str	r2, [r4, #0]
 8005122:	701f      	strb	r7, [r3, #0]
 8005124:	6963      	ldr	r3, [r4, #20]
 8005126:	4283      	cmp	r3, r0
 8005128:	d004      	beq.n	8005134 <__swbuf_r+0x62>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	07db      	lsls	r3, r3, #31
 800512e:	d507      	bpl.n	8005140 <__swbuf_r+0x6e>
 8005130:	2d0a      	cmp	r5, #10
 8005132:	d105      	bne.n	8005140 <__swbuf_r+0x6e>
 8005134:	0021      	movs	r1, r4
 8005136:	0030      	movs	r0, r6
 8005138:	f7ff ffa0 	bl	800507c <_fflush_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	d107      	bne.n	8005150 <__swbuf_r+0x7e>
 8005140:	0028      	movs	r0, r5
 8005142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005144:	0021      	movs	r1, r4
 8005146:	0030      	movs	r0, r6
 8005148:	f000 f806 	bl	8005158 <__swsetup_r>
 800514c:	2800      	cmp	r0, #0
 800514e:	d0d3      	beq.n	80050f8 <__swbuf_r+0x26>
 8005150:	2501      	movs	r5, #1
 8005152:	426d      	negs	r5, r5
 8005154:	e7f4      	b.n	8005140 <__swbuf_r+0x6e>
	...

08005158 <__swsetup_r>:
 8005158:	4b30      	ldr	r3, [pc, #192]	; (800521c <__swsetup_r+0xc4>)
 800515a:	b570      	push	{r4, r5, r6, lr}
 800515c:	0005      	movs	r5, r0
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	000c      	movs	r4, r1
 8005162:	2800      	cmp	r0, #0
 8005164:	d004      	beq.n	8005170 <__swsetup_r+0x18>
 8005166:	6a03      	ldr	r3, [r0, #32]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <__swsetup_r+0x18>
 800516c:	f7ff fa16 	bl	800459c <__sinit>
 8005170:	230c      	movs	r3, #12
 8005172:	5ee2      	ldrsh	r2, [r4, r3]
 8005174:	b293      	uxth	r3, r2
 8005176:	0711      	lsls	r1, r2, #28
 8005178:	d423      	bmi.n	80051c2 <__swsetup_r+0x6a>
 800517a:	06d9      	lsls	r1, r3, #27
 800517c:	d407      	bmi.n	800518e <__swsetup_r+0x36>
 800517e:	2309      	movs	r3, #9
 8005180:	2001      	movs	r0, #1
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	3337      	adds	r3, #55	; 0x37
 8005186:	4313      	orrs	r3, r2
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	4240      	negs	r0, r0
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	075b      	lsls	r3, r3, #29
 8005190:	d513      	bpl.n	80051ba <__swsetup_r+0x62>
 8005192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005194:	2900      	cmp	r1, #0
 8005196:	d008      	beq.n	80051aa <__swsetup_r+0x52>
 8005198:	0023      	movs	r3, r4
 800519a:	3344      	adds	r3, #68	; 0x44
 800519c:	4299      	cmp	r1, r3
 800519e:	d002      	beq.n	80051a6 <__swsetup_r+0x4e>
 80051a0:	0028      	movs	r0, r5
 80051a2:	f7ff fb1f 	bl	80047e4 <_free_r>
 80051a6:	2300      	movs	r3, #0
 80051a8:	6363      	str	r3, [r4, #52]	; 0x34
 80051aa:	2224      	movs	r2, #36	; 0x24
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	4393      	bics	r3, r2
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	2300      	movs	r3, #0
 80051b4:	6063      	str	r3, [r4, #4]
 80051b6:	6923      	ldr	r3, [r4, #16]
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	2308      	movs	r3, #8
 80051bc:	89a2      	ldrh	r2, [r4, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <__swsetup_r+0x88>
 80051c8:	21a0      	movs	r1, #160	; 0xa0
 80051ca:	2280      	movs	r2, #128	; 0x80
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	0089      	lsls	r1, r1, #2
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	400b      	ands	r3, r1
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <__swsetup_r+0x88>
 80051d8:	0021      	movs	r1, r4
 80051da:	0028      	movs	r0, r5
 80051dc:	f000 f8b0 	bl	8005340 <__smakebuf_r>
 80051e0:	220c      	movs	r2, #12
 80051e2:	5ea3      	ldrsh	r3, [r4, r2]
 80051e4:	2001      	movs	r0, #1
 80051e6:	001a      	movs	r2, r3
 80051e8:	b299      	uxth	r1, r3
 80051ea:	4002      	ands	r2, r0
 80051ec:	4203      	tst	r3, r0
 80051ee:	d00f      	beq.n	8005210 <__swsetup_r+0xb8>
 80051f0:	2200      	movs	r2, #0
 80051f2:	60a2      	str	r2, [r4, #8]
 80051f4:	6962      	ldr	r2, [r4, #20]
 80051f6:	4252      	negs	r2, r2
 80051f8:	61a2      	str	r2, [r4, #24]
 80051fa:	2000      	movs	r0, #0
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	4282      	cmp	r2, r0
 8005200:	d1c4      	bne.n	800518c <__swsetup_r+0x34>
 8005202:	0609      	lsls	r1, r1, #24
 8005204:	d5c2      	bpl.n	800518c <__swsetup_r+0x34>
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	4313      	orrs	r3, r2
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	3801      	subs	r0, #1
 800520e:	e7bd      	b.n	800518c <__swsetup_r+0x34>
 8005210:	0788      	lsls	r0, r1, #30
 8005212:	d400      	bmi.n	8005216 <__swsetup_r+0xbe>
 8005214:	6962      	ldr	r2, [r4, #20]
 8005216:	60a2      	str	r2, [r4, #8]
 8005218:	e7ef      	b.n	80051fa <__swsetup_r+0xa2>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	200000e8 	.word	0x200000e8

08005220 <_raise_r>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	0004      	movs	r4, r0
 8005224:	000d      	movs	r5, r1
 8005226:	291f      	cmp	r1, #31
 8005228:	d904      	bls.n	8005234 <_raise_r+0x14>
 800522a:	2316      	movs	r3, #22
 800522c:	6003      	str	r3, [r0, #0]
 800522e:	2001      	movs	r0, #1
 8005230:	4240      	negs	r0, r0
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <_raise_r+0x24>
 800523a:	008a      	lsls	r2, r1, #2
 800523c:	189b      	adds	r3, r3, r2
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2a00      	cmp	r2, #0
 8005242:	d108      	bne.n	8005256 <_raise_r+0x36>
 8005244:	0020      	movs	r0, r4
 8005246:	f000 f831 	bl	80052ac <_getpid_r>
 800524a:	002a      	movs	r2, r5
 800524c:	0001      	movs	r1, r0
 800524e:	0020      	movs	r0, r4
 8005250:	f000 f81a 	bl	8005288 <_kill_r>
 8005254:	e7ed      	b.n	8005232 <_raise_r+0x12>
 8005256:	2000      	movs	r0, #0
 8005258:	2a01      	cmp	r2, #1
 800525a:	d0ea      	beq.n	8005232 <_raise_r+0x12>
 800525c:	1c51      	adds	r1, r2, #1
 800525e:	d103      	bne.n	8005268 <_raise_r+0x48>
 8005260:	2316      	movs	r3, #22
 8005262:	3001      	adds	r0, #1
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	e7e4      	b.n	8005232 <_raise_r+0x12>
 8005268:	2400      	movs	r4, #0
 800526a:	0028      	movs	r0, r5
 800526c:	601c      	str	r4, [r3, #0]
 800526e:	4790      	blx	r2
 8005270:	0020      	movs	r0, r4
 8005272:	e7de      	b.n	8005232 <_raise_r+0x12>

08005274 <raise>:
 8005274:	b510      	push	{r4, lr}
 8005276:	4b03      	ldr	r3, [pc, #12]	; (8005284 <raise+0x10>)
 8005278:	0001      	movs	r1, r0
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	f7ff ffd0 	bl	8005220 <_raise_r>
 8005280:	bd10      	pop	{r4, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	200000e8 	.word	0x200000e8

08005288 <_kill_r>:
 8005288:	2300      	movs	r3, #0
 800528a:	b570      	push	{r4, r5, r6, lr}
 800528c:	4d06      	ldr	r5, [pc, #24]	; (80052a8 <_kill_r+0x20>)
 800528e:	0004      	movs	r4, r0
 8005290:	0008      	movs	r0, r1
 8005292:	0011      	movs	r1, r2
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	f7fb faed 	bl	8000874 <_kill>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	d103      	bne.n	80052a6 <_kill_r+0x1e>
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d000      	beq.n	80052a6 <_kill_r+0x1e>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	200004ac 	.word	0x200004ac

080052ac <_getpid_r>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	f7fb fadb 	bl	8000868 <_getpid>
 80052b2:	bd10      	pop	{r4, pc}

080052b4 <_sbrk_r>:
 80052b4:	2300      	movs	r3, #0
 80052b6:	b570      	push	{r4, r5, r6, lr}
 80052b8:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_sbrk_r+0x20>)
 80052ba:	0004      	movs	r4, r0
 80052bc:	0008      	movs	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fb fb5a 	bl	8000978 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d103      	bne.n	80052d0 <_sbrk_r+0x1c>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d000      	beq.n	80052d0 <_sbrk_r+0x1c>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	200004ac 	.word	0x200004ac

080052d8 <memchr>:
 80052d8:	b2c9      	uxtb	r1, r1
 80052da:	1882      	adds	r2, r0, r2
 80052dc:	4290      	cmp	r0, r2
 80052de:	d101      	bne.n	80052e4 <memchr+0xc>
 80052e0:	2000      	movs	r0, #0
 80052e2:	4770      	bx	lr
 80052e4:	7803      	ldrb	r3, [r0, #0]
 80052e6:	428b      	cmp	r3, r1
 80052e8:	d0fb      	beq.n	80052e2 <memchr+0xa>
 80052ea:	3001      	adds	r0, #1
 80052ec:	e7f6      	b.n	80052dc <memchr+0x4>
	...

080052f0 <__swhatbuf_r>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	000e      	movs	r6, r1
 80052f4:	001d      	movs	r5, r3
 80052f6:	230e      	movs	r3, #14
 80052f8:	5ec9      	ldrsh	r1, [r1, r3]
 80052fa:	0014      	movs	r4, r2
 80052fc:	b096      	sub	sp, #88	; 0x58
 80052fe:	2900      	cmp	r1, #0
 8005300:	da0c      	bge.n	800531c <__swhatbuf_r+0x2c>
 8005302:	89b2      	ldrh	r2, [r6, #12]
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	0011      	movs	r1, r2
 8005308:	4019      	ands	r1, r3
 800530a:	421a      	tst	r2, r3
 800530c:	d013      	beq.n	8005336 <__swhatbuf_r+0x46>
 800530e:	2100      	movs	r1, #0
 8005310:	3b40      	subs	r3, #64	; 0x40
 8005312:	2000      	movs	r0, #0
 8005314:	6029      	str	r1, [r5, #0]
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	b016      	add	sp, #88	; 0x58
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	466a      	mov	r2, sp
 800531e:	f000 f84d 	bl	80053bc <_fstat_r>
 8005322:	2800      	cmp	r0, #0
 8005324:	dbed      	blt.n	8005302 <__swhatbuf_r+0x12>
 8005326:	23f0      	movs	r3, #240	; 0xf0
 8005328:	9901      	ldr	r1, [sp, #4]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	4019      	ands	r1, r3
 800532e:	4b03      	ldr	r3, [pc, #12]	; (800533c <__swhatbuf_r+0x4c>)
 8005330:	18c9      	adds	r1, r1, r3
 8005332:	424b      	negs	r3, r1
 8005334:	4159      	adcs	r1, r3
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	e7ea      	b.n	8005312 <__swhatbuf_r+0x22>
 800533c:	ffffe000 	.word	0xffffe000

08005340 <__smakebuf_r>:
 8005340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005342:	2602      	movs	r6, #2
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	0005      	movs	r5, r0
 8005348:	000c      	movs	r4, r1
 800534a:	4233      	tst	r3, r6
 800534c:	d006      	beq.n	800535c <__smakebuf_r+0x1c>
 800534e:	0023      	movs	r3, r4
 8005350:	3347      	adds	r3, #71	; 0x47
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	6123      	str	r3, [r4, #16]
 8005356:	2301      	movs	r3, #1
 8005358:	6163      	str	r3, [r4, #20]
 800535a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800535c:	466a      	mov	r2, sp
 800535e:	ab01      	add	r3, sp, #4
 8005360:	f7ff ffc6 	bl	80052f0 <__swhatbuf_r>
 8005364:	9900      	ldr	r1, [sp, #0]
 8005366:	0007      	movs	r7, r0
 8005368:	0028      	movs	r0, r5
 800536a:	f7ff faa7 	bl	80048bc <_malloc_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	d108      	bne.n	8005384 <__smakebuf_r+0x44>
 8005372:	220c      	movs	r2, #12
 8005374:	5ea3      	ldrsh	r3, [r4, r2]
 8005376:	059a      	lsls	r2, r3, #22
 8005378:	d4ef      	bmi.n	800535a <__smakebuf_r+0x1a>
 800537a:	2203      	movs	r2, #3
 800537c:	4393      	bics	r3, r2
 800537e:	431e      	orrs	r6, r3
 8005380:	81a6      	strh	r6, [r4, #12]
 8005382:	e7e4      	b.n	800534e <__smakebuf_r+0xe>
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	89a2      	ldrh	r2, [r4, #12]
 8005388:	6020      	str	r0, [r4, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	9b00      	ldr	r3, [sp, #0]
 8005390:	6120      	str	r0, [r4, #16]
 8005392:	6163      	str	r3, [r4, #20]
 8005394:	9b01      	ldr	r3, [sp, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <__smakebuf_r+0x74>
 800539a:	0028      	movs	r0, r5
 800539c:	230e      	movs	r3, #14
 800539e:	5ee1      	ldrsh	r1, [r4, r3]
 80053a0:	f000 f81e 	bl	80053e0 <_isatty_r>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d005      	beq.n	80053b4 <__smakebuf_r+0x74>
 80053a8:	2303      	movs	r3, #3
 80053aa:	89a2      	ldrh	r2, [r4, #12]
 80053ac:	439a      	bics	r2, r3
 80053ae:	3b02      	subs	r3, #2
 80053b0:	4313      	orrs	r3, r2
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	433b      	orrs	r3, r7
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	e7ce      	b.n	800535a <__smakebuf_r+0x1a>

080053bc <_fstat_r>:
 80053bc:	2300      	movs	r3, #0
 80053be:	b570      	push	{r4, r5, r6, lr}
 80053c0:	4d06      	ldr	r5, [pc, #24]	; (80053dc <_fstat_r+0x20>)
 80053c2:	0004      	movs	r4, r0
 80053c4:	0008      	movs	r0, r1
 80053c6:	0011      	movs	r1, r2
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	f7fb fab2 	bl	8000932 <_fstat>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	d103      	bne.n	80053da <_fstat_r+0x1e>
 80053d2:	682b      	ldr	r3, [r5, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d000      	beq.n	80053da <_fstat_r+0x1e>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	200004ac 	.word	0x200004ac

080053e0 <_isatty_r>:
 80053e0:	2300      	movs	r3, #0
 80053e2:	b570      	push	{r4, r5, r6, lr}
 80053e4:	4d06      	ldr	r5, [pc, #24]	; (8005400 <_isatty_r+0x20>)
 80053e6:	0004      	movs	r4, r0
 80053e8:	0008      	movs	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fb faaf 	bl	800094e <_isatty>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d103      	bne.n	80053fc <_isatty_r+0x1c>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d000      	beq.n	80053fc <_isatty_r+0x1c>
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	200004ac 	.word	0x200004ac

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
