
pec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CFGFLASH      00000400  08005800  08005800  00015800  2**10
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005c00  08005c00  000200ec  2**0
                  CONTENTS
  5 .ARM          00000000  08005c00  08005c00  000200ec  2**0
                  CONTENTS
  6 .preinit_array 00000000  08005c00  08005c00  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000ec  20000000  08005c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003c0  200000ec  08005cf4  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  08005cf4  000204ac  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010624  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f9c  00000000  00000000  0003077b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ee0  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b63  00000000  00000000  000345f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014387  00000000  00000000  0003515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017d95  00000000  00000000  000494e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006a647  00000000  00000000  00061277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003b0c  00000000  00000000  000cb8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  000cf3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ec 	.word	0x200000ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005374 	.word	0x08005374

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f0 	.word	0x200000f0
 8000104:	08005374 	.word	0x08005374

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f001 ffce 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f809 	bl	8000252 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8e2 	bl	8000408 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8b0 	bl	80003a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000248:	f000 f85a 	bl	8000300 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  extern int app_main( void );
  app_main();
 800024c:	f000 fbd3 	bl	80009f6 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x1c>

08000252 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000252:	b590      	push	{r4, r7, lr}
 8000254:	b095      	sub	sp, #84	; 0x54
 8000256:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000258:	2420      	movs	r4, #32
 800025a:	193b      	adds	r3, r7, r4
 800025c:	0018      	movs	r0, r3
 800025e:	2330      	movs	r3, #48	; 0x30
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f004 f9e2 	bl	800462c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	2310      	movs	r3, #16
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	0018      	movs	r0, r3
 800026e:	2310      	movs	r3, #16
 8000270:	001a      	movs	r2, r3
 8000272:	2100      	movs	r1, #0
 8000274:	f004 f9da 	bl	800462c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	003b      	movs	r3, r7
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f004 f9d3 	bl	800462c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	0021      	movs	r1, r4
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2202      	movs	r2, #2
 800028c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2201      	movs	r2, #1
 8000292:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2210      	movs	r2, #16
 8000298:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2200      	movs	r2, #0
 800029e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	0018      	movs	r0, r3
 80002a4:	f002 fad2 	bl	800284c <HAL_RCC_OscConfig>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ac:	f000 f950 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	2110      	movs	r1, #16
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f002 fdd6 	bl	8002e80 <HAL_RCC_ClockConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002d8:	f000 f93a 	bl	8000550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002dc:	003b      	movs	r3, r7
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	003b      	movs	r3, r7
 80002ea:	0018      	movs	r0, r3
 80002ec:	f002 ff0c 	bl	8003108 <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002f4:	f000 f92c 	bl	8000550 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b015      	add	sp, #84	; 0x54
 80002fe:	bd90      	pop	{r4, r7, pc}

08000300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	2308      	movs	r3, #8
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2310      	movs	r3, #16
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f004 f98b 	bl	800462c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000316:	003b      	movs	r3, r7
 8000318:	0018      	movs	r0, r3
 800031a:	2308      	movs	r3, #8
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f004 f984 	bl	800462c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	05d2      	lsls	r2, r2, #23
 800032a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <MX_TIM2_Init+0xa0>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000332:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_TIM2_Init+0xa0>)
 800033a:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <MX_TIM2_Init+0xa4>)
 800033c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM2_Init+0xa0>)
 800034c:	0018      	movs	r0, r3
 800034e:	f002 ffa9 	bl	80032a4 <HAL_TIM_Base_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000356:	f000 f8fb 	bl	8000550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035a:	2108      	movs	r1, #8
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	0152      	lsls	r2, r2, #5
 8000362:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000364:	187a      	adds	r2, r7, r1
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000368:	0011      	movs	r1, r2
 800036a:	0018      	movs	r0, r3
 800036c:	f003 f952 	bl	8003614 <HAL_TIM_ConfigClockSource>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000374:	f000 f8ec 	bl	8000550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000378:	003b      	movs	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000384:	003a      	movs	r2, r7
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_TIM2_Init+0xa0>)
 8000388:	0011      	movs	r1, r2
 800038a:	0018      	movs	r0, r3
 800038c:	f003 fb5c 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000394:	f000 f8dc 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b006      	add	sp, #24
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000108 	.word	0x20000108
 80003a4:	0000ffff 	.word	0x0000ffff

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART1_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003b4:	2296      	movs	r2, #150	; 0x96
 80003b6:	0192      	lsls	r2, r2, #6
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f003 fb93 	bl	8003b18 <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f8ab 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000150 	.word	0x20000150
 8000404:	40013800 	.word	0x40013800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	240c      	movs	r4, #12
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2314      	movs	r3, #20
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f004 f907 	bl	800462c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b48      	ldr	r3, [pc, #288]	; (8000540 <MX_GPIO_Init+0x138>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b47      	ldr	r3, [pc, #284]	; (8000540 <MX_GPIO_Init+0x138>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	03c9      	lsls	r1, r1, #15
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b44      	ldr	r3, [pc, #272]	; (8000540 <MX_GPIO_Init+0x138>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	03db      	lsls	r3, r3, #15
 8000434:	4013      	ands	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <MX_GPIO_Init+0x138>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b40      	ldr	r3, [pc, #256]	; (8000540 <MX_GPIO_Init+0x138>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0289      	lsls	r1, r1, #10
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <MX_GPIO_Init+0x138>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <MX_GPIO_Init+0x138>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b39      	ldr	r3, [pc, #228]	; (8000540 <MX_GPIO_Init+0x138>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	02c9      	lsls	r1, r1, #11
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b36      	ldr	r3, [pc, #216]	; (8000540 <MX_GPIO_Init+0x138>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	02db      	lsls	r3, r3, #11
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_RESET);
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2102      	movs	r1, #2
 800047a:	0018      	movs	r0, r3
 800047c:	f002 f9ad 	bl	80027da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2203      	movs	r2, #3
 800048a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000492:	193b      	adds	r3, r7, r4
 8000494:	4a2b      	ldr	r2, [pc, #172]	; (8000544 <MX_GPIO_Init+0x13c>)
 8000496:	0019      	movs	r1, r3
 8000498:	0010      	movs	r0, r2
 800049a:	f002 f819 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXI1_Pin */
  GPIO_InitStruct.Pin = EXI1_Pin;
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2202      	movs	r2, #2
 80004a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	22c4      	movs	r2, #196	; 0xc4
 80004aa:	0392      	lsls	r2, r2, #14
 80004ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	000c      	movs	r4, r1
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXI1_GPIO_Port, &GPIO_InitStruct);
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4a22      	ldr	r2, [pc, #136]	; (8000544 <MX_GPIO_Init+0x13c>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f002 f807 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	4a20      	ldr	r2, [pc, #128]	; (8000548 <MX_GPIO_Init+0x140>)
 80004c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2203      	movs	r2, #3
 80004cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	193a      	adds	r2, r7, r4
 80004d6:	2390      	movs	r3, #144	; 0x90
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fff7 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_CT_Pin */
  GPIO_InitStruct.Pin = RS485_CT_Pin;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2201      	movs	r2, #1
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS485_CT_GPIO_Port, &GPIO_InitStruct);
 80004fa:	193a      	adds	r2, r7, r4
 80004fc:	2390      	movs	r3, #144	; 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f001 ffe4 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2203      	movs	r2, #3
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	193b      	adds	r3, r7, r4
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <MX_GPIO_Init+0x144>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f001 ffd5 	bl	80024d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2103      	movs	r1, #3
 800052a:	2005      	movs	r0, #5
 800052c:	f001 ff9a 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000530:	2005      	movs	r0, #5
 8000532:	f001 ffac 	bl	800248e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b009      	add	sp, #36	; 0x24
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000
 8000544:	48001400 	.word	0x48001400
 8000548:	000006f1 	.word	0x000006f1
 800054c:	48000400 	.word	0x48000400

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	2101      	movs	r1, #1
 800056a:	430a      	orrs	r2, r1
 800056c:	619a      	str	r2, [r3, #24]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	2201      	movs	r2, #1
 8000574:	4013      	ands	r3, r2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0549      	lsls	r1, r1, #21
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_MspInit+0x44>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	055b      	lsls	r3, r3, #21
 8000590:	4013      	ands	r3, r2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d113      	bne.n	80005e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005ba:	69da      	ldr	r2, [r3, #28]
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005be:	2101      	movs	r1, #1
 80005c0:	430a      	orrs	r2, r1
 80005c2:	61da      	str	r2, [r3, #28]
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_TIM_Base_MspInit+0x44>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2103      	movs	r1, #3
 80005d4:	200f      	movs	r0, #15
 80005d6:	f001 ff45 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005da:	200f      	movs	r0, #15
 80005dc:	f001 ff57 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b004      	add	sp, #16
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	2414      	movs	r4, #20
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2314      	movs	r3, #20
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f004 f814 	bl	800462c <memset>
  if(huart->Instance==USART1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <HAL_UART_MspInit+0xa0>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d13a      	bne.n	8000684 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000610:	699a      	ldr	r2, [r3, #24]
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	01c9      	lsls	r1, r1, #7
 8000618:	430a      	orrs	r2, r1
 800061a:	619a      	str	r2, [r3, #24]
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800061e:	699a      	ldr	r2, [r3, #24]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	01db      	lsls	r3, r3, #7
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0289      	lsls	r1, r1, #10
 8000634:	430a      	orrs	r2, r1
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	029b      	lsls	r3, r3, #10
 8000640:	4013      	ands	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2202      	movs	r2, #2
 8000652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2203      	movs	r2, #3
 800065e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	187a      	adds	r2, r7, r1
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f001 ff2e 	bl	80024d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2103      	movs	r1, #3
 8000678:	201b      	movs	r0, #27
 800067a:	f001 fef3 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800067e:	201b      	movs	r0, #27
 8000680:	f001 ff05 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b00b      	add	sp, #44	; 0x2c
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800069e:	f001 ff06 	bl	80024ae <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x8>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f001 fdd4 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXI1_Pin);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f002 f8a2 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) !=RESET) {
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <TIM2_IRQHandler+0x54>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	691b      	ldr	r3, [r3, #16]
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d118      	bne.n	800071c <TIM2_IRQHandler+0x44>
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <TIM2_IRQHandler+0x54>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	2201      	movs	r2, #1
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d111      	bne.n	800071c <TIM2_IRQHandler+0x44>
		__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <TIM2_IRQHandler+0x54>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2202      	movs	r2, #2
 80006fe:	4252      	negs	r2, r2
 8000700:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <TIM2_IRQHandler+0x58>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <TIM2_IRQHandler+0x58>)
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <TIM2_IRQHandler+0x58>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <TIM2_IRQHandler+0x44>
		  pxMBPortCBTimerExpired();
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <TIM2_IRQHandler+0x5c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4798      	blx	r3
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <TIM2_IRQHandler+0x54>)
 800071e:	0018      	movs	r0, r3
 8000720:	f002 fe8a 	bl	8003438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000108 	.word	0x20000108
 8000730:	20000250 	.word	0x20000250
 8000734:	2000023c 	.word	0x2000023c

08000738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <USART1_IRQHandler+0x78>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	2220      	movs	r2, #32
 8000746:	4013      	ands	r3, r2
 8000748:	3b20      	subs	r3, #32
 800074a:	425a      	negs	r2, r3
 800074c:	4153      	adcs	r3, r2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	607b      	str	r3, [r7, #4]
	  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE);
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <USART1_IRQHandler+0x78>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2220      	movs	r2, #32
 800075a:	4013      	ands	r3, r2
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	4193      	sbcs	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	603b      	str	r3, [r7, #0]

	  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d009      	beq.n	800077e <USART1_IRQHandler+0x46>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d006      	beq.n	800077e <USART1_IRQHandler+0x46>
		pxMBFrameCBByteReceived();
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <USART1_IRQHandler+0x7c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4798      	blx	r3
		__HAL_UART_CLEAR_PEFLAG(&huart1);
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <USART1_IRQHandler+0x78>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	621a      	str	r2, [r3, #32]
	  }

	  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET)) {
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <USART1_IRQHandler+0x78>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	4013      	ands	r3, r2
 8000788:	2b80      	cmp	r3, #128	; 0x80
 800078a:	d108      	bne.n	800079e <USART1_IRQHandler+0x66>
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <USART1_IRQHandler+0x78>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	4013      	ands	r3, r2
 8000796:	d002      	beq.n	800079e <USART1_IRQHandler+0x66>
		pxMBFrameCBTransmitterEmpty();
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <USART1_IRQHandler+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4798      	blx	r3
	  }

	  __HAL_UART_CLEAR_FLAG(&huart1, 0xffffffff  );
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <USART1_IRQHandler+0x78>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4252      	negs	r2, r2
 80007a6:	621a      	str	r2, [r3, #32]
	  return;
 80007a8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000150 	.word	0x20000150
 80007b4:	20000234 	.word	0x20000234
 80007b8:	20000238 	.word	0x20000238

080007bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
uint16_t ISRCNT = 0;
uint32_t lastHT = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == EXI1_Pin) {
 80007c8:	1dbb      	adds	r3, r7, #6
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d11b      	bne.n	8000808 <HAL_GPIO_EXTI_Callback+0x4c>
		if(GPIO_PIN_SET == HAL_GPIO_ReadPin(EXI1_GPIO_Port, EXI1_Pin) )
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_GPIO_EXTI_Callback+0x54>)
 80007d2:	2102      	movs	r1, #2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 ffe3 	bl	80027a0 <HAL_GPIO_ReadPin>
 80007da:	0003      	movs	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d105      	bne.n	80007ec <HAL_GPIO_EXTI_Callback+0x30>
		{
			lastHT = HAL_GetTick();
 80007e0:	f001 fd54 	bl	800228c <HAL_GetTick>
 80007e4:	0002      	movs	r2, r0
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_GPIO_EXTI_Callback+0x58>)
 80007e8:	601a      	str	r2, [r3, #0]
				ISRCNT++;
			}
		}

	}
}
 80007ea:	e00d      	b.n	8000808 <HAL_GPIO_EXTI_Callback+0x4c>
			if( HAL_GetTick() - lastHT >=100){
 80007ec:	f001 fd4e 	bl	800228c <HAL_GetTick>
 80007f0:	0002      	movs	r2, r0
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_GPIO_EXTI_Callback+0x58>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d905      	bls.n	8000808 <HAL_GPIO_EXTI_Callback+0x4c>
				ISRCNT++;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000806:	801a      	strh	r2, [r3, #0]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	48001400 	.word	0x48001400
 8000814:	200001dc 	.word	0x200001dc
 8000818:	200001d8 	.word	0x200001d8

0800081c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <_kill>:

int _kill(int pid, int sig)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000832:	f003 ff51 	bl	80046d8 <__errno>
 8000836:	0003      	movs	r3, r0
 8000838:	2216      	movs	r2, #22
 800083a:	601a      	str	r2, [r3, #0]
  return -1;
 800083c:	2301      	movs	r3, #1
 800083e:	425b      	negs	r3, r3
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}

08000848 <_exit>:

void _exit (int status)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000850:	2301      	movs	r3, #1
 8000852:	425a      	negs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff ffe5 	bl	8000828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800085e:	e7fe      	b.n	800085e <_exit+0x16>

08000860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	e00a      	b.n	8000888 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000872:	e000      	b.n	8000876 <_read+0x16>
 8000874:	bf00      	nop
 8000876:	0001      	movs	r1, r0
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60ba      	str	r2, [r7, #8]
 800087e:	b2ca      	uxtb	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	dbf0      	blt.n	8000872 <_read+0x12>
  }

  return len;
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b006      	add	sp, #24
 8000898:	bd80      	pop	{r7, pc}

0800089a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e009      	b.n	80008c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	0018      	movs	r0, r3
 80008b6:	e000      	b.n	80008ba <_write+0x20>
 80008b8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf1      	blt.n	80008ac <_write+0x12>
  }
  return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	0018      	movs	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b006      	add	sp, #24
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_close>:

int _close(int file)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008da:	2301      	movs	r3, #1
 80008dc:	425b      	negs	r3, r3
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	0192      	lsls	r2, r2, #6
 80008f6:	605a      	str	r2, [r3, #4]
  return 0;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}

08000902 <_isatty>:

int _isatty(int file)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800090a:	2301      	movs	r3, #1
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b002      	add	sp, #8
 8000912:	bd80      	pop	{r7, pc}

08000914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b004      	add	sp, #16
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f003 febc 	bl	80046d8 <__errno>
 8000960:	0003      	movs	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	2301      	movs	r3, #1
 8000968:	425b      	negs	r3, r3
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	18d2      	adds	r2, r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b006      	add	sp, #24
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20001000 	.word	0x20001000
 800098c:	00000400 	.word	0x00000400
 8000990:	200001e0 	.word	0x200001e0
 8000994:	200004b0 	.word	0x200004b0

08000998 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f7ff fff6 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d2:	f003 fe87 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fc2d 	bl	8000234 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80009e8:	08005c08 	.word	0x08005c08
  ldr r2, =_sbss
 80009ec:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80009f0:	200004ac 	.word	0x200004ac

080009f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_IRQHandler>

080009f6 <app_main>:

extern void load_config(void);
extern void modbusInit(void);

int app_main( void )
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
	load_config();
 80009fa:	f000 f80b 	bl	8000a14 <load_config>

	HAL_Delay(3);
 80009fe:	2003      	movs	r0, #3
 8000a00:	f001 fc4e 	bl	80022a0 <HAL_Delay>

	modbusInit();
 8000a04:	f000 f832 	bl	8000a6c <modbusInit>

    HAL_Delay(2);
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f001 fc49 	bl	80022a0 <HAL_Delay>

    while(1){
    	eMBPoll();
 8000a0e:	f000 ff5b 	bl	80018c8 <eMBPoll>
    while(1){
 8000a12:	e7fc      	b.n	8000a0e <app_main+0x18>

08000a14 <load_config>:

const uint8_t configFlash[1024] __attribute__((section("CFGFLASH"), aligned(0x400)));

Config_t config;

void load_config(void) {
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	memcpy(&config, (uint8_t*) configFlash, sizeof(Config_t));
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <load_config+0x48>)
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <load_config+0x4c>)
 8000a1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a1e:	c313      	stmia	r3!, {r0, r1, r4}
 8000a20:	6811      	ldr	r1, [r2, #0]
 8000a22:	6019      	str	r1, [r3, #0]
 8000a24:	8892      	ldrh	r2, [r2, #4]
 8000a26:	809a      	strh	r2, [r3, #4]
	if (config.flaga5a5 != 0xa5a5) {
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <load_config+0x48>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <load_config+0x50>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d011      	beq.n	8000a56 <load_config+0x42>
		config.flaga5a5 = 0xa5a5;
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <load_config+0x48>)
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <load_config+0x54>)
 8000a36:	801a      	strh	r2, [r3, #0]
		config.firmware = FIRMWARE_VER;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <load_config+0x48>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	805a      	strh	r2, [r3, #2]
		config.addr = 0x2a;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <load_config+0x48>)
 8000a40:	222a      	movs	r2, #42	; 0x2a
 8000a42:	809a      	strh	r2, [r3, #4]
		config.baudrate = 3;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <load_config+0x48>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	80da      	strh	r2, [r3, #6]
		config.parity = 0;
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <load_config+0x48>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	811a      	strh	r2, [r3, #8]
		config.stopbits = 0;
 8000a50:	4b02      	ldr	r3, [pc, #8]	; (8000a5c <load_config+0x48>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	815a      	strh	r2, [r3, #10]
	}
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	200001e4 	.word	0x200001e4
 8000a60:	08005800 	.word	0x08005800
 8000a64:	0000a5a5 	.word	0x0000a5a5
 8000a68:	ffffa5a5 	.word	0xffffa5a5

08000a6c <modbusInit>:

static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void modbusInit(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af02      	add	r7, sp, #8
  eMBErrorCode eStatus = eMBInit( MB_RTU, config.addr, 3, 19200, MB_PAR_NONE );
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <modbusInit+0x34>)
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	b2d9      	uxtb	r1, r3
 8000a78:	1dfc      	adds	r4, r7, #7
 8000a7a:	2396      	movs	r3, #150	; 0x96
 8000a7c:	01db      	lsls	r3, r3, #7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	9200      	str	r2, [sp, #0]
 8000a82:	2203      	movs	r2, #3
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 fe69 	bl	800175c <eMBInit>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	7023      	strb	r3, [r4, #0]
  eStatus = eMBEnable();
 8000a8e:	1dfc      	adds	r4, r7, #7
 8000a90:	f000 fefc 	bl	800188c <eMBEnable>
 8000a94:	0003      	movs	r3, r0
 8000a96:	7023      	strb	r3, [r4, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b003      	add	sp, #12
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	200001e4 	.word	0x200001e4

08000aa4 <eMBRegInputCB>:
	return crc;
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT _usAddress, USHORT usNRegs )
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	0008      	movs	r0, r1
 8000aae:	0011      	movs	r1, r2
 8000ab0:	1cbb      	adds	r3, r7, #2
 8000ab2:	1c02      	adds	r2, r0, #0
 8000ab4:	801a      	strh	r2, [r3, #0]
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	1c0a      	adds	r2, r1, #0
 8000aba:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000abc:	2317      	movs	r3, #23
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
    int             iRegIndex;
    USHORT usAddress = _usAddress - 1;
 8000ac4:	210e      	movs	r1, #14
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	1cba      	adds	r2, r7, #2
 8000aca:	8812      	ldrh	r2, [r2, #0]
 8000acc:	3a01      	subs	r2, #1
 8000ace:	801a      	strh	r2, [r3, #0]

    if( ( usAddress == REG_INPUT_START )
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	23fa      	movs	r3, #250	; 0xfa
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d133      	bne.n	8000b44 <eMBRegInputCB+0xa0>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	881a      	ldrh	r2, [r3, #0]
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	18d3      	adds	r3, r2, r3
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <eMBRegInputCB+0xb8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	dc2b      	bgt.n	8000b44 <eMBRegInputCB+0xa0>
    {
    	extern uint16_t ISRCNT;
    	usRegInputBuf[0] = ISRCNT;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <eMBRegInputCB+0xbc>)
 8000aee:	881a      	ldrh	r2, [r3, #0]
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <eMBRegInputCB+0xc0>)
 8000af2:	801a      	strh	r2, [r3, #0]
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <eMBRegInputCB+0xc4>)
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        while( usNRegs > 0 )
 8000b00:	e01b      	b.n	8000b3a <eMBRegInputCB+0x96>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <eMBRegInputCB+0xc0>)
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	0052      	lsls	r2, r2, #1
 8000b08:	5ad3      	ldrh	r3, [r2, r3]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b14:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b16:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <eMBRegInputCB+0xc0>)
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	0052      	lsls	r2, r2, #1
 8000b1e:	5ad1      	ldrh	r1, [r2, r3]
            *pucRegBuffer++ =
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b26:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b28:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
            usNRegs--;
 8000b30:	003b      	movs	r3, r7
 8000b32:	881a      	ldrh	r2, [r3, #0]
 8000b34:	003b      	movs	r3, r7
 8000b36:	3a01      	subs	r2, #1
 8000b38:	801a      	strh	r2, [r3, #0]
        while( usNRegs > 0 )
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1df      	bne.n	8000b02 <eMBRegInputCB+0x5e>
    {
 8000b42:	e003      	b.n	8000b4c <eMBRegInputCB+0xa8>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8000b44:	2317      	movs	r3, #23
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
    }

    return eStatus;
 8000b4c:	2317      	movs	r3, #23
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	781b      	ldrb	r3, [r3, #0]
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b006      	add	sp, #24
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	000007d1 	.word	0x000007d1
 8000b60:	200001d8 	.word	0x200001d8
 8000b64:	200001f8 	.word	0x200001f8
 8000b68:	20000004 	.word	0x20000004

08000b6c <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT _usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	000c      	movs	r4, r1
 8000b76:	0010      	movs	r0, r2
 8000b78:	0019      	movs	r1, r3
 8000b7a:	250a      	movs	r5, #10
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	1c22      	adds	r2, r4, #0
 8000b80:	801a      	strh	r2, [r3, #0]
 8000b82:	2408      	movs	r4, #8
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	801a      	strh	r2, [r3, #0]
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	1c0a      	adds	r2, r1, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
	eMBErrorCode    eStatus = MB_ENOERR;
 8000b90:	231f      	movs	r3, #31
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
	int             iRegIndex;
	USHORT usAddress = _usAddress - 1;
 8000b98:	2116      	movs	r1, #22
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	197a      	adds	r2, r7, r5
 8000b9e:	8812      	ldrh	r2, [r2, #0]
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	801a      	strh	r2, [r3, #0]

	if ( MB_REG_READ == eMode ){
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d133      	bne.n	8000c14 <eMBRegHoldingCB+0xa8>
		if( ( usAddress >= 0 ) && ( usAddress + usNRegs <= 9 ) )
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	881a      	ldrh	r2, [r3, #0]
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	2b09      	cmp	r3, #9
 8000bb8:	dc27      	bgt.n	8000c0a <eMBRegHoldingCB+0x9e>
		{
			uint16_t *pread = (uint16_t *)&config;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <eMBRegHoldingCB+0xc0>)
 8000bbc:	61bb      	str	r3, [r7, #24]
			pread += usAddress;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	18d3      	adds	r3, r2, r3
 8000bc8:	61bb      	str	r3, [r7, #24]
			while( usNRegs > 0 )
 8000bca:	e018      	b.n	8000bfe <eMBRegHoldingCB+0x92>
			{
				*pucRegBuffer++ =
					( unsigned char )( *pread >> 8 );
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b299      	uxth	r1, r3
				*pucRegBuffer++ =
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60fa      	str	r2, [r7, #12]
					( unsigned char )( *pread >> 8 );
 8000bda:	b2ca      	uxtb	r2, r1
				*pucRegBuffer++ =
 8000bdc:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ =
					( unsigned char )( *pread & 0xFF );
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	8819      	ldrh	r1, [r3, #0]
				*pucRegBuffer++ =
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	60fa      	str	r2, [r7, #12]
					( unsigned char )( *pread & 0xFF );
 8000be8:	b2ca      	uxtb	r2, r1
				*pucRegBuffer++ =
 8000bea:	701a      	strb	r2, [r3, #0]
				pread++;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
				usNRegs--;
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	881a      	ldrh	r2, [r3, #0]
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	3a01      	subs	r2, #1
 8000bfc:	801a      	strh	r2, [r3, #0]
			while( usNRegs > 0 )
 8000bfe:	2308      	movs	r3, #8
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e1      	bne.n	8000bcc <eMBRegHoldingCB+0x60>
 8000c08:	e008      	b.n	8000c1c <eMBRegHoldingCB+0xb0>
			}
		}else{
			eStatus = MB_ENOREG;
 8000c0a:	231f      	movs	r3, #31
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e003      	b.n	8000c1c <eMBRegHoldingCB+0xb0>
//			save_config();
//			if( (usAddress + bkN >= 9) && (config.restart==0xffff) )
//				HAL_NVIC_SystemReset();
//
//		}else{
			eStatus = MB_ENOREG;
 8000c14:	231f      	movs	r3, #31
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
//		}
	}

	return eStatus;
 8000c1c:	231f      	movs	r3, #31
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781b      	ldrb	r3, [r3, #0]
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b008      	add	sp, #32
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	200001e4 	.word	0x200001e4

08000c30 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	000c      	movs	r4, r1
 8000c3a:	0010      	movs	r0, r2
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	230a      	movs	r3, #10
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	1c22      	adds	r2, r4, #0
 8000c44:	801a      	strh	r2, [r3, #0]
 8000c46:	2308      	movs	r3, #8
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	1c02      	adds	r2, r0, #0
 8000c4c:	801a      	strh	r2, [r3, #0]
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	1c0a      	adds	r2, r1, #0
 8000c52:	701a      	strb	r2, [r3, #0]
    return MB_ENOREG;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b005      	add	sp, #20
 8000c5c:	bd90      	pop	{r4, r7, pc}

08000c5e <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	0008      	movs	r0, r1
 8000c68:	0011      	movs	r1, r2
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	1c02      	adds	r2, r0, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
 8000c70:	003b      	movs	r3, r7
 8000c72:	1c0a      	adds	r2, r1, #0
 8000c74:	801a      	strh	r2, [r3, #0]
    return MB_ENOREG;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8000c8a:	2316      	movs	r3, #22
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d000      	beq.n	8000c9c <eMBFuncReadCoils+0x1c>
 8000c9a:	e091      	b.n	8000dc0 <eMBFuncReadCoils+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	2014      	movs	r0, #20
 8000ca6:	183b      	adds	r3, r7, r0
 8000ca8:	0212      	lsls	r2, r2, #8
 8000caa:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	183b      	adds	r3, r7, r0
 8000cb6:	183a      	adds	r2, r7, r0
 8000cb8:	8812      	ldrh	r2, [r2, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000cbe:	183b      	adds	r3, r7, r0
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	183b      	adds	r3, r7, r0
 8000cc4:	3201      	adds	r2, #1
 8000cc6:	801a      	strh	r2, [r3, #0]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3303      	adds	r3, #3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	183b      	adds	r3, r7, r0
 8000cd4:	0212      	lsls	r2, r2, #8
 8000cd6:	801a      	strh	r2, [r3, #0]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	183a      	adds	r2, r7, r0
 8000ce4:	8812      	ldrh	r2, [r2, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d061      	beq.n	8000db6 <eMBFuncReadCoils+0x136>
 8000cf2:	0001      	movs	r1, r0
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	23fa      	movs	r3, #250	; 0xfa
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d25a      	bcs.n	8000db6 <eMBFuncReadCoils+0x136>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2200      	movs	r2, #0
 8000d08:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	60fa      	str	r2, [r7, #12]
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	2207      	movs	r2, #7
 8000d26:	4013      	ands	r3, r2
 8000d28:	d009      	beq.n	8000d3e <eMBFuncReadCoils+0xbe>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	2317      	movs	r3, #23
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	3201      	adds	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e007      	b.n	8000d4e <eMBFuncReadCoils+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8000d3e:	2312      	movs	r3, #18
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	2317      	movs	r3, #23
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	2217      	movs	r2, #23
 8000d56:	18ba      	adds	r2, r7, r2
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8000d68:	250b      	movs	r5, #11
 8000d6a:	197c      	adds	r4, r7, r5
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	2314      	movs	r3, #20
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	8819      	ldrh	r1, [r3, #0]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f7ff ff58 	bl	8000c30 <eMBRegCoilsCB>
 8000d80:	0003      	movs	r3, r0
 8000d82:	7023      	strb	r3, [r4, #0]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000d84:	197b      	adds	r3, r7, r5
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d009      	beq.n	8000da0 <eMBFuncReadCoils+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000d8c:	2316      	movs	r3, #22
 8000d8e:	18fc      	adds	r4, r7, r3
 8000d90:	197b      	adds	r3, r7, r5
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fcb5 	bl	8001704 <prveMBError2Exception>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000d9e:	e013      	b.n	8000dc8 <eMBFuncReadCoils+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	881a      	ldrh	r2, [r3, #0]
 8000da4:	2317      	movs	r3, #23
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8000db4:	e008      	b.n	8000dc8 <eMBFuncReadCoils+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000db6:	2316      	movs	r3, #22
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	2203      	movs	r2, #3
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e003      	b.n	8000dc8 <eMBFuncReadCoils+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000dc0:	2316      	movs	r3, #22
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000dc8:	2316      	movs	r3, #22
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	781b      	ldrb	r3, [r3, #0]
}
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b006      	add	sp, #24
 8000dd4:	bdb0      	pop	{r4, r5, r7, pc}

08000dd6 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8000dd6:	b5b0      	push	{r4, r5, r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b05      	cmp	r3, #5
 8000dee:	d155      	bne.n	8000e9c <eMBFuncWriteCoil+0xc6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3301      	adds	r3, #1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	200c      	movs	r0, #12
 8000dfa:	183b      	adds	r3, r7, r0
 8000dfc:	0212      	lsls	r2, r2, #8
 8000dfe:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3302      	adds	r3, #2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b299      	uxth	r1, r3
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	183a      	adds	r2, r7, r0
 8000e0c:	8812      	ldrh	r2, [r2, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000e12:	183b      	adds	r3, r7, r0
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	3201      	adds	r2, #1
 8000e1a:	801a      	strh	r2, [r3, #0]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d135      	bne.n	8000e92 <eMBFuncWriteCoil+0xbc>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3303      	adds	r3, #3
 8000e2a:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8000e2c:	2bff      	cmp	r3, #255	; 0xff
 8000e2e:	d004      	beq.n	8000e3a <eMBFuncWriteCoil+0x64>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3303      	adds	r3, #3
 8000e34:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <eMBFuncWriteCoil+0xbc>
        {
            ucBuf[1] = 0;
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	705a      	strb	r2, [r3, #1]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3303      	adds	r3, #3
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d103      	bne.n	8000e54 <eMBFuncWriteCoil+0x7e>
            {
                ucBuf[0] = 1;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	e003      	b.n	8000e5c <eMBFuncWriteCoil+0x86>
            }
            else
            {
                ucBuf[0] = 0;
 8000e54:	2308      	movs	r3, #8
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8000e5c:	250b      	movs	r5, #11
 8000e5e:	197c      	adds	r4, r7, r5
 8000e60:	230c      	movs	r3, #12
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	8819      	ldrh	r1, [r3, #0]
 8000e66:	2308      	movs	r3, #8
 8000e68:	18f8      	adds	r0, r7, r3
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f7ff fedf 	bl	8000c30 <eMBRegCoilsCB>
 8000e72:	0003      	movs	r3, r0
 8000e74:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000e76:	197b      	adds	r3, r7, r5
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d012      	beq.n	8000ea4 <eMBFuncWriteCoil+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000e7e:	230f      	movs	r3, #15
 8000e80:	18fc      	adds	r4, r7, r3
 8000e82:	197b      	adds	r3, r7, r5
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 fc3c 	bl	8001704 <prveMBError2Exception>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000e90:	e008      	b.n	8000ea4 <eMBFuncWriteCoil+0xce>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000e92:	230f      	movs	r3, #15
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	2203      	movs	r2, #3
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e003      	b.n	8000ea4 <eMBFuncWriteCoil+0xce>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	781b      	ldrb	r3, [r3, #0]
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}

08000eb2 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8000eb2:	b5b0      	push	{r4, r5, r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8000ebc:	230e      	movs	r3, #14
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d800      	bhi.n	8000ece <eMBFuncWriteMultipleCoils+0x1c>
 8000ecc:	e07a      	b.n	8000fc4 <eMBFuncWriteMultipleCoils+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	200c      	movs	r0, #12
 8000ed8:	183b      	adds	r3, r7, r0
 8000eda:	0212      	lsls	r2, r2, #8
 8000edc:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	183a      	adds	r2, r7, r0
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8000ef0:	183b      	adds	r3, r7, r0
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	3201      	adds	r2, #1
 8000ef8:	801a      	strh	r2, [r3, #0]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3303      	adds	r3, #3
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	200a      	movs	r0, #10
 8000f04:	183b      	adds	r3, r7, r0
 8000f06:	0212      	lsls	r2, r2, #8
 8000f08:	801a      	strh	r2, [r3, #0]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	183b      	adds	r3, r7, r0
 8000f14:	183a      	adds	r2, r7, r0
 8000f16:	8812      	ldrh	r2, [r2, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	801a      	strh	r2, [r3, #0]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	7952      	ldrb	r2, [r2, #5]
 8000f24:	701a      	strb	r2, [r3, #0]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8000f26:	183b      	adds	r3, r7, r0
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d009      	beq.n	8000f44 <eMBFuncWriteMultipleCoils+0x92>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8000f30:	183b      	adds	r3, r7, r0
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	3201      	adds	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e007      	b.n	8000f54 <eMBFuncWriteMultipleCoils+0xa2>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8000f44:	230a      	movs	r3, #10
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	230f      	movs	r3, #15
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	701a      	strb	r2, [r3, #0]
        }

        if( ( usCoilCnt >= 1 ) &&
 8000f54:	210a      	movs	r1, #10
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d02d      	beq.n	8000fba <eMBFuncWriteMultipleCoils+0x108>
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	23f6      	movs	r3, #246	; 0xf6
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d827      	bhi.n	8000fba <eMBFuncWriteMultipleCoils+0x108>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	18fa      	adds	r2, r7, r3
 8000f6e:	2309      	movs	r3, #9
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d11f      	bne.n	8000fba <eMBFuncWriteMultipleCoils+0x108>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1d98      	adds	r0, r3, #6
 8000f7e:	2508      	movs	r5, #8
 8000f80:	197c      	adds	r4, r7, r5
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	230c      	movs	r3, #12
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	8819      	ldrh	r1, [r3, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f7ff fe4f 	bl	8000c30 <eMBRegCoilsCB>
 8000f92:	0003      	movs	r3, r0
 8000f94:	7023      	strb	r3, [r4, #0]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8000f96:	197b      	adds	r3, r7, r5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <eMBFuncWriteMultipleCoils+0x100>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8000f9e:	230e      	movs	r3, #14
 8000fa0:	18fc      	adds	r4, r7, r3
 8000fa2:	197b      	adds	r3, r7, r5
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fbac 	bl	8001704 <prveMBError2Exception>
 8000fac:	0003      	movs	r3, r0
 8000fae:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8000fb0:	e00c      	b.n	8000fcc <eMBFuncWriteMultipleCoils+0x11a>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2205      	movs	r2, #5
 8000fb6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8000fb8:	e008      	b.n	8000fcc <eMBFuncWriteMultipleCoils+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000fba:	230e      	movs	r3, #14
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e003      	b.n	8000fcc <eMBFuncWriteMultipleCoils+0x11a>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2203      	movs	r2, #3
 8000fca:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8000fcc:	230e      	movs	r3, #14
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bdb0      	pop	{r4, r5, r7, pc}

08000fda <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8000fda:	b5b0      	push	{r4, r5, r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8000fe4:	2316      	movs	r3, #22
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d000      	beq.n	8000ff6 <eMBFuncReadDiscreteInputs+0x1c>
 8000ff4:	e091      	b.n	800111a <eMBFuncReadDiscreteInputs+0x140>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	2014      	movs	r0, #20
 8001000:	183b      	adds	r3, r7, r0
 8001002:	0212      	lsls	r2, r2, #8
 8001004:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3302      	adds	r3, #2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b299      	uxth	r1, r3
 800100e:	183b      	adds	r3, r7, r0
 8001010:	183a      	adds	r2, r7, r0
 8001012:	8812      	ldrh	r2, [r2, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 8001018:	183b      	adds	r3, r7, r0
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	183b      	adds	r3, r7, r0
 800101e:	3201      	adds	r2, #1
 8001020:	801a      	strh	r2, [r3, #0]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3303      	adds	r3, #3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b29a      	uxth	r2, r3
 800102a:	2012      	movs	r0, #18
 800102c:	183b      	adds	r3, r7, r0
 800102e:	0212      	lsls	r2, r2, #8
 8001030:	801a      	strh	r2, [r3, #0]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3304      	adds	r3, #4
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b299      	uxth	r1, r3
 800103a:	183b      	adds	r3, r7, r0
 800103c:	183a      	adds	r2, r7, r0
 800103e:	8812      	ldrh	r2, [r2, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8001044:	183b      	adds	r3, r7, r0
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d061      	beq.n	8001110 <eMBFuncReadDiscreteInputs+0x136>
 800104c:	0001      	movs	r1, r0
 800104e:	183b      	adds	r3, r7, r0
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	23fa      	movs	r3, #250	; 0xfa
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	429a      	cmp	r2, r3
 8001058:	d25a      	bcs.n	8001110 <eMBFuncReadDiscreteInputs+0x136>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60fa      	str	r2, [r7, #12]
 800106a:	2202      	movs	r2, #2
 800106c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b29a      	uxth	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800107a:	187b      	adds	r3, r7, r1
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	2207      	movs	r2, #7
 8001080:	4013      	ands	r3, r2
 8001082:	d009      	beq.n	8001098 <eMBFuncReadDiscreteInputs+0xbe>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8001084:	187b      	adds	r3, r7, r1
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	b29b      	uxth	r3, r3
 800108c:	b2da      	uxtb	r2, r3
 800108e:	2317      	movs	r3, #23
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	3201      	adds	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e007      	b.n	80010a8 <eMBFuncReadDiscreteInputs+0xce>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8001098:	2312      	movs	r3, #18
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	2317      	movs	r3, #23
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	701a      	strb	r2, [r3, #0]
            }
            *pucFrameCur++ = ucNBytes;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60fa      	str	r2, [r7, #12]
 80010ae:	2217      	movs	r2, #23
 80010b0:	18ba      	adds	r2, r7, r2
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80010c2:	250b      	movs	r5, #11
 80010c4:	197c      	adds	r4, r7, r5
 80010c6:	2312      	movs	r3, #18
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	2314      	movs	r3, #20
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	8819      	ldrh	r1, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fdc2 	bl	8000c5e <eMBRegDiscreteCB>
 80010da:	0003      	movs	r3, r0
 80010dc:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80010de:	197b      	adds	r3, r7, r5
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <eMBFuncReadDiscreteInputs+0x120>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80010e6:	2316      	movs	r3, #22
 80010e8:	18fc      	adds	r4, r7, r3
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 fb08 	bl	8001704 <prveMBError2Exception>
 80010f4:	0003      	movs	r3, r0
 80010f6:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 80010f8:	e013      	b.n	8001122 <eMBFuncReadDiscreteInputs+0x148>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	2317      	movs	r3, #23
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	18d3      	adds	r3, r2, r3
 8001108:	b29a      	uxth	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800110e:	e008      	b.n	8001122 <eMBFuncReadDiscreteInputs+0x148>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001110:	2316      	movs	r3, #22
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2203      	movs	r2, #3
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e003      	b.n	8001122 <eMBFuncReadDiscreteInputs+0x148>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800111a:	2316      	movs	r3, #22
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	2203      	movs	r2, #3
 8001120:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 8001122:	2316      	movs	r3, #22
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bdb0      	pop	{r4, r5, r7, pc}

08001130 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800113a:	260f      	movs	r6, #15
 800113c:	19bb      	adds	r3, r7, r6
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d12f      	bne.n	80011aa <eMBFuncWriteHoldingRegister+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b29a      	uxth	r2, r3
 8001152:	200c      	movs	r0, #12
 8001154:	183b      	adds	r3, r7, r0
 8001156:	0212      	lsls	r2, r2, #8
 8001158:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3302      	adds	r3, #2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b299      	uxth	r1, r3
 8001162:	183b      	adds	r3, r7, r0
 8001164:	183a      	adds	r2, r7, r0
 8001166:	8812      	ldrh	r2, [r2, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 800116c:	183b      	adds	r3, r7, r0
 800116e:	881a      	ldrh	r2, [r3, #0]
 8001170:	0001      	movs	r1, r0
 8001172:	183b      	adds	r3, r7, r0
 8001174:	3201      	adds	r2, #1
 8001176:	801a      	strh	r2, [r3, #0]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1cd8      	adds	r0, r3, #3
 800117c:	250b      	movs	r5, #11
 800117e:	197c      	adds	r4, r7, r5
 8001180:	187b      	adds	r3, r7, r1
 8001182:	8819      	ldrh	r1, [r3, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2201      	movs	r2, #1
 8001188:	f7ff fcf0 	bl	8000b6c <eMBRegHoldingCB>
 800118c:	0003      	movs	r3, r0
 800118e:	7023      	strb	r3, [r4, #0]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8001190:	197b      	adds	r3, r7, r5
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <eMBFuncWriteHoldingRegister+0x82>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8001198:	19bc      	adds	r4, r7, r6
 800119a:	197b      	adds	r3, r7, r5
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 fab0 	bl	8001704 <prveMBError2Exception>
 80011a4:	0003      	movs	r3, r0
 80011a6:	7023      	strb	r3, [r4, #0]
 80011a8:	e003      	b.n	80011b2 <eMBFuncWriteHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2203      	movs	r2, #3
 80011b0:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b005      	add	sp, #20
 80011be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c0 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d962      	bls.n	80012a0 <eMBFuncWriteMultipleHoldingRegister+0xe0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	200c      	movs	r0, #12
 80011e4:	183b      	adds	r3, r7, r0
 80011e6:	0212      	lsls	r2, r2, #8
 80011e8:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3302      	adds	r3, #2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b299      	uxth	r1, r3
 80011f2:	183b      	adds	r3, r7, r0
 80011f4:	183a      	adds	r2, r7, r0
 80011f6:	8812      	ldrh	r2, [r2, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	0005      	movs	r5, r0
 8001202:	183b      	adds	r3, r7, r0
 8001204:	3201      	adds	r2, #1
 8001206:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3303      	adds	r3, #3
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	200a      	movs	r0, #10
 8001212:	183b      	adds	r3, r7, r0
 8001214:	0212      	lsls	r2, r2, #8
 8001216:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3304      	adds	r3, #4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b299      	uxth	r1, r3
 8001220:	183b      	adds	r3, r7, r0
 8001222:	183a      	adds	r2, r7, r0
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	801a      	strh	r2, [r3, #0]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 800122a:	2409      	movs	r4, #9
 800122c:	193b      	adds	r3, r7, r4
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	7952      	ldrb	r2, [r2, #5]
 8001232:	701a      	strb	r2, [r3, #0]

        if( ( usRegCount >= 1 ) &&
 8001234:	0001      	movs	r1, r0
 8001236:	187b      	adds	r3, r7, r1
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d02b      	beq.n	8001296 <eMBFuncWriteMultipleHoldingRegister+0xd6>
 800123e:	187b      	adds	r3, r7, r1
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	2b78      	cmp	r3, #120	; 0x78
 8001244:	d827      	bhi.n	8001296 <eMBFuncWriteMultipleHoldingRegister+0xd6>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8001246:	187b      	adds	r3, r7, r1
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	18db      	adds	r3, r3, r3
 800124e:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8001250:	193a      	adds	r2, r7, r4
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d11e      	bne.n	8001296 <eMBFuncWriteMultipleHoldingRegister+0xd6>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1d98      	adds	r0, r3, #6
 800125c:	2608      	movs	r6, #8
 800125e:	19bc      	adds	r4, r7, r6
 8001260:	187b      	adds	r3, r7, r1
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	197b      	adds	r3, r7, r5
 8001266:	8819      	ldrh	r1, [r3, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	f7ff fc7f 	bl	8000b6c <eMBRegHoldingCB>
 800126e:	0003      	movs	r3, r0
 8001270:	7023      	strb	r3, [r4, #0]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001272:	19bb      	adds	r3, r7, r6
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d009      	beq.n	800128e <eMBFuncWriteMultipleHoldingRegister+0xce>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800127a:	230f      	movs	r3, #15
 800127c:	18fc      	adds	r4, r7, r3
 800127e:	19bb      	adds	r3, r7, r6
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0018      	movs	r0, r3
 8001284:	f000 fa3e 	bl	8001704 <prveMBError2Exception>
 8001288:	0003      	movs	r3, r0
 800128a:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800128c:	e00c      	b.n	80012a8 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2205      	movs	r2, #5
 8001292:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8001294:	e008      	b.n	80012a8 <eMBFuncWriteMultipleHoldingRegister+0xe8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001296:	230f      	movs	r3, #15
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2203      	movs	r2, #3
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e003      	b.n	80012a8 <eMBFuncWriteMultipleHoldingRegister+0xe8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2203      	movs	r2, #3
 80012a6:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781b      	ldrb	r3, [r3, #0]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b005      	add	sp, #20
 80012b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012b6 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80012b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80012c0:	2317      	movs	r3, #23
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d000      	beq.n	80012d2 <eMBFuncReadHoldingRegister+0x1c>
 80012d0:	e075      	b.n	80013be <eMBFuncReadHoldingRegister+0x108>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3301      	adds	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	2014      	movs	r0, #20
 80012dc:	183b      	adds	r3, r7, r0
 80012de:	0212      	lsls	r2, r2, #8
 80012e0:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3302      	adds	r3, #2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b299      	uxth	r1, r3
 80012ea:	183b      	adds	r3, r7, r0
 80012ec:	183a      	adds	r2, r7, r0
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80012f4:	183b      	adds	r3, r7, r0
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	183b      	adds	r3, r7, r0
 80012fa:	3201      	adds	r2, #1
 80012fc:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3303      	adds	r3, #3
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b29a      	uxth	r2, r3
 8001306:	2512      	movs	r5, #18
 8001308:	197b      	adds	r3, r7, r5
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	801a      	strh	r2, [r3, #0]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	197b      	adds	r3, r7, r5
 8001316:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001318:	197b      	adds	r3, r7, r5
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d049      	beq.n	80013b4 <eMBFuncReadHoldingRegister+0xfe>
 8001320:	197b      	adds	r3, r7, r5
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2b7d      	cmp	r3, #125	; 0x7d
 8001326:	d845      	bhi.n	80013b4 <eMBFuncReadHoldingRegister+0xfe>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60fa      	str	r2, [r7, #12]
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	b29a      	uxth	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8001348:	197b      	adds	r3, r7, r5
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b2d9      	uxtb	r1, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	1c0a      	adds	r2, r1, #0
 8001356:	1892      	adds	r2, r2, r2
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8001368:	260b      	movs	r6, #11
 800136a:	19bc      	adds	r4, r7, r6
 800136c:	197b      	adds	r3, r7, r5
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	183b      	adds	r3, r7, r0
 8001372:	8819      	ldrh	r1, [r3, #0]
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	f7ff fbf8 	bl	8000b6c <eMBRegHoldingCB>
 800137c:	0003      	movs	r3, r0
 800137e:	7023      	strb	r3, [r4, #0]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001380:	19bb      	adds	r3, r7, r6
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d009      	beq.n	800139c <eMBFuncReadHoldingRegister+0xe6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001388:	2317      	movs	r3, #23
 800138a:	18fc      	adds	r4, r7, r3
 800138c:	19bb      	adds	r3, r7, r6
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	0018      	movs	r0, r3
 8001392:	f000 f9b7 	bl	8001704 <prveMBError2Exception>
 8001396:	0003      	movs	r3, r0
 8001398:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800139a:	e014      	b.n	80013c6 <eMBFuncReadHoldingRegister+0x110>
            }
            else
            {
                *usLen += usRegCount * 2;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	2312      	movs	r3, #18
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	18db      	adds	r3, r3, r3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	18d3      	adds	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80013b2:	e008      	b.n	80013c6 <eMBFuncReadHoldingRegister+0x110>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80013b4:	2317      	movs	r3, #23
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	2203      	movs	r2, #3
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e003      	b.n	80013c6 <eMBFuncReadHoldingRegister+0x110>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80013be:	2317      	movs	r3, #23
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	2203      	movs	r2, #3
 80013c4:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80013c6:	2317      	movs	r3, #23
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b007      	add	sp, #28
 80013d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d4 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80013de:	2317      	movs	r3, #23
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	d800      	bhi.n	80013f0 <eMBFuncReadWriteMultipleHoldingRegister+0x1c>
 80013ee:	e0d0      	b.n	8001592 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	2014      	movs	r0, #20
 80013fa:	183b      	adds	r3, r7, r0
 80013fc:	0212      	lsls	r2, r2, #8
 80013fe:	801a      	strh	r2, [r3, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3302      	adds	r3, #2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b299      	uxth	r1, r3
 8001408:	183b      	adds	r3, r7, r0
 800140a:	183a      	adds	r2, r7, r0
 800140c:	8812      	ldrh	r2, [r2, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	801a      	strh	r2, [r3, #0]
        usRegReadAddress++;
 8001412:	183b      	adds	r3, r7, r0
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	0006      	movs	r6, r0
 8001418:	183b      	adds	r3, r7, r0
 800141a:	3201      	adds	r2, #1
 800141c:	801a      	strh	r2, [r3, #0]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3303      	adds	r3, #3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b29a      	uxth	r2, r3
 8001426:	2012      	movs	r0, #18
 8001428:	183b      	adds	r3, r7, r0
 800142a:	0212      	lsls	r2, r2, #8
 800142c:	801a      	strh	r2, [r3, #0]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b299      	uxth	r1, r3
 8001436:	183b      	adds	r3, r7, r0
 8001438:	183a      	adds	r2, r7, r0
 800143a:	8812      	ldrh	r2, [r2, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	801a      	strh	r2, [r3, #0]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3305      	adds	r3, #5
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b29a      	uxth	r2, r3
 8001448:	2410      	movs	r4, #16
 800144a:	193b      	adds	r3, r7, r4
 800144c:	0212      	lsls	r2, r2, #8
 800144e:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3306      	adds	r3, #6
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b299      	uxth	r1, r3
 8001458:	193b      	adds	r3, r7, r4
 800145a:	193a      	adds	r2, r7, r4
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	801a      	strh	r2, [r3, #0]
        usRegWriteAddress++;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	193b      	adds	r3, r7, r4
 8001468:	3201      	adds	r2, #1
 800146a:	801a      	strh	r2, [r3, #0]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3307      	adds	r3, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b29a      	uxth	r2, r3
 8001474:	240e      	movs	r4, #14
 8001476:	193b      	adds	r3, r7, r4
 8001478:	0212      	lsls	r2, r2, #8
 800147a:	801a      	strh	r2, [r3, #0]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3308      	adds	r3, #8
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b299      	uxth	r1, r3
 8001484:	193b      	adds	r3, r7, r4
 8001486:	193a      	adds	r2, r7, r4
 8001488:	8812      	ldrh	r2, [r2, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	801a      	strh	r2, [r3, #0]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 800148e:	220d      	movs	r2, #13
 8001490:	18bb      	adds	r3, r7, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	7a52      	ldrb	r2, [r2, #9]
 8001496:	701a      	strb	r2, [r3, #0]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8001498:	183b      	adds	r3, r7, r0
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d100      	bne.n	80014a2 <eMBFuncReadWriteMultipleHoldingRegister+0xce>
 80014a0:	e073      	b.n	800158a <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 80014a2:	0005      	movs	r5, r0
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	2b7d      	cmp	r3, #125	; 0x7d
 80014aa:	d900      	bls.n	80014ae <eMBFuncReadWriteMultipleHoldingRegister+0xda>
 80014ac:	e06d      	b.n	800158a <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
 80014ae:	0021      	movs	r1, r4
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d068      	beq.n	800158a <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	2b79      	cmp	r3, #121	; 0x79
 80014be:	d864      	bhi.n	800158a <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	005a      	lsls	r2, r3, #1
 80014c6:	200d      	movs	r0, #13
 80014c8:	183b      	adds	r3, r7, r0
 80014ca:	781b      	ldrb	r3, [r3, #0]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d15c      	bne.n	800158a <eMBFuncReadWriteMultipleHoldingRegister+0x1b6>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	0018      	movs	r0, r3
 80014d4:	300a      	adds	r0, #10
 80014d6:	2216      	movs	r2, #22
 80014d8:	18bc      	adds	r4, r7, r2
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	2310      	movs	r3, #16
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	8819      	ldrh	r1, [r3, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	f7ff fb41 	bl	8000b6c <eMBRegHoldingCB>
 80014ea:	0003      	movs	r3, r0
 80014ec:	7023      	strb	r3, [r4, #0]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80014ee:	2016      	movs	r0, #22
 80014f0:	183b      	adds	r3, r7, r0
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d139      	bne.n	800156c <eMBFuncReadWriteMultipleHoldingRegister+0x198>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	2217      	movs	r2, #23
 800150a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8001518:	197b      	adds	r3, r7, r5
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	1c0a      	adds	r2, r1, #0
 8001526:	1892      	adds	r2, r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8001538:	183c      	adds	r4, r7, r0
 800153a:	197b      	adds	r3, r7, r5
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	19bb      	adds	r3, r7, r6
 8001540:	8819      	ldrh	r1, [r3, #0]
 8001542:	68b8      	ldr	r0, [r7, #8]
 8001544:	2300      	movs	r3, #0
 8001546:	f7ff fb11 	bl	8000b6c <eMBRegHoldingCB>
 800154a:	0003      	movs	r3, r0
 800154c:	7023      	strb	r3, [r4, #0]
                if( eRegStatus == MB_ENOERR )
 800154e:	2016      	movs	r0, #22
 8001550:	183b      	adds	r3, r7, r0
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <eMBFuncReadWriteMultipleHoldingRegister+0x198>
                {
                    *usLen += 2 * usRegReadCount;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	197b      	adds	r3, r7, r5
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	18db      	adds	r3, r3, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	18d3      	adds	r3, r2, r3
 8001566:	b29a      	uxth	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800156c:	2216      	movs	r2, #22
 800156e:	18bb      	adds	r3, r7, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00d      	beq.n	8001592 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8001576:	2317      	movs	r3, #23
 8001578:	18fc      	adds	r4, r7, r3
 800157a:	18bb      	adds	r3, r7, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8c0 	bl	8001704 <prveMBError2Exception>
 8001584:	0003      	movs	r3, r0
 8001586:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 8001588:	e003      	b.n	8001592 <eMBFuncReadWriteMultipleHoldingRegister+0x1be>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800158a:	2317      	movs	r3, #23
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2203      	movs	r2, #3
 8001590:	701a      	strb	r2, [r3, #0]
        }
    }
    return eStatus;
 8001592:	2317      	movs	r3, #23
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781b      	ldrb	r3, [r3, #0]
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b007      	add	sp, #28
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a0 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80015aa:	2317      	movs	r3, #23
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d000      	beq.n	80015bc <eMBFuncReadInputRegister+0x1c>
 80015ba:	e07a      	b.n	80016b2 <eMBFuncReadInputRegister+0x112>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	2014      	movs	r0, #20
 80015c6:	183b      	adds	r3, r7, r0
 80015c8:	0212      	lsls	r2, r2, #8
 80015ca:	801a      	strh	r2, [r3, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3302      	adds	r3, #2
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b299      	uxth	r1, r3
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	183a      	adds	r2, r7, r0
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	801a      	strh	r2, [r3, #0]
        usRegAddress++;
 80015de:	183b      	adds	r3, r7, r0
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	0005      	movs	r5, r0
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	3201      	adds	r2, #1
 80015e8:	801a      	strh	r2, [r3, #0]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	2012      	movs	r0, #18
 80015f4:	183b      	adds	r3, r7, r0
 80015f6:	0212      	lsls	r2, r2, #8
 80015f8:	801a      	strh	r2, [r3, #0]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b299      	uxth	r1, r3
 8001602:	183b      	adds	r3, r7, r0
 8001604:	183a      	adds	r2, r7, r0
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	801a      	strh	r2, [r3, #0]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 800160c:	183b      	adds	r3, r7, r0
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d049      	beq.n	80016a8 <eMBFuncReadInputRegister+0x108>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8001614:	183b      	adds	r3, r7, r0
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b7c      	cmp	r3, #124	; 0x7c
 800161a:	d845      	bhi.n	80016a8 <eMBFuncReadInputRegister+0x108>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2204      	movs	r2, #4
 800162e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 800163c:	183b      	adds	r3, r7, r0
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b2d9      	uxtb	r1, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60fa      	str	r2, [r7, #12]
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	1892      	adds	r2, r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 800165c:	260b      	movs	r6, #11
 800165e:	19bc      	adds	r4, r7, r6
 8001660:	183b      	adds	r3, r7, r0
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	197b      	adds	r3, r7, r5
 8001666:	8819      	ldrh	r1, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff fa1a 	bl	8000aa4 <eMBRegInputCB>
 8001670:	0003      	movs	r3, r0
 8001672:	7023      	strb	r3, [r4, #0]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8001674:	19bb      	adds	r3, r7, r6
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <eMBFuncReadInputRegister+0xf0>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800167c:	2317      	movs	r3, #23
 800167e:	18fc      	adds	r4, r7, r3
 8001680:	19bb      	adds	r3, r7, r6
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	0018      	movs	r0, r3
 8001686:	f000 f83d 	bl	8001704 <prveMBError2Exception>
 800168a:	0003      	movs	r3, r0
 800168c:	7023      	strb	r3, [r4, #0]
            if( eRegStatus != MB_ENOERR )
 800168e:	e014      	b.n	80016ba <eMBFuncReadInputRegister+0x11a>
            }
            else
            {
                *usLen += usRegCount * 2;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	881a      	ldrh	r2, [r3, #0]
 8001694:	2312      	movs	r3, #18
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	18db      	adds	r3, r3, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80016a6:	e008      	b.n	80016ba <eMBFuncReadInputRegister+0x11a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80016a8:	2317      	movs	r3, #23
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	2203      	movs	r2, #3
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e003      	b.n	80016ba <eMBFuncReadInputRegister+0x11a>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80016b2:	2317      	movs	r3, #23
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2203      	movs	r2, #3
 80016b8:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80016ba:	2317      	movs	r3, #23
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	781b      	ldrb	r3, [r3, #0]
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b007      	add	sp, #28
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c8 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	1c58      	adds	r0, r3, #1
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <eMBFuncReportSlaveID+0x34>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	001a      	movs	r2, r3
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <eMBFuncReportSlaveID+0x38>)
 80016de:	0019      	movs	r1, r3
 80016e0:	f003 f827 	bl	8004732 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <eMBFuncReportSlaveID+0x34>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	2000021c 	.word	0x2000021c
 8001700:	200001fc 	.word	0x200001fc

08001704 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	0002      	movs	r2, r0
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	701a      	strb	r2, [r3, #0]
    eMBException    eStatus;

    switch ( eErrorCode )
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b07      	cmp	r3, #7
 8001716:	d00f      	beq.n	8001738 <prveMBError2Exception+0x34>
 8001718:	dc13      	bgt.n	8001742 <prveMBError2Exception+0x3e>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <prveMBError2Exception+0x20>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d005      	beq.n	800172e <prveMBError2Exception+0x2a>
 8001722:	e00e      	b.n	8001742 <prveMBError2Exception+0x3e>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8001724:	230f      	movs	r3, #15
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
            break;
 800172c:	e00e      	b.n	800174c <prveMBError2Exception+0x48>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800172e:	230f      	movs	r3, #15
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
            break;
 8001736:	e009      	b.n	800174c <prveMBError2Exception+0x48>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8001738:	230f      	movs	r3, #15
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	2206      	movs	r2, #6
 800173e:	701a      	strb	r2, [r3, #0]
            break;
 8001740:	e004      	b.n	800174c <prveMBError2Exception+0x48>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8001742:	230f      	movs	r3, #15
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	2204      	movs	r2, #4
 8001748:	701a      	strb	r2, [r3, #0]
            break;
 800174a:	46c0      	nop			; (mov r8, r8)
    }

    return eStatus;
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	0004      	movs	r4, r0
 8001764:	0008      	movs	r0, r1
 8001766:	0011      	movs	r1, r2
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	1c22      	adds	r2, r4, #0
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	1d7b      	adds	r3, r7, #5
 8001778:	1c0a      	adds	r2, r1, #0
 800177a:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d007      	beq.n	800179c <eMBInit+0x40>
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <eMBInit+0x40>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8001794:	1dbb      	adds	r3, r7, #6
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2bf7      	cmp	r3, #247	; 0xf7
 800179a:	d904      	bls.n	80017a6 <eMBInit+0x4a>
    {
        eStatus = MB_EINVAL;
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	2202      	movs	r2, #2
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e047      	b.n	8001836 <eMBInit+0xda>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <eMBInit+0xe8>)
 80017a8:	1dba      	adds	r2, r7, #6
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	701a      	strb	r2, [r3, #0]

        switch ( eMode )
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d127      	bne.n	8001806 <eMBInit+0xaa>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <eMBInit+0xec>)
 80017b8:	4a24      	ldr	r2, [pc, #144]	; (800184c <eMBInit+0xf0>)
 80017ba:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <eMBInit+0xf4>)
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <eMBInit+0xf8>)
 80017c0:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <eMBInit+0xfc>)
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <eMBInit+0x100>)
 80017c6:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <eMBInit+0x104>)
 80017ca:	4a26      	ldr	r2, [pc, #152]	; (8001864 <eMBInit+0x108>)
 80017cc:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <eMBInit+0x10c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <eMBInit+0x110>)
 80017d6:	4a26      	ldr	r2, [pc, #152]	; (8001870 <eMBInit+0x114>)
 80017d8:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <eMBInit+0x118>)
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <eMBInit+0x11c>)
 80017de:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <eMBInit+0x120>)
 80017e2:	4a27      	ldr	r2, [pc, #156]	; (8001880 <eMBInit+0x124>)
 80017e4:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <eMBInit+0xe8>)
 80017e8:	7818      	ldrb	r0, [r3, #0]
 80017ea:	230f      	movs	r3, #15
 80017ec:	18fc      	adds	r4, r7, r3
 80017ee:	2320      	movs	r3, #32
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	781d      	ldrb	r5, [r3, #0]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	1d7b      	adds	r3, r7, #5
 80017f8:	7819      	ldrb	r1, [r3, #0]
 80017fa:	002b      	movs	r3, r5
 80017fc:	f000 faa0 	bl	8001d40 <eMBRTUInit>
 8001800:	0003      	movs	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
            break;
 8001804:	e003      	b.n	800180e <eMBInit+0xb2>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8001806:	230f      	movs	r3, #15
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2202      	movs	r2, #2
 800180c:	701a      	strb	r2, [r3, #0]
        }

        if( eStatus == MB_ENOERR )
 800180e:	240f      	movs	r4, #15
 8001810:	193b      	adds	r3, r7, r4
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10e      	bne.n	8001836 <eMBInit+0xda>
        {
            if( !xMBPortEventInit(  ) )
 8001818:	f000 f91e 	bl	8001a58 <xMBPortEventInit>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d103      	bne.n	8001828 <eMBInit+0xcc>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2203      	movs	r2, #3
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e006      	b.n	8001836 <eMBInit+0xda>
            }
            else
            {
                eMBCurrentMode = eMode;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <eMBInit+0x128>)
 800182a:	1dfa      	adds	r2, r7, #7
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	701a      	strb	r2, [r3, #0]
                eMBState = STATE_DISABLED;
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <eMBInit+0x12c>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8001836:	230f      	movs	r3, #15
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	2000021e 	.word	0x2000021e
 8001848:	20000224 	.word	0x20000224
 800184c:	08001ddd 	.word	0x08001ddd
 8001850:	20000228 	.word	0x20000228
 8001854:	08001e05 	.word	0x08001e05
 8001858:	20000220 	.word	0x20000220
 800185c:	08001ed5 	.word	0x08001ed5
 8001860:	2000022c 	.word	0x2000022c
 8001864:	08001e25 	.word	0x08001e25
 8001868:	20000230 	.word	0x20000230
 800186c:	20000234 	.word	0x20000234
 8001870:	08001fbd 	.word	0x08001fbd
 8001874:	20000238 	.word	0x20000238
 8001878:	08002091 	.word	0x08002091
 800187c:	2000023c 	.word	0x2000023c
 8001880:	08002145 	.word	0x08002145
 8001884:	2000021f 	.word	0x2000021f
 8001888:	20000006 	.word	0x20000006

0800188c <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]

    if( eMBState == STATE_DISABLED )
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <eMBEnable+0x34>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d106      	bne.n	80018ae <eMBEnable+0x22>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <eMBEnable+0x38>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <eMBEnable+0x34>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e002      	b.n	80018b4 <eMBEnable+0x28>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	2206      	movs	r2, #6
 80018b2:	701a      	strb	r2, [r3, #0]
    }
    return eStatus;
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000006 	.word	0x20000006
 80018c4:	20000224 	.word	0x20000224

080018c8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80018ce:	1cfb      	adds	r3, r7, #3
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <eMBPoll+0x168>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <eMBPoll+0x18>
    {
        return MB_EILLSTATE;
 80018dc:	2306      	movs	r3, #6
 80018de:	e0a3      	b.n	8001a28 <eMBPoll+0x160>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80018e0:	1cbb      	adds	r3, r7, #2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f8da 	bl	8001a9c <xMBPortEventGet>
 80018e8:	0003      	movs	r3, r0
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d000      	beq.n	80018f0 <eMBPoll+0x28>
 80018ee:	e09a      	b.n	8001a26 <eMBPoll+0x15e>
    {
        switch ( eEvent )
 80018f0:	1cbb      	adds	r3, r7, #2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d100      	bne.n	80018fa <eMBPoll+0x32>
 80018f8:	e08e      	b.n	8001a18 <eMBPoll+0x150>
 80018fa:	dd00      	ble.n	80018fe <eMBPoll+0x36>
 80018fc:	e093      	b.n	8001a26 <eMBPoll+0x15e>
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d024      	beq.n	800194c <eMBPoll+0x84>
 8001902:	dd00      	ble.n	8001906 <eMBPoll+0x3e>
 8001904:	e08f      	b.n	8001a26 <eMBPoll+0x15e>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d100      	bne.n	800190c <eMBPoll+0x44>
 800190a:	e087      	b.n	8001a1c <eMBPoll+0x154>
 800190c:	2b01      	cmp	r3, #1
 800190e:	d000      	beq.n	8001912 <eMBPoll+0x4a>
 8001910:	e089      	b.n	8001a26 <eMBPoll+0x15e>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8001912:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <eMBPoll+0x16c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	1cfc      	adds	r4, r7, #3
 8001918:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <eMBPoll+0x170>)
 800191a:	4948      	ldr	r1, [pc, #288]	; (8001a3c <eMBPoll+0x174>)
 800191c:	4848      	ldr	r0, [pc, #288]	; (8001a40 <eMBPoll+0x178>)
 800191e:	4798      	blx	r3
 8001920:	0003      	movs	r3, r0
 8001922:	7023      	strb	r3, [r4, #0]
            if( eStatus == MB_ENOERR )
 8001924:	1cfb      	adds	r3, r7, #3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <eMBPoll+0x66>
 800192c:	e078      	b.n	8001a20 <eMBPoll+0x158>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800192e:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <eMBPoll+0x178>)
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <eMBPoll+0x17c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d004      	beq.n	8001944 <eMBPoll+0x7c>
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <eMBPoll+0x178>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d000      	beq.n	8001944 <eMBPoll+0x7c>
 8001942:	e06d      	b.n	8001a20 <eMBPoll+0x158>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8001944:	2002      	movs	r0, #2
 8001946:	f000 f893 	bl	8001a70 <xMBPortEventPost>
                }
            }
            break;
 800194a:	e069      	b.n	8001a20 <eMBPoll+0x158>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800194c:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <eMBPoll+0x174>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <eMBPoll+0x180>)
 8001954:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <eMBPoll+0x184>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	e020      	b.n	80019a4 <eMBPoll+0xdc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <eMBPoll+0x188>)
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01e      	beq.n	80019ac <eMBPoll+0xe4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <eMBPoll+0x188>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	00d2      	lsls	r2, r2, #3
 8001974:	5cd2      	ldrb	r2, [r2, r3]
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <eMBPoll+0x180>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d10f      	bne.n	800199e <eMBPoll+0xd6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800197e:	4a34      	ldr	r2, [pc, #208]	; (8001a50 <eMBPoll+0x188>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	3304      	adds	r3, #4
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <eMBPoll+0x174>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	492a      	ldr	r1, [pc, #168]	; (8001a38 <eMBPoll+0x170>)
 8001990:	0018      	movs	r0, r3
 8001992:	4790      	blx	r2
 8001994:	0003      	movs	r3, r0
 8001996:	001a      	movs	r2, r3
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <eMBPoll+0x184>)
 800199a:	701a      	strb	r2, [r3, #0]
                    break;
 800199c:	e007      	b.n	80019ae <eMBPoll+0xe6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	dddb      	ble.n	8001962 <eMBPoll+0x9a>
 80019aa:	e000      	b.n	80019ae <eMBPoll+0xe6>
                    break;
 80019ac:	46c0      	nop			; (mov r8, r8)
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <eMBPoll+0x178>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d036      	beq.n	8001a24 <eMBPoll+0x15c>
            {
                if( eException != MB_EX_NONE )
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <eMBPoll+0x184>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01e      	beq.n	80019fc <eMBPoll+0x134>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <eMBPoll+0x170>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <eMBPoll+0x180>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <eMBPoll+0x174>)
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <eMBPoll+0x170>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	1c58      	adds	r0, r3, #1
 80019d2:	b284      	uxth	r4, r0
 80019d4:	4818      	ldr	r0, [pc, #96]	; (8001a38 <eMBPoll+0x170>)
 80019d6:	8004      	strh	r4, [r0, #0]
 80019d8:	18cb      	adds	r3, r1, r3
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	4249      	negs	r1, r1
 80019de:	430a      	orrs	r2, r1
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <eMBPoll+0x174>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <eMBPoll+0x170>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	1c59      	adds	r1, r3, #1
 80019ee:	b288      	uxth	r0, r1
 80019f0:	4911      	ldr	r1, [pc, #68]	; (8001a38 <eMBPoll+0x170>)
 80019f2:	8008      	strh	r0, [r1, #0]
 80019f4:	18d3      	adds	r3, r2, r3
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <eMBPoll+0x184>)
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <eMBPoll+0x18c>)
 80019fe:	681d      	ldr	r5, [r3, #0]
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <eMBPoll+0x17c>)
 8001a02:	7818      	ldrb	r0, [r3, #0]
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <eMBPoll+0x174>)
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <eMBPoll+0x170>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	1cfc      	adds	r4, r7, #3
 8001a0e:	001a      	movs	r2, r3
 8001a10:	47a8      	blx	r5
 8001a12:	0003      	movs	r3, r0
 8001a14:	7023      	strb	r3, [r4, #0]
            }
            break;
 8001a16:	e005      	b.n	8001a24 <eMBPoll+0x15c>

        case EV_FRAME_SENT:
            break;
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	e004      	b.n	8001a26 <eMBPoll+0x15e>
            break;
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	e002      	b.n	8001a26 <eMBPoll+0x15e>
            break;
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	e000      	b.n	8001a26 <eMBPoll+0x15e>
            break;
 8001a24:	46c0      	nop			; (mov r8, r8)
        }
    }
    return MB_ENOERR;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a30:	20000006 	.word	0x20000006
 8001a34:	2000022c 	.word	0x2000022c
 8001a38:	20000248 	.word	0x20000248
 8001a3c:	20000244 	.word	0x20000244
 8001a40:	20000240 	.word	0x20000240
 8001a44:	2000021e 	.word	0x2000021e
 8001a48:	2000024a 	.word	0x2000024a
 8001a4c:	2000024b 	.word	0x2000024b
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000220 	.word	0x20000220

08001a58 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <xMBPortEventInit+0x14>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	2000024d 	.word	0x2000024d

08001a70 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	0002      	movs	r2, r0
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	701a      	strb	r2, [r3, #0]
    xEventInQueue = TRUE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <xMBPortEventPost+0x24>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <xMBPortEventPost+0x28>)
 8001a84:	1dfa      	adds	r2, r7, #7
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000024d 	.word	0x2000024d
 8001a98:	2000024c 	.word	0x2000024c

08001a9c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

    if( xEventInQueue )
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <xMBPortEventGet+0x3c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <xMBPortEventGet+0x2c>
    {
        *eEvent = eQueuedEvent;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <xMBPortEventGet+0x40>)
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <xMBPortEventGet+0x3c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
    }
    return xEventHappened;
 8001ac8:	230f      	movs	r3, #15
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	781b      	ldrb	r3, [r3, #0]
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	2000024d 	.word	0x2000024d
 8001adc:	2000024c 	.word	0x2000024c

08001ae0 <vMBPortSerialEnable>:
#define hlpuart1 huart1
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	1c0a      	adds	r2, r1, #0
 8001af0:	701a      	strb	r2, [r3, #0]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00f      	beq.n	8001b1a <vMBPortSerialEnable+0x3a>
	HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_RESET);
 8001afa:	2390      	movs	r3, #144	; 0x90
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	2200      	movs	r2, #0
 8001b00:	2102      	movs	r1, #2
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 fe69 	bl	80027da <HAL_GPIO_WritePin>
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2120      	movs	r1, #32
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <vMBPortSerialEnable+0x4a>
  } else {    
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2120      	movs	r1, #32
 8001b26:	438a      	bics	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
  }
  
  if (xTxEnable) {
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00f      	beq.n	8001b52 <vMBPortSerialEnable+0x72>
	HAL_GPIO_WritePin(RS485_CT_GPIO_Port, RS485_CT_Pin, GPIO_PIN_SET);
 8001b32:	2390      	movs	r3, #144	; 0x90
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	2201      	movs	r2, #1
 8001b38:	2102      	movs	r1, #2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fe4d 	bl	80027da <HAL_GPIO_WritePin>
    __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_TXE);
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
  } else {
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_TXE);
  }  
}
 8001b50:	e007      	b.n	8001b62 <vMBPortSerialEnable+0x82>
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_TXE);
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <vMBPortSerialEnable+0x8c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	438a      	bics	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]
}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b002      	add	sp, #8
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	20000150 	.word	0x20000150

08001b70 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	0004      	movs	r4, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	0010      	movs	r0, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	1c22      	adds	r2, r4, #0
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	1dbb      	adds	r3, r7, #6
 8001b86:	1c02      	adds	r2, r0, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	1d7b      	adds	r3, r7, #5
 8001b8c:	1c0a      	adds	r2, r1, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b003      	add	sp, #12
 8001b98:	bd90      	pop	{r4, r7, pc}
	...

08001b9c <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	701a      	strb	r2, [r3, #0]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ucByte, 1, 10));
 8001ba8:	1df9      	adds	r1, r7, #7
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <xMBPortSerialPutByte+0x28>)
 8001bac:	230a      	movs	r3, #10
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f002 f806 	bl	8003bc0 <HAL_UART_Transmit>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	425a      	negs	r2, r3
 8001bb8:	4153      	adcs	r3, r2
 8001bba:	b2db      	uxtb	r3, r3
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000150 	.word	0x20000150

08001bc8 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(hlpuart1.Instance->RDR & (uint8_t)0x00FF);
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <xMBPortSerialGetByte+0x20>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000150 	.word	0x20000150

08001bec <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	801a      	strh	r2, [r3, #0]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim2.Instance = TIM2;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <xMBPortTimersInit+0x7c>)
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	05d2      	lsls	r2, r2, #23
 8001bfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8001c00:	f001 fa6c 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8001c04:	0003      	movs	r3, r0
 8001c06:	4919      	ldr	r1, [pc, #100]	; (8001c6c <xMBPortTimersInit+0x80>)
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7fe fa87 	bl	800011c <__udivsi3>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <xMBPortTimersInit+0x7c>)
 8001c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <xMBPortTimersInit+0x7c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <xMBPortTimersInit+0x7c>)
 8001c1e:	2231      	movs	r2, #49	; 0x31
 8001c20:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <xMBPortTimersInit+0x84>)
 8001c24:	1dba      	adds	r2, r7, #6
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	801a      	strh	r2, [r3, #0]
  
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <xMBPortTimersInit+0x7c>)
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f001 fb39 	bl	80032a4 <HAL_TIM_Base_Init>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d001      	beq.n	8001c3a <xMBPortTimersInit+0x4e>
  {
    return FALSE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e011      	b.n	8001c5e <xMBPortTimersInit+0x72>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2220      	movs	r2, #32
 8001c40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c48:	187a      	adds	r2, r7, r1
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <xMBPortTimersInit+0x7c>)
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f001 fefa 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <xMBPortTimersInit+0x70>
  {
    return FALSE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e000      	b.n	8001c5e <xMBPortTimersInit+0x72>
  }
  
  return TRUE;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	20000108 	.word	0x20000108
 8001c6c:	000f4240 	.word	0x000f4240
 8001c70:	2000024e 	.word	0x2000024e

08001c74 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <vMBPortTimersEnable+0x1c>)
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <vMBPortTimersEnable+0x20>)
 8001c7e:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <vMBPortTimersEnable+0x24>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f001 fb5e 	bl	8003344 <HAL_TIM_Base_Start_IT>
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	2000024e 	.word	0x2000024e
 8001c94:	20000250 	.word	0x20000250
 8001c98:	20000108 	.word	0x20000108

08001c9c <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim2);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <vMBPortTimersDisable+0x14>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f001 fb9a 	bl	80033dc <HAL_TIM_Base_Stop_IT>
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	20000108 	.word	0x20000108

08001cb4 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	000a      	movs	r2, r1
 8001cbe:	1cbb      	adds	r3, r7, #2
 8001cc0:	801a      	strh	r2, [r3, #0]
    UCHAR           ucCRCHi = 0xFF;
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	22ff      	movs	r2, #255	; 0xff
 8001cc8:	701a      	strb	r2, [r3, #0]
    UCHAR           ucCRCLo = 0xFF;
 8001cca:	230e      	movs	r3, #14
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	701a      	strb	r2, [r3, #0]
    int             iIndex;

    while( usLen-- )
 8001cd2:	e019      	b.n	8001d08 <usMBCRC16+0x54>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	200e      	movs	r0, #14
 8001cde:	183b      	adds	r3, r7, r0
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4053      	eors	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8001ce8:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <usMBCRC16+0x84>)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	7819      	ldrb	r1, [r3, #0]
 8001cf0:	183b      	adds	r3, r7, r0
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	183a      	adds	r2, r7, r0
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	404a      	eors	r2, r1
 8001cfa:	701a      	strb	r2, [r3, #0]
        ucCRCHi = aucCRCLo[iIndex];
 8001cfc:	183b      	adds	r3, r7, r0
 8001cfe:	490f      	ldr	r1, [pc, #60]	; (8001d3c <usMBCRC16+0x88>)
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	188a      	adds	r2, r1, r2
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	701a      	strb	r2, [r3, #0]
    while( usLen-- )
 8001d08:	1cbb      	adds	r3, r7, #2
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	1cba      	adds	r2, r7, #2
 8001d0e:	1e59      	subs	r1, r3, #1
 8001d10:	8011      	strh	r1, [r2, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1de      	bne.n	8001cd4 <usMBCRC16+0x20>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8001d16:	230f      	movs	r3, #15
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	230e      	movs	r3, #14
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	b29b      	uxth	r3, r3
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b004      	add	sp, #16
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	08005484 	.word	0x08005484
 8001d3c:	08005584 	.word	0x08005584

08001d40 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	0004      	movs	r4, r0
 8001d48:	0008      	movs	r0, r1
 8001d4a:	603a      	str	r2, [r7, #0]
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	1c22      	adds	r2, r4, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	1c02      	adds	r2, r0, #0
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	1d7b      	adds	r3, r7, #5
 8001d5c:	1c0a      	adds	r2, r1, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001d60:	240f      	movs	r4, #15
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	46c0      	nop			; (mov r8, r8)

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8001d6c:	1d7b      	adds	r3, r7, #5
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	1dbb      	adds	r3, r7, #6
 8001d74:	7818      	ldrb	r0, [r3, #0]
 8001d76:	0013      	movs	r3, r2
 8001d78:	2208      	movs	r2, #8
 8001d7a:	f7ff fef9 	bl	8001b70 <xMBPortSerialInit>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d003      	beq.n	8001d8c <eMBRTUInit+0x4c>
    {
        eStatus = MB_EPORTERR;
 8001d84:	193b      	adds	r3, r7, r4
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e01b      	b.n	8001dc4 <eMBRTUInit+0x84>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	2396      	movs	r3, #150	; 0x96
 8001d90:	01db      	lsls	r3, r3, #7
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d902      	bls.n	8001d9c <eMBRTUInit+0x5c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8001d96:	2323      	movs	r3, #35	; 0x23
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	e007      	b.n	8001dac <eMBRTUInit+0x6c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	0019      	movs	r1, r3
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <eMBRTUInit+0x98>)
 8001da4:	f7fe f9ba 	bl	800011c <__udivsi3>
 8001da8:	0003      	movs	r3, r0
 8001daa:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff ff1b 	bl	8001bec <xMBPortTimersInit>
 8001db6:	0003      	movs	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d003      	beq.n	8001dc4 <eMBRTUInit+0x84>
        {
            eStatus = MB_EPORTERR;
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc4:	b662      	cpsie	i
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b005      	add	sp, #20
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	00177fa0 	.word	0x00177fa0

08001ddc <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	46c0      	nop			; (mov r8, r8)
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <eMBRTUStart+0x24>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8001dea:	2100      	movs	r1, #0
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff fe77 	bl	8001ae0 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8001df2:	f7ff ff3f 	bl	8001c74 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8001df6:	b662      	cpsie	i
}
 8001df8:	46c0      	nop			; (mov r8, r8)

    EXIT_CRITICAL_SECTION(  );
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000253 	.word	0x20000253

08001e04 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff fe66 	bl	8001ae0 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8001e14:	f7ff ff42 	bl	8001c9c <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e18:	b662      	cpsie	i
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
    EXIT_CRITICAL_SECTION(  );
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8001e30:	2316      	movs	r3, #22
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001e38:	2317      	movs	r3, #23
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	46c0      	nop			; (mov r8, r8)

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <eMBRTUReceive+0x98>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d905      	bls.n	8001e5a <eMBRTUReceive+0x36>
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <eMBRTUReceive+0x9c>)
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <eMBRTUReceive+0xa0>)
 8001e52:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <eMBRTUReceive+0xa4>)
 8001e54:	219c      	movs	r1, #156	; 0x9c
 8001e56:	f002 faab 	bl	80043b0 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <eMBRTUReceive+0x98>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d91d      	bls.n	8001ea0 <eMBRTUReceive+0x7c>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <eMBRTUReceive+0x98>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <eMBRTUReceive+0xa8>)
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7ff ff20 	bl	8001cb4 <usMBCRC16>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d113      	bne.n	8001ea0 <eMBRTUReceive+0x7c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <eMBRTUReceive+0xa8>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <eMBRTUReceive+0x98>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <eMBRTUReceive+0xac>)
 8001e94:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8001e96:	2316      	movs	r3, #22
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e003      	b.n	8001ea8 <eMBRTUReceive+0x84>
    }
    else
    {
        eStatus = MB_EIO;
 8001ea0:	2317      	movs	r3, #23
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ea8:	b662      	cpsie	i
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8001eac:	2317      	movs	r3, #23
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b006      	add	sp, #24
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	2000035a 	.word	0x2000035a
 8001ec0:	0800538c 	.word	0x0800538c
 8001ec4:	08005684 	.word	0x08005684
 8001ec8:	080053b4 	.word	0x080053b4
 8001ecc:	20000254 	.word	0x20000254
 8001ed0:	20000255 	.word	0x20000255

08001ed4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6039      	str	r1, [r7, #0]
 8001edc:	0011      	movs	r1, r2
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	1c02      	adds	r2, r0, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	1c0a      	adds	r2, r1, #0
 8001ee8:	801a      	strh	r2, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8001eea:	230f      	movs	r3, #15
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef2:	b672      	cpsid	i
}
 8001ef4:	46c0      	nop			; (mov r8, r8)

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <eMBRTUSend+0xd4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d145      	bne.n	8001f8c <eMBRTUSend+0xb8>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <eMBRTUSend+0xd8>)
 8001f06:	601a      	str	r2, [r3, #0]
        usSndBufferCount = 1;
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <eMBRTUSend+0xd8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	1dfa      	adds	r2, r7, #7
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	18d3      	adds	r3, r2, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f28:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <eMBRTUSend+0xd8>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	250c      	movs	r5, #12
 8001f36:	197c      	adds	r4, r7, r5
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f7ff feba 	bl	8001cb4 <usMBCRC16>
 8001f40:	0003      	movs	r3, r0
 8001f42:	8023      	strh	r3, [r4, #0]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	b291      	uxth	r1, r2
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f50:	8011      	strh	r1, [r2, #0]
 8001f52:	001a      	movs	r2, r3
 8001f54:	197b      	adds	r3, r7, r5
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <eMBRTUSend+0xe0>)
 8001f5c:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8001f5e:	197b      	adds	r3, r7, r5
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b299      	uxth	r1, r3
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	b290      	uxth	r0, r2
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <eMBRTUSend+0xdc>)
 8001f72:	8010      	strh	r0, [r2, #0]
 8001f74:	001a      	movs	r2, r3
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <eMBRTUSend+0xe0>)
 8001f7a:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <eMBRTUSend+0xe4>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8001f82:	2101      	movs	r1, #1
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fdab 	bl	8001ae0 <vMBPortSerialEnable>
 8001f8a:	e003      	b.n	8001f94 <eMBRTUSend+0xc0>
    }
    else
    {
        eStatus = MB_EIO;
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2205      	movs	r2, #5
 8001f92:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f94:	b662      	cpsie	i
}
 8001f96:	46c0      	nop			; (mov r8, r8)
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b004      	add	sp, #16
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	20000253 	.word	0x20000253
 8001fac:	20000354 	.word	0x20000354
 8001fb0:	20000358 	.word	0x20000358
 8001fb4:	20000254 	.word	0x20000254
 8001fb8:	20000252 	.word	0x20000252

08001fbc <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <xMBRTUReceiveFSM+0xb8>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <xMBRTUReceiveFSM+0x22>
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <xMBRTUReceiveFSM+0xbc>)
 8001fd4:	4a29      	ldr	r2, [pc, #164]	; (800207c <xMBRTUReceiveFSM+0xc0>)
 8001fd6:	482a      	ldr	r0, [pc, #168]	; (8002080 <xMBRTUReceiveFSM+0xc4>)
 8001fd8:	21e6      	movs	r1, #230	; 0xe6
 8001fda:	f002 f9e9 	bl	80043b0 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8001fde:	1dbb      	adds	r3, r7, #6
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff fdf1 	bl	8001bc8 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <xMBRTUReceiveFSM+0xc8>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d00b      	beq.n	8002008 <xMBRTUReceiveFSM+0x4c>
 8001ff0:	dc3a      	bgt.n	8002068 <xMBRTUReceiveFSM+0xac>
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d020      	beq.n	8002038 <xMBRTUReceiveFSM+0x7c>
 8001ff6:	dc37      	bgt.n	8002068 <xMBRTUReceiveFSM+0xac>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <xMBRTUReceiveFSM+0x46>
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d006      	beq.n	800200e <xMBRTUReceiveFSM+0x52>
 8002000:	e032      	b.n	8002068 <xMBRTUReceiveFSM+0xac>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8002002:	f7ff fe37 	bl	8001c74 <vMBPortTimersEnable>
        break;
 8002006:	e02f      	b.n	8002068 <xMBRTUReceiveFSM+0xac>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8002008:	f7ff fe34 	bl	8001c74 <vMBPortTimersEnable>
        break;
 800200c:	e02c      	b.n	8002068 <xMBRTUReceiveFSM+0xac>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <xMBRTUReceiveFSM+0xcc>)
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <xMBRTUReceiveFSM+0xcc>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	b291      	uxth	r1, r2
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <xMBRTUReceiveFSM+0xcc>)
 8002020:	8011      	strh	r1, [r2, #0]
 8002022:	001a      	movs	r2, r3
 8002024:	1dbb      	adds	r3, r7, #6
 8002026:	7819      	ldrb	r1, [r3, #0]
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <xMBRTUReceiveFSM+0xd0>)
 800202a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <xMBRTUReceiveFSM+0xc8>)
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8002032:	f7ff fe1f 	bl	8001c74 <vMBPortTimersEnable>
        break;
 8002036:	e017      	b.n	8002068 <xMBRTUReceiveFSM+0xac>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <xMBRTUReceiveFSM+0xcc>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d80c      	bhi.n	800205c <xMBRTUReceiveFSM+0xa0>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <xMBRTUReceiveFSM+0xcc>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	b291      	uxth	r1, r2
 800204c:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <xMBRTUReceiveFSM+0xcc>)
 800204e:	8011      	strh	r1, [r2, #0]
 8002050:	001a      	movs	r2, r3
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	7819      	ldrb	r1, [r3, #0]
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <xMBRTUReceiveFSM+0xd0>)
 8002058:	5499      	strb	r1, [r3, r2]
 800205a:	e002      	b.n	8002062 <xMBRTUReceiveFSM+0xa6>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <xMBRTUReceiveFSM+0xc8>)
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8002062:	f7ff fe07 	bl	8001c74 <vMBPortTimersEnable>
        break;
 8002066:	46c0      	nop			; (mov r8, r8)
    }
    return xTaskNeedSwitch;
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	781b      	ldrb	r3, [r3, #0]
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000252 	.word	0x20000252
 8002078:	080053d0 	.word	0x080053d0
 800207c:	08005694 	.word	0x08005694
 8002080:	080053b4 	.word	0x080053b4
 8002084:	20000253 	.word	0x20000253
 8002088:	2000035a 	.word	0x2000035a
 800208c:	20000254 	.word	0x20000254

08002090 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8002096:	1dfb      	adds	r3, r7, #7
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]

    assert( eRcvState == STATE_RX_IDLE );
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <xMBRTUTransmitFSM+0x98>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d006      	beq.n	80020b4 <xMBRTUTransmitFSM+0x24>
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <xMBRTUTransmitFSM+0x9c>)
 80020a8:	4a21      	ldr	r2, [pc, #132]	; (8002130 <xMBRTUTransmitFSM+0xa0>)
 80020aa:	2122      	movs	r1, #34	; 0x22
 80020ac:	31ff      	adds	r1, #255	; 0xff
 80020ae:	4821      	ldr	r0, [pc, #132]	; (8002134 <xMBRTUTransmitFSM+0xa4>)
 80020b0:	f002 f97e 	bl	80043b0 <__assert_func>

    switch ( eSndState )
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <xMBRTUTransmitFSM+0xa8>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <xMBRTUTransmitFSM+0x34>
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d005      	beq.n	80020ce <xMBRTUTransmitFSM+0x3e>
 80020c2:	e02b      	b.n	800211c <xMBRTUTransmitFSM+0x8c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80020c4:	2100      	movs	r1, #0
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff fd0a 	bl	8001ae0 <vMBPortSerialEnable>
        break;
 80020cc:	e026      	b.n	800211c <xMBRTUTransmitFSM+0x8c>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <xMBRTUTransmitFSM+0xac>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <xMBRTUTransmitFSM+0x70>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <xMBRTUTransmitFSM+0xb0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff fd5b 	bl	8001b9c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <xMBRTUTransmitFSM+0xb0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <xMBRTUTransmitFSM+0xb0>)
 80020ee:	601a      	str	r2, [r3, #0]
            usSndBufferCount--;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <xMBRTUTransmitFSM+0xac>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <xMBRTUTransmitFSM+0xac>)
 80020fc:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 80020fe:	e00c      	b.n	800211a <xMBRTUTransmitFSM+0x8a>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8002100:	1dfc      	adds	r4, r7, #7
 8002102:	2003      	movs	r0, #3
 8002104:	f7ff fcb4 	bl	8001a70 <xMBPortEventPost>
 8002108:	0003      	movs	r3, r0
 800210a:	7023      	strb	r3, [r4, #0]
            vMBPortSerialEnable( TRUE, FALSE );
 800210c:	2100      	movs	r1, #0
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff fce6 	bl	8001ae0 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <xMBRTUTransmitFSM+0xa8>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
        break;
 800211a:	46c0      	nop			; (mov r8, r8)
    }

    return xNeedPoll;
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	781b      	ldrb	r3, [r3, #0]
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b003      	add	sp, #12
 8002126:	bd90      	pop	{r4, r7, pc}
 8002128:	20000253 	.word	0x20000253
 800212c:	080053ec 	.word	0x080053ec
 8002130:	080056a8 	.word	0x080056a8
 8002134:	080053b4 	.word	0x080053b4
 8002138:	20000252 	.word	0x20000252
 800213c:	20000358 	.word	0x20000358
 8002140:	20000354 	.word	0x20000354

08002144 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]

    switch ( eRcvState )
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <xMBRTUTimerT35Expired+0x84>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b03      	cmp	r3, #3
 8002158:	d029      	beq.n	80021ae <xMBRTUTimerT35Expired+0x6a>
 800215a:	dc12      	bgt.n	8002182 <xMBRTUTimerT35Expired+0x3e>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <xMBRTUTimerT35Expired+0x22>
 8002160:	2b02      	cmp	r3, #2
 8002162:	d007      	beq.n	8002174 <xMBRTUTimerT35Expired+0x30>
 8002164:	e00d      	b.n	8002182 <xMBRTUTimerT35Expired+0x3e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8002166:	1dfc      	adds	r4, r7, #7
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff fc81 	bl	8001a70 <xMBPortEventPost>
 800216e:	0003      	movs	r3, r0
 8002170:	7023      	strb	r3, [r4, #0]
        break;
 8002172:	e01d      	b.n	80021b0 <xMBRTUTimerT35Expired+0x6c>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8002174:	1dfc      	adds	r4, r7, #7
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff fc7a 	bl	8001a70 <xMBPortEventPost>
 800217c:	0003      	movs	r3, r0
 800217e:	7023      	strb	r3, [r4, #0]
        break;
 8002180:	e016      	b.n	80021b0 <xMBRTUTimerT35Expired+0x6c>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <xMBRTUTimerT35Expired+0x84>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d011      	beq.n	80021b0 <xMBRTUTimerT35Expired+0x6c>
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <xMBRTUTimerT35Expired+0x84>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d00c      	beq.n	80021b0 <xMBRTUTimerT35Expired+0x6c>
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <xMBRTUTimerT35Expired+0x84>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d007      	beq.n	80021b0 <xMBRTUTimerT35Expired+0x6c>
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <xMBRTUTimerT35Expired+0x88>)
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <xMBRTUTimerT35Expired+0x8c>)
 80021a4:	21ad      	movs	r1, #173	; 0xad
 80021a6:	0049      	lsls	r1, r1, #1
 80021a8:	480a      	ldr	r0, [pc, #40]	; (80021d4 <xMBRTUTimerT35Expired+0x90>)
 80021aa:	f002 f901 	bl	80043b0 <__assert_func>
        break;
 80021ae:	46c0      	nop			; (mov r8, r8)
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80021b0:	f7ff fd74 	bl	8001c9c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <xMBRTUTimerT35Expired+0x84>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b003      	add	sp, #12
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	20000253 	.word	0x20000253
 80021cc:	08005408 	.word	0x08005408
 80021d0:	080056bc 	.word	0x080056bc
 80021d4:	080053b4 	.word	0x080053b4

080021d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_Init+0x24>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_Init+0x24>)
 80021e2:	2110      	movs	r1, #16
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021e8:	2003      	movs	r0, #3
 80021ea:	f000 f809 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ee:	f7fe f9b5 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	40022000 	.word	0x40022000

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_InitTick+0x5c>)
 800220a:	681c      	ldr	r4, [r3, #0]
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_InitTick+0x60>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	0019      	movs	r1, r3
 8002212:	23fa      	movs	r3, #250	; 0xfa
 8002214:	0098      	lsls	r0, r3, #2
 8002216:	f7fd ff81 	bl	800011c <__udivsi3>
 800221a:	0003      	movs	r3, r0
 800221c:	0019      	movs	r1, r3
 800221e:	0020      	movs	r0, r4
 8002220:	f7fd ff7c 	bl	800011c <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	0018      	movs	r0, r3
 8002228:	f000 f945 	bl	80024b6 <HAL_SYSTICK_Config>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d001      	beq.n	8002234 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e00f      	b.n	8002254 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d80b      	bhi.n	8002252 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	2301      	movs	r3, #1
 800223e:	425b      	negs	r3, r3
 8002240:	2200      	movs	r2, #0
 8002242:	0018      	movs	r0, r3
 8002244:	f000 f90e 	bl	8002464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_InitTick+0x64>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b003      	add	sp, #12
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	2000008c 	.word	0x2000008c
 8002264:	20000088 	.word	0x20000088

08002268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_IncTick+0x1c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	001a      	movs	r2, r3
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_IncTick+0x20>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	18d2      	adds	r2, r2, r3
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_IncTick+0x20>)
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	2000008c 	.word	0x2000008c
 8002288:	2000035c 	.word	0x2000035c

0800228c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <HAL_GetTick+0x10>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	2000035c 	.word	0x2000035c

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff fff0 	bl	800228c <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	001a      	movs	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	f7ff ffe0 	bl	800228c <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b004      	add	sp, #16
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	2000008c 	.word	0x2000008c

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0002      	movs	r2, r0
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b7f      	cmp	r3, #127	; 0x7f
 80022fa:	d809      	bhi.n	8002310 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	001a      	movs	r2, r3
 8002302:	231f      	movs	r3, #31
 8002304:	401a      	ands	r2, r3
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_EnableIRQ+0x30>)
 8002308:	2101      	movs	r1, #1
 800230a:	4091      	lsls	r1, r2
 800230c:	000a      	movs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
  }
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	0002      	movs	r2, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b7f      	cmp	r3, #127	; 0x7f
 8002330:	d828      	bhi.n	8002384 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002332:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <__NVIC_SetPriority+0xd4>)
 8002334:	1dfb      	adds	r3, r7, #7
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b25b      	sxtb	r3, r3
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	33c0      	adds	r3, #192	; 0xc0
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	589b      	ldr	r3, [r3, r2]
 8002342:	1dfa      	adds	r2, r7, #7
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	0011      	movs	r1, r2
 8002348:	2203      	movs	r2, #3
 800234a:	400a      	ands	r2, r1
 800234c:	00d2      	lsls	r2, r2, #3
 800234e:	21ff      	movs	r1, #255	; 0xff
 8002350:	4091      	lsls	r1, r2
 8002352:	000a      	movs	r2, r1
 8002354:	43d2      	mvns	r2, r2
 8002356:	401a      	ands	r2, r3
 8002358:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	22ff      	movs	r2, #255	; 0xff
 8002360:	401a      	ands	r2, r3
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	0018      	movs	r0, r3
 8002368:	2303      	movs	r3, #3
 800236a:	4003      	ands	r3, r0
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002370:	481f      	ldr	r0, [pc, #124]	; (80023f0 <__NVIC_SetPriority+0xd4>)
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b25b      	sxtb	r3, r3
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	430a      	orrs	r2, r1
 800237c:	33c0      	adds	r3, #192	; 0xc0
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002382:	e031      	b.n	80023e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <__NVIC_SetPriority+0xd8>)
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	0019      	movs	r1, r3
 800238c:	230f      	movs	r3, #15
 800238e:	400b      	ands	r3, r1
 8002390:	3b08      	subs	r3, #8
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3306      	adds	r3, #6
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	18d3      	adds	r3, r2, r3
 800239a:	3304      	adds	r3, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1dfa      	adds	r2, r7, #7
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	0011      	movs	r1, r2
 80023a4:	2203      	movs	r2, #3
 80023a6:	400a      	ands	r2, r1
 80023a8:	00d2      	lsls	r2, r2, #3
 80023aa:	21ff      	movs	r1, #255	; 0xff
 80023ac:	4091      	lsls	r1, r2
 80023ae:	000a      	movs	r2, r1
 80023b0:	43d2      	mvns	r2, r2
 80023b2:	401a      	ands	r2, r3
 80023b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	22ff      	movs	r2, #255	; 0xff
 80023bc:	401a      	ands	r2, r3
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	0018      	movs	r0, r3
 80023c4:	2303      	movs	r3, #3
 80023c6:	4003      	ands	r3, r0
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <__NVIC_SetPriority+0xd8>)
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	001c      	movs	r4, r3
 80023d4:	230f      	movs	r3, #15
 80023d6:	4023      	ands	r3, r4
 80023d8:	3b08      	subs	r3, #8
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	430a      	orrs	r2, r1
 80023de:	3306      	adds	r3, #6
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	18c3      	adds	r3, r0, r3
 80023e4:	3304      	adds	r3, #4
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b003      	add	sp, #12
 80023ee:	bd90      	pop	{r4, r7, pc}
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023fc:	f3bf 8f4f 	dsb	sy
}
 8002400:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_SystemReset+0x1c>)
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SystemReset+0x20>)
 8002406:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002408:	f3bf 8f4f 	dsb	sy
}
 800240c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	e7fd      	b.n	800240e <__NVIC_SystemReset+0x16>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	e000ed00 	.word	0xe000ed00
 8002418:	05fa0004 	.word	0x05fa0004

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	045b      	lsls	r3, r3, #17
 800242c:	429a      	cmp	r2, r3
 800242e:	d301      	bcc.n	8002434 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002430:	2301      	movs	r3, #1
 8002432:	e010      	b.n	8002456 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <SysTick_Config+0x44>)
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	3a01      	subs	r2, #1
 800243a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243c:	2301      	movs	r3, #1
 800243e:	425b      	negs	r3, r3
 8002440:	2103      	movs	r1, #3
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff ff6a 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <SysTick_Config+0x44>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SysTick_Config+0x44>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b002      	add	sp, #8
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	210f      	movs	r1, #15
 8002470:	187b      	adds	r3, r7, r1
 8002472:	1c02      	adds	r2, r0, #0
 8002474:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	187b      	adds	r3, r7, r1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b25b      	sxtb	r3, r3
 800247e:	0011      	movs	r1, r2
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ff4b 	bl	800231c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	0002      	movs	r2, r0
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff ff21 	bl	80022e8 <__NVIC_EnableIRQ>
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b002      	add	sp, #8
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80024b2:	f7ff ffa1 	bl	80023f8 <__NVIC_SystemReset>

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff ffab 	bl	800241c <SysTick_Config>
 80024c6:	0003      	movs	r3, r0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e149      	b.n	8002774 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4091      	lsls	r1, r2
 80024ea:	000a      	movs	r2, r1
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d100      	bne.n	80024f8 <HAL_GPIO_Init+0x28>
 80024f6:	e13a      	b.n	800276e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	4013      	ands	r3, r2
 8002500:	2b01      	cmp	r3, #1
 8002502:	d005      	beq.n	8002510 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2203      	movs	r2, #3
 800250a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800250c:	2b02      	cmp	r3, #2
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	43da      	mvns	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	2201      	movs	r2, #1
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	4013      	ands	r3, r2
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	43da      	mvns	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2203      	movs	r2, #3
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d123      	bne.n	8002602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	58d3      	ldr	r3, [r2, r3]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2207      	movs	r2, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2107      	movs	r1, #7
 80025e6:	400b      	ands	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	6939      	ldr	r1, [r7, #16]
 8002600:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	409a      	lsls	r2, r3
 8002610:	0013      	movs	r3, r2
 8002612:	43da      	mvns	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2203      	movs	r2, #3
 8002620:	401a      	ands	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	23c0      	movs	r3, #192	; 0xc0
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	4013      	ands	r3, r2
 8002640:	d100      	bne.n	8002644 <HAL_GPIO_Init+0x174>
 8002642:	e094      	b.n	800276e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	4b51      	ldr	r3, [pc, #324]	; (800278c <HAL_GPIO_Init+0x2bc>)
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_GPIO_Init+0x2bc>)
 800264a:	2101      	movs	r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	4b4e      	ldr	r3, [pc, #312]	; (800278c <HAL_GPIO_Init+0x2bc>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x2c0>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	589b      	ldr	r3, [r3, r2]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2203      	movs	r2, #3
 800266e:	4013      	ands	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	409a      	lsls	r2, r3
 8002676:	0013      	movs	r3, r2
 8002678:	43da      	mvns	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	2390      	movs	r3, #144	; 0x90
 8002684:	05db      	lsls	r3, r3, #23
 8002686:	429a      	cmp	r2, r3
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x1d6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a41      	ldr	r2, [pc, #260]	; (8002794 <HAL_GPIO_Init+0x2c4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x1d2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_GPIO_Init+0x2c8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x1ce>
 800269a:	2302      	movs	r3, #2
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x1d8>
 800269e:	2305      	movs	r3, #5
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x1d8>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x1d8>
 80026a6:	2300      	movs	r3, #0
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	2103      	movs	r1, #3
 80026ac:	400a      	ands	r2, r1
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	; (8002790 <HAL_GPIO_Init+0x2c0>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c6:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_GPIO_Init+0x2cc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	035b      	lsls	r3, r3, #13
 80026de:	4013      	ands	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_GPIO_Init+0x2cc>)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_GPIO_Init+0x2cc>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	039b      	lsls	r3, r3, #14
 8002708:	4013      	ands	r3, r2
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_GPIO_Init+0x2cc>)
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_GPIO_Init+0x2cc>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43da      	mvns	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	029b      	lsls	r3, r3, #10
 8002732:	4013      	ands	r3, r2
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_GPIO_Init+0x2cc>)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_GPIO_Init+0x2cc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43da      	mvns	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	4013      	ands	r3, r2
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_GPIO_Init+0x2cc>)
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	40da      	lsrs	r2, r3
 800277c:	1e13      	subs	r3, r2, #0
 800277e:	d000      	beq.n	8002782 <HAL_GPIO_Init+0x2b2>
 8002780:	e6ae      	b.n	80024e0 <HAL_GPIO_Init+0x10>
  } 
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b006      	add	sp, #24
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	000a      	movs	r2, r1
 80027aa:	1cbb      	adds	r3, r7, #2
 80027ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	1cba      	adds	r2, r7, #2
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
  }
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	0008      	movs	r0, r1
 80027e4:	0011      	movs	r1, r2
 80027e6:	1cbb      	adds	r3, r7, #2
 80027e8:	1c02      	adds	r2, r0, #0
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	1c7b      	adds	r3, r7, #1
 80027ee:	1c0a      	adds	r2, r1, #0
 80027f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f2:	1c7b      	adds	r3, r7, #1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	1cbb      	adds	r3, r7, #2
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002802:	e003      	b.n	800280c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	0002      	movs	r2, r0
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	1dba      	adds	r2, r7, #6
 8002826:	8812      	ldrh	r2, [r2, #0]
 8002828:	4013      	ands	r3, r2
 800282a:	d008      	beq.n	800283e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800282e:	1dba      	adds	r2, r7, #6
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002834:	1dbb      	adds	r3, r7, #6
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	0018      	movs	r0, r3
 800283a:	f7fd ffbf 	bl	80007bc <HAL_GPIO_EXTI_Callback>
  }
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e301      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	4013      	ands	r3, r2
 8002866:	d100      	bne.n	800286a <HAL_RCC_OscConfig+0x1e>
 8002868:	e08d      	b.n	8002986 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800286a:	4bc3      	ldr	r3, [pc, #780]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	220c      	movs	r2, #12
 8002870:	4013      	ands	r3, r2
 8002872:	2b04      	cmp	r3, #4
 8002874:	d00e      	beq.n	8002894 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002876:	4bc0      	ldr	r3, [pc, #768]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	220c      	movs	r2, #12
 800287c:	4013      	ands	r3, r2
 800287e:	2b08      	cmp	r3, #8
 8002880:	d116      	bne.n	80028b0 <HAL_RCC_OscConfig+0x64>
 8002882:	4bbd      	ldr	r3, [pc, #756]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	025b      	lsls	r3, r3, #9
 800288a:	401a      	ands	r2, r3
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	429a      	cmp	r2, r3
 8002892:	d10d      	bne.n	80028b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4bb8      	ldr	r3, [pc, #736]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d100      	bne.n	80028a2 <HAL_RCC_OscConfig+0x56>
 80028a0:	e070      	b.n	8002984 <HAL_RCC_OscConfig+0x138>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d000      	beq.n	80028ac <HAL_RCC_OscConfig+0x60>
 80028aa:	e06b      	b.n	8002984 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e2d8      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x7c>
 80028b8:	4baf      	ldr	r3, [pc, #700]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4bae      	ldr	r3, [pc, #696]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	0249      	lsls	r1, r1, #9
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e02f      	b.n	8002928 <HAL_RCC_OscConfig+0xdc>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x9e>
 80028d0:	4ba9      	ldr	r3, [pc, #676]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4ba8      	ldr	r3, [pc, #672]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	49a9      	ldr	r1, [pc, #676]	; (8002b7c <HAL_RCC_OscConfig+0x330>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	4ba6      	ldr	r3, [pc, #664]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4ba5      	ldr	r3, [pc, #660]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	49a7      	ldr	r1, [pc, #668]	; (8002b80 <HAL_RCC_OscConfig+0x334>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e01e      	b.n	8002928 <HAL_RCC_OscConfig+0xdc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0xc4>
 80028f2:	4ba1      	ldr	r3, [pc, #644]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4ba0      	ldr	r3, [pc, #640]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	02c9      	lsls	r1, r1, #11
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4b9d      	ldr	r3, [pc, #628]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b9c      	ldr	r3, [pc, #624]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	0249      	lsls	r1, r1, #9
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xdc>
 8002910:	4b99      	ldr	r3, [pc, #612]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b98      	ldr	r3, [pc, #608]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002916:	4999      	ldr	r1, [pc, #612]	; (8002b7c <HAL_RCC_OscConfig+0x330>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b96      	ldr	r3, [pc, #600]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b95      	ldr	r3, [pc, #596]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002922:	4997      	ldr	r1, [pc, #604]	; (8002b80 <HAL_RCC_OscConfig+0x334>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d014      	beq.n	800295a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff fcac 	bl	800228c <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293a:	f7ff fca7 	bl	800228c <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e28a      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	4013      	ands	r3, r2
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0xee>
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7ff fc97 	bl	800228c <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff fc92 	bl	800228c <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e275      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	029b      	lsls	r3, r3, #10
 800297e:	4013      	ands	r3, r2
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x118>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d100      	bne.n	8002992 <HAL_RCC_OscConfig+0x146>
 8002990:	e069      	b.n	8002a66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002992:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	220c      	movs	r2, #12
 8002998:	4013      	ands	r3, r2
 800299a:	d00b      	beq.n	80029b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800299c:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	220c      	movs	r2, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d11c      	bne.n	80029e2 <HAL_RCC_OscConfig+0x196>
 80029a8:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	4013      	ands	r3, r2
 80029b2:	d116      	bne.n	80029e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b4:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x17e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e24b      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b6b      	ldr	r3, [pc, #428]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	22f8      	movs	r2, #248	; 0xf8
 80029d0:	4393      	bics	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	00da      	lsls	r2, r3, #3
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e0:	e041      	b.n	8002a66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d024      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b62      	ldr	r3, [pc, #392]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	430a      	orrs	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7ff fc49 	bl	800228c <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7ff fc44 	bl	800228c <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e227      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0f1      	beq.n	8002a00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	22f8      	movs	r2, #248	; 0xf8
 8002a22:	4393      	bics	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00da      	lsls	r2, r3, #3
 8002a2c:	4b52      	ldr	r3, [pc, #328]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e018      	b.n	8002a66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fc24 	bl	800228c <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7ff fc1f 	bl	800228c <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e202      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5c:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d1f1      	bne.n	8002a4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d036      	beq.n	8002ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7ff fc02 	bl	800228c <HAL_GetTick>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7ff fbfd 	bl	800228c <HAL_GetTick>
 8002a92:	0002      	movs	r2, r0
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1e0      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d0f1      	beq.n	8002a8e <HAL_RCC_OscConfig+0x242>
 8002aaa:	e018      	b.n	8002ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7ff fbe8 	bl	800228c <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7ff fbe3 	bl	800228c <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1c6      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2202      	movs	r2, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	d1f1      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d100      	bne.n	8002aea <HAL_RCC_OscConfig+0x29e>
 8002ae8:	e0b4      	b.n	8002c54 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	201f      	movs	r0, #31
 8002aec:	183b      	adds	r3, r7, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	055b      	lsls	r3, r3, #21
 8002afa:	4013      	ands	r3, r2
 8002afc:	d110      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0549      	lsls	r1, r1, #21
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	055b      	lsls	r3, r3, #21
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b1a:	183b      	adds	r3, r7, r0
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_RCC_OscConfig+0x338>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d11a      	bne.n	8002b62 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_RCC_OscConfig+0x338>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_RCC_OscConfig+0x338>)
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	0049      	lsls	r1, r1, #1
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff fba7 	bl	800228c <HAL_GetTick>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b44:	f7ff fba2 	bl	800228c <HAL_GetTick>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e185      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x338>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10e      	bne.n	8002b88 <HAL_RCC_OscConfig+0x33c>
 8002b6a:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	4b02      	ldr	r3, [pc, #8]	; (8002b78 <HAL_RCC_OscConfig+0x32c>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	621a      	str	r2, [r3, #32]
 8002b76:	e035      	b.n	8002be4 <HAL_RCC_OscConfig+0x398>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	fffeffff 	.word	0xfffeffff
 8002b80:	fffbffff 	.word	0xfffbffff
 8002b84:	40007000 	.word	0x40007000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCC_OscConfig+0x35e>
 8002b90:	4bb6      	ldr	r3, [pc, #728]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	4bb5      	ldr	r3, [pc, #724]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	621a      	str	r2, [r3, #32]
 8002b9c:	4bb3      	ldr	r3, [pc, #716]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	4bb2      	ldr	r3, [pc, #712]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	438a      	bics	r2, r1
 8002ba6:	621a      	str	r2, [r3, #32]
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x398>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x380>
 8002bb2:	4bae      	ldr	r3, [pc, #696]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bb4:	6a1a      	ldr	r2, [r3, #32]
 8002bb6:	4bad      	ldr	r3, [pc, #692]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bb8:	2104      	movs	r1, #4
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	621a      	str	r2, [r3, #32]
 8002bbe:	4bab      	ldr	r3, [pc, #684]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bc0:	6a1a      	ldr	r2, [r3, #32]
 8002bc2:	4baa      	ldr	r3, [pc, #680]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	621a      	str	r2, [r3, #32]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0x398>
 8002bcc:	4ba7      	ldr	r3, [pc, #668]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	4ba6      	ldr	r3, [pc, #664]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	621a      	str	r2, [r3, #32]
 8002bd8:	4ba4      	ldr	r3, [pc, #656]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	4ba3      	ldr	r3, [pc, #652]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002bde:	2104      	movs	r1, #4
 8002be0:	438a      	bics	r2, r1
 8002be2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d014      	beq.n	8002c16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7ff fb4e 	bl	800228c <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e009      	b.n	8002c0a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7ff fb49 	bl	800228c <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	4a9b      	ldr	r2, [pc, #620]	; (8002e70 <HAL_RCC_OscConfig+0x624>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e12b      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	4b98      	ldr	r3, [pc, #608]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3aa>
 8002c14:	e013      	b.n	8002c3e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7ff fb39 	bl	800228c <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	e009      	b.n	8002c34 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7ff fb34 	bl	800228c <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	4a91      	ldr	r2, [pc, #580]	; (8002e70 <HAL_RCC_OscConfig+0x624>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e116      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c34:	4b8d      	ldr	r3, [pc, #564]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	4b87      	ldr	r3, [pc, #540]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c4e:	4989      	ldr	r1, [pc, #548]	; (8002e74 <HAL_RCC_OscConfig+0x628>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c66:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b80      	ldr	r3, [pc, #512]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c72:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c76:	4b7d      	ldr	r3, [pc, #500]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff fb05 	bl	800228c <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c88:	f7ff fb00 	bl	800228c <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0e3      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c9a:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d0f1      	beq.n	8002c88 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ca4:	4b71      	ldr	r3, [pc, #452]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	22f8      	movs	r2, #248	; 0xf8
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	00da      	lsls	r2, r3, #3
 8002cb4:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cba:	e034      	b.n	8002d26 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	3305      	adds	r3, #5
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002cc4:	4b69      	ldr	r3, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cca:	2104      	movs	r1, #4
 8002ccc:	438a      	bics	r2, r1
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cd0:	4b66      	ldr	r3, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	22f8      	movs	r2, #248	; 0xf8
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	00da      	lsls	r2, r3, #3
 8002ce0:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce6:	e01e      	b.n	8002d26 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ce8:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cec:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cee:	2104      	movs	r1, #4
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cf4:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf8:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7ff fac4 	bl	800228c <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d0a:	f7ff fabf 	bl	800228c <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0a2      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d1f1      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d100      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4e4>
 8002d2e:	e097      	b.n	8002e60 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d30:	4b4e      	ldr	r3, [pc, #312]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	220c      	movs	r2, #12
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d100      	bne.n	8002d3e <HAL_RCC_OscConfig+0x4f2>
 8002d3c:	e06b      	b.n	8002e16 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d14c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d4c:	494a      	ldr	r1, [pc, #296]	; (8002e78 <HAL_RCC_OscConfig+0x62c>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7ff fa9b 	bl	800228c <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7ff fa96 	bl	800228c <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e079      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	049b      	lsls	r3, r3, #18
 8002d76:	4013      	ands	r3, r2
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	220f      	movs	r2, #15
 8002d80:	4393      	bics	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <HAL_RCC_OscConfig+0x630>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	431a      	orrs	r2, r3
 8002da2:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0449      	lsls	r1, r1, #17
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7ff fa69 	bl	800228c <HAL_GetTick>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7ff fa64 	bl	800228c <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e047      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	049b      	lsls	r3, r3, #18
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x574>
 8002dde:	e03f      	b.n	8002e60 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002de6:	4924      	ldr	r1, [pc, #144]	; (8002e78 <HAL_RCC_OscConfig+0x62c>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7ff fa4e 	bl	800228c <HAL_GetTick>
 8002df0:	0003      	movs	r3, r0
 8002df2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df6:	f7ff fa49 	bl	800228c <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e02c      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	049b      	lsls	r3, r3, #18
 8002e10:	4013      	ands	r3, r2
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5aa>
 8002e14:	e024      	b.n	8002e60 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01f      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	401a      	ands	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d10e      	bne.n	8002e5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	220f      	movs	r2, #15
 8002e42:	401a      	ands	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	23f0      	movs	r3, #240	; 0xf0
 8002e50:	039b      	lsls	r3, r3, #14
 8002e52:	401a      	ands	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b008      	add	sp, #32
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	00001388 	.word	0x00001388
 8002e74:	efffffff 	.word	0xefffffff
 8002e78:	feffffff 	.word	0xfeffffff
 8002e7c:	ffc2ffff 	.word	0xffc2ffff

08002e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b3      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d911      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b58      	ldr	r3, [pc, #352]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e09a      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d015      	beq.n	8002efc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d006      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eda:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002ee0:	21e0      	movs	r1, #224	; 0xe0
 8002ee2:	00c9      	lsls	r1, r1, #3
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	22f0      	movs	r2, #240	; 0xf0
 8002eee:	4393      	bics	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b44      	ldr	r3, [pc, #272]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d040      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	4013      	ands	r3, r2
 8002f18:	d114      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06e      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	049b      	lsls	r3, r3, #18
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d108      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e062      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e05b      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4393      	bics	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7ff f998 	bl	800228c <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f60:	e009      	b.n	8002f76 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7ff f993 	bl	800228c <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_RCC_ClockConfig+0x18c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e042      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1ec      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d211      	bcs.n	8002fba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCC_ClockConfig+0x184>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e020      	b.n	8002ffc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_RCC_ClockConfig+0x190>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fd8:	f000 f820 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fdc:	0001      	movs	r1, r0
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x188>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x194>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	000a      	movs	r2, r1
 8002fee:	40da      	lsrs	r2, r3
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x198>)
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f7ff f903 	bl	8002200 <HAL_InitTick>
  
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b004      	add	sp, #16
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40022000 	.word	0x40022000
 8003008:	40021000 	.word	0x40021000
 800300c:	00001388 	.word	0x00001388
 8003010:	fffff8ff 	.word	0xfffff8ff
 8003014:	0800546c 	.word	0x0800546c
 8003018:	20000000 	.word	0x20000000

0800301c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	220c      	movs	r2, #12
 8003040:	4013      	ands	r3, r2
 8003042:	2b04      	cmp	r3, #4
 8003044:	d002      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x30>
 8003046:	2b08      	cmp	r3, #8
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x36>
 800304a:	e02c      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800304e:	613b      	str	r3, [r7, #16]
      break;
 8003050:	e02c      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	220f      	movs	r2, #15
 8003058:	4013      	ands	r3, r2
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	220f      	movs	r2, #15
 8003066:	4013      	ands	r3, r2
 8003068:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	025b      	lsls	r3, r3, #9
 8003074:	4013      	ands	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4810      	ldr	r0, [pc, #64]	; (80030bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800307c:	f7fd f84e 	bl	800011c <__udivsi3>
 8003080:	0003      	movs	r3, r0
 8003082:	001a      	movs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4353      	muls	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e009      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	000a      	movs	r2, r1
 8003090:	0152      	lsls	r2, r2, #5
 8003092:	1a52      	subs	r2, r2, r1
 8003094:	0193      	lsls	r3, r2, #6
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	185b      	adds	r3, r3, r1
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
      break;
 80030a4:	e002      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetSysClockFreq+0xa0>)
 80030a8:	613b      	str	r3, [r7, #16]
      break;
 80030aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030ac:	693b      	ldr	r3, [r7, #16]
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b006      	add	sp, #24
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40021000 	.word	0x40021000
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	080056d4 	.word	0x080056d4
 80030c4:	080056e4 	.word	0x080056e4

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80030e0:	f7ff fff2 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e4:	0001      	movs	r1, r0
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	2207      	movs	r2, #7
 80030ee:	4013      	ands	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	40d9      	lsrs	r1, r3
 80030f6:	000b      	movs	r3, r1
}    
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	40021000 	.word	0x40021000
 8003104:	0800547c 	.word	0x0800547c

08003108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	025b      	lsls	r3, r3, #9
 8003120:	4013      	ands	r3, r2
 8003122:	d100      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003124:	e08e      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2017      	movs	r0, #23
 8003128:	183b      	adds	r3, r7, r0
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	055b      	lsls	r3, r3, #21
 8003136:	4013      	ands	r3, r2
 8003138:	d110      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	4b54      	ldr	r3, [pc, #336]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	0549      	lsls	r1, r1, #21
 8003144:	430a      	orrs	r2, r1
 8003146:	61da      	str	r2, [r3, #28]
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	183b      	adds	r3, r7, r0
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4013      	ands	r3, r2
 8003166:	d11a      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003168:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b48      	ldr	r3, [pc, #288]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800316e:	2180      	movs	r1, #128	; 0x80
 8003170:	0049      	lsls	r1, r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7ff f889 	bl	800228c <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	e008      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7ff f884 	bl	800228c <HAL_GetTick>
 8003184:	0002      	movs	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e077      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4013      	ands	r3, r2
 800319c:	d0f0      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	23c0      	movs	r3, #192	; 0xc0
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4013      	ands	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d034      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	23c0      	movs	r3, #192	; 0xc0
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d02c      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c0:	4b32      	ldr	r3, [pc, #200]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a33      	ldr	r2, [pc, #204]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ca:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0249      	lsls	r1, r1, #9
 80031d4:	430a      	orrs	r2, r1
 80031d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031de:	492e      	ldr	r1, [pc, #184]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7ff f84b 	bl	800228c <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e009      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7ff f846 	bl	800228c <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	4a25      	ldr	r2, [pc, #148]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e038      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d0f0      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800322a:	430a      	orrs	r2, r1
 800322c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800323e:	4918      	ldr	r1, [pc, #96]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003240:	400a      	ands	r2, r1
 8003242:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2203      	movs	r2, #3
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800325e:	430a      	orrs	r2, r1
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2220      	movs	r2, #32
 8003268:	4013      	ands	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	2210      	movs	r2, #16
 8003272:	4393      	bics	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800327c:	430a      	orrs	r2, r1
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
 8003294:	fffffcff 	.word	0xfffffcff
 8003298:	fffeffff 	.word	0xfffeffff
 800329c:	00001388 	.word	0x00001388
 80032a0:	efffffff 	.word	0xefffffff

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e042      	b.n	800333c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223d      	movs	r2, #61	; 0x3d
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	223c      	movs	r2, #60	; 0x3c
 80032c6:	2100      	movs	r1, #0
 80032c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fd f969 	bl	80005a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223d      	movs	r2, #61	; 0x3d
 80032d6:	2102      	movs	r1, #2
 80032d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f000 fa91 	bl	800380c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2246      	movs	r2, #70	; 0x46
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223e      	movs	r2, #62	; 0x3e
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223f      	movs	r2, #63	; 0x3f
 80032fe:	2101      	movs	r1, #1
 8003300:	5499      	strb	r1, [r3, r2]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	2101      	movs	r1, #1
 8003308:	5499      	strb	r1, [r3, r2]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2241      	movs	r2, #65	; 0x41
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2242      	movs	r2, #66	; 0x42
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2243      	movs	r2, #67	; 0x43
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2244      	movs	r2, #68	; 0x44
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2245      	movs	r2, #69	; 0x45
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	223d      	movs	r2, #61	; 0x3d
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	223d      	movs	r2, #61	; 0x3d
 8003350:	5c9b      	ldrb	r3, [r3, r2]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d001      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e036      	b.n	80033ca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223d      	movs	r2, #61	; 0x3d
 8003360:	2102      	movs	r1, #2
 8003362:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <HAL_TIM_Base_Start_IT+0x90>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00a      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x50>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	05db      	lsls	r3, r3, #23
 8003386:	429a      	cmp	r2, r3
 8003388:	d004      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x50>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <HAL_TIM_Base_Start_IT+0x94>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2207      	movs	r2, #7
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d010      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	e007      	b.n	80033c8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40000400 	.word	0x40000400

080033dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <HAL_TIM_Base_Stop_IT+0x54>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	d10d      	bne.n	800341c <HAL_TIM_Base_Stop_IT+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <HAL_TIM_Base_Stop_IT+0x58>)
 8003408:	4013      	ands	r3, r2
 800340a:	d107      	bne.n	800341c <HAL_TIM_Base_Stop_IT+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	438a      	bics	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	223d      	movs	r2, #61	; 0x3d
 8003420:	2101      	movs	r1, #1
 8003422:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	00001111 	.word	0x00001111
 8003434:	00000444 	.word	0x00000444

08003438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2202      	movs	r2, #2
 8003454:	4013      	ands	r3, r2
 8003456:	d021      	beq.n	800349c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2202      	movs	r2, #2
 800345c:	4013      	ands	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2203      	movs	r2, #3
 8003466:	4252      	negs	r2, r2
 8003468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2203      	movs	r2, #3
 8003478:	4013      	ands	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f9ac 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 8003484:	e007      	b.n	8003496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f99f 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f9ab 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2204      	movs	r2, #4
 80034a8:	4013      	ands	r3, r2
 80034aa:	d01e      	beq.n	80034ea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2205      	movs	r2, #5
 80034b2:	4252      	negs	r2, r2
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4013      	ands	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f985 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 80034d2:	e007      	b.n	80034e4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 f978 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f984 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2208      	movs	r2, #8
 80034ee:	4013      	ands	r3, r2
 80034f0:	d021      	beq.n	8003536 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2208      	movs	r2, #8
 80034f6:	4013      	ands	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2209      	movs	r2, #9
 8003500:	4252      	negs	r2, r2
 8003502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2203      	movs	r2, #3
 8003512:	4013      	ands	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f95f 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 800351e:	e007      	b.n	8003530 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f000 f952 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f95e 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d022      	beq.n	8003584 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2210      	movs	r2, #16
 8003542:	4013      	ands	r3, r2
 8003544:	d01e      	beq.n	8003584 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2211      	movs	r2, #17
 800354c:	4252      	negs	r2, r2
 800354e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2208      	movs	r2, #8
 8003554:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	23c0      	movs	r3, #192	; 0xc0
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f938 	bl	80037dc <HAL_TIM_IC_CaptureCallback>
 800356c:	e007      	b.n	800357e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f000 f92b 	bl	80037cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f937 	bl	80037ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2201      	movs	r2, #1
 8003588:	4013      	ands	r3, r2
 800358a:	d00c      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	4013      	ands	r3, r2
 8003592:	d008      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2202      	movs	r2, #2
 800359a:	4252      	negs	r2, r2
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f90b 	bl	80037bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	4013      	ands	r3, r2
 80035ac:	d00c      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	4013      	ands	r3, r2
 80035b4:	d008      	beq.n	80035c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2281      	movs	r2, #129	; 0x81
 80035bc:	4252      	negs	r2, r2
 80035be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 faa0 	bl	8003b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	4013      	ands	r3, r2
 80035ce:	d00c      	beq.n	80035ea <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	4013      	ands	r3, r2
 80035d6:	d008      	beq.n	80035ea <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2241      	movs	r2, #65	; 0x41
 80035de:	4252      	negs	r2, r2
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f909 	bl	80037fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2220      	movs	r2, #32
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00c      	beq.n	800360c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	4013      	ands	r3, r2
 80035f8:	d008      	beq.n	800360c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2221      	movs	r2, #33	; 0x21
 8003600:	4252      	negs	r2, r2
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fa76 	bl	8003af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	230f      	movs	r3, #15
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223c      	movs	r2, #60	; 0x3c
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIM_ConfigClockSource+0x20>
 8003630:	2302      	movs	r3, #2
 8003632:	e0bc      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x19a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	223c      	movs	r2, #60	; 0x3c
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	223d      	movs	r2, #61	; 0x3d
 8003640:	2102      	movs	r1, #2
 8003642:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2277      	movs	r2, #119	; 0x77
 8003650:	4393      	bics	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003658:	4013      	ands	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0192      	lsls	r2, r2, #6
 800366c:	4293      	cmp	r3, r2
 800366e:	d040      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0xde>
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	0192      	lsls	r2, r2, #6
 8003674:	4293      	cmp	r3, r2
 8003676:	d900      	bls.n	800367a <HAL_TIM_ConfigClockSource+0x66>
 8003678:	e088      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	0152      	lsls	r2, r2, #5
 800367e:	4293      	cmp	r3, r2
 8003680:	d100      	bne.n	8003684 <HAL_TIM_ConfigClockSource+0x70>
 8003682:	e088      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x182>
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	0152      	lsls	r2, r2, #5
 8003688:	4293      	cmp	r3, r2
 800368a:	d900      	bls.n	800368e <HAL_TIM_ConfigClockSource+0x7a>
 800368c:	e07e      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 800368e:	2b70      	cmp	r3, #112	; 0x70
 8003690:	d018      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0xb0>
 8003692:	d900      	bls.n	8003696 <HAL_TIM_ConfigClockSource+0x82>
 8003694:	e07a      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 8003696:	2b60      	cmp	r3, #96	; 0x60
 8003698:	d04f      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x126>
 800369a:	d900      	bls.n	800369e <HAL_TIM_ConfigClockSource+0x8a>
 800369c:	e076      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 800369e:	2b50      	cmp	r3, #80	; 0x50
 80036a0:	d03b      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x106>
 80036a2:	d900      	bls.n	80036a6 <HAL_TIM_ConfigClockSource+0x92>
 80036a4:	e072      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d057      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x146>
 80036aa:	d900      	bls.n	80036ae <HAL_TIM_ConfigClockSource+0x9a>
 80036ac:	e06e      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 80036ae:	2b30      	cmp	r3, #48	; 0x30
 80036b0:	d063      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 80036b2:	d86b      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d060      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 80036b8:	d868      	bhi.n	800378c <HAL_TIM_ConfigClockSource+0x178>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d05d      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d05b      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 80036c2:	e063      	b.n	800378c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	f000 f998 	bl	8003a08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2277      	movs	r2, #119	; 0x77
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
      break;
 80036f0:	e052      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003702:	f000 f981 	bl	8003a08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	01c9      	lsls	r1, r1, #7
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
      break;
 8003718:	e03e      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	001a      	movs	r2, r3
 8003728:	f000 f8f4 	bl	8003914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2150      	movs	r1, #80	; 0x50
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f94e 	bl	80039d4 <TIM_ITRx_SetConfig>
      break;
 8003738:	e02e      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003746:	001a      	movs	r2, r3
 8003748:	f000 f912 	bl	8003970 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2160      	movs	r1, #96	; 0x60
 8003752:	0018      	movs	r0, r3
 8003754:	f000 f93e 	bl	80039d4 <TIM_ITRx_SetConfig>
      break;
 8003758:	e01e      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003766:	001a      	movs	r2, r3
 8003768:	f000 f8d4 	bl	8003914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	0018      	movs	r0, r3
 8003774:	f000 f92e 	bl	80039d4 <TIM_ITRx_SetConfig>
      break;
 8003778:	e00e      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0019      	movs	r1, r3
 8003784:	0010      	movs	r0, r2
 8003786:	f000 f925 	bl	80039d4 <TIM_ITRx_SetConfig>
      break;
 800378a:	e005      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800378c:	230f      	movs	r3, #15
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
      break;
 8003794:	e000      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003796:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	223d      	movs	r2, #61	; 0x3d
 800379c:	2101      	movs	r1, #1
 800379e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	223c      	movs	r2, #60	; 0x3c
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

  return status;
 80037a8:	230f      	movs	r3, #15
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	781b      	ldrb	r3, [r3, #0]
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	ffff00ff 	.word	0xffff00ff

080037bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b002      	add	sp, #8
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b002      	add	sp, #8
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a37      	ldr	r2, [pc, #220]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d008      	beq.n	8003836 <TIM_Base_SetConfig+0x2a>
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	05db      	lsls	r3, r3, #23
 800382a:	429a      	cmp	r2, r3
 800382c:	d003      	beq.n	8003836 <TIM_Base_SetConfig+0x2a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a33      	ldr	r2, [pc, #204]	; (8003900 <TIM_Base_SetConfig+0xf4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d108      	bne.n	8003848 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2270      	movs	r2, #112	; 0x70
 800383a:	4393      	bics	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d014      	beq.n	800387a <TIM_Base_SetConfig+0x6e>
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	429a      	cmp	r2, r3
 8003858:	d00f      	beq.n	800387a <TIM_Base_SetConfig+0x6e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <TIM_Base_SetConfig+0xf4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_Base_SetConfig+0x6e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <TIM_Base_SetConfig+0xf8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_Base_SetConfig+0x6e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a26      	ldr	r2, [pc, #152]	; (8003908 <TIM_Base_SetConfig+0xfc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_Base_SetConfig+0x6e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a25      	ldr	r2, [pc, #148]	; (800390c <TIM_Base_SetConfig+0x100>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d108      	bne.n	800388c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a24      	ldr	r2, [pc, #144]	; (8003910 <TIM_Base_SetConfig+0x104>)
 800387e:	4013      	ands	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	4393      	bics	r3, r2
 8003892:	001a      	movs	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a11      	ldr	r2, [pc, #68]	; (80038fc <TIM_Base_SetConfig+0xf0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <TIM_Base_SetConfig+0xbe>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a12      	ldr	r2, [pc, #72]	; (8003908 <TIM_Base_SetConfig+0xfc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <TIM_Base_SetConfig+0xbe>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a11      	ldr	r2, [pc, #68]	; (800390c <TIM_Base_SetConfig+0x100>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d103      	bne.n	80038d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2201      	movs	r2, #1
 80038de:	4013      	ands	r3, r2
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4393      	bics	r3, r2
 80038ec:	001a      	movs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	611a      	str	r2, [r3, #16]
  }
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400
 8003904:	40002000 	.word	0x40002000
 8003908:	40014400 	.word	0x40014400
 800390c:	40014800 	.word	0x40014800
 8003910:	fffffcff 	.word	0xfffffcff

08003914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	2201      	movs	r2, #1
 800392c:	4393      	bics	r3, r2
 800392e:	001a      	movs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	22f0      	movs	r2, #240	; 0xf0
 800393e:	4393      	bics	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	220a      	movs	r2, #10
 8003950:	4393      	bics	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b006      	add	sp, #24
 800396e:	bd80      	pop	{r7, pc}

08003970 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2210      	movs	r2, #16
 8003988:	4393      	bics	r3, r2
 800398a:	001a      	movs	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <TIM_TI2_ConfigInputStage+0x60>)
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	22a0      	movs	r2, #160	; 0xa0
 80039ac:	4393      	bics	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b006      	add	sp, #24
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	ffff0fff 	.word	0xffff0fff

080039d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2270      	movs	r2, #112	; 0x70
 80039e8:	4393      	bics	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	2207      	movs	r2, #7
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <TIM_ETR_SetConfig+0x3c>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b006      	add	sp, #24
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	ffff00ff 	.word	0xffff00ff

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	223c      	movs	r2, #60	; 0x3c
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e042      	b.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223c      	movs	r2, #60	; 0x3c
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	223d      	movs	r2, #61	; 0x3d
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2270      	movs	r2, #112	; 0x70
 8003a84:	4393      	bics	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00a      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d004      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	4393      	bics	r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	223d      	movs	r2, #61	; 0x3d
 8003ad8:	2101      	movs	r1, #1
 8003ada:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	223c      	movs	r2, #60	; 0x3c
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400

08003af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e044      	b.n	8003bb4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2278      	movs	r2, #120	; 0x78
 8003b36:	2100      	movs	r1, #0
 8003b38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fc fd55 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2101      	movs	r1, #1
 8003b54:	438a      	bics	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 f9f4 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f8c8 	bl	8003d00 <UART_SetConfig>
 8003b70:	0003      	movs	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e01c      	b.n	8003bb4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	490d      	ldr	r1, [pc, #52]	; (8003bbc <HAL_UART_Init+0xa4>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	212a      	movs	r1, #42	; 0x2a
 8003b96:	438a      	bics	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fa83 	bl	80040b8 <UART_CheckIdleState>
 8003bb2:	0003      	movs	r3, r0
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	ffffb7ff 	.word	0xffffb7ff

08003bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	1dbb      	adds	r3, r7, #6
 8003bce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d000      	beq.n	8003bda <HAL_UART_Transmit+0x1a>
 8003bd8:	e08d      	b.n	8003cf6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_UART_Transmit+0x28>
 8003be0:	1dbb      	adds	r3, r7, #6
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e085      	b.n	8003cf8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	015b      	lsls	r3, r3, #5
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d109      	bne.n	8003c0c <HAL_UART_Transmit+0x4c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	d001      	beq.n	8003c0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e075      	b.n	8003cf8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2284      	movs	r2, #132	; 0x84
 8003c10:	2100      	movs	r1, #0
 8003c12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2221      	movs	r2, #33	; 0x21
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c1a:	f7fe fb37 	bl	800228c <HAL_GetTick>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1dba      	adds	r2, r7, #6
 8003c26:	2150      	movs	r1, #80	; 0x50
 8003c28:	8812      	ldrh	r2, [r2, #0]
 8003c2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1dba      	adds	r2, r7, #6
 8003c30:	2152      	movs	r1, #82	; 0x52
 8003c32:	8812      	ldrh	r2, [r2, #0]
 8003c34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	2380      	movs	r3, #128	; 0x80
 8003c3c:	015b      	lsls	r3, r3, #5
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x94>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e030      	b.n	8003cc0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	0013      	movs	r3, r2
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	f000 facc 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d004      	beq.n	8003c7e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03c      	b.n	8003cf8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	05d2      	lsls	r2, r2, #23
 8003c8e:	0dd2      	lsrs	r2, r2, #23
 8003c90:	b292      	uxth	r2, r2
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e008      	b.n	8003cae <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2252      	movs	r2, #82	; 0x52
 8003cb2:	5a9b      	ldrh	r3, [r3, r2]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b299      	uxth	r1, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2252      	movs	r2, #82	; 0x52
 8003cbe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2252      	movs	r2, #82	; 0x52
 8003cc4:	5a9b      	ldrh	r3, [r3, r2]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1c8      	bne.n	8003c5e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	0013      	movs	r3, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2140      	movs	r1, #64	; 0x40
 8003cda:	f000 fa95 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 8003cde:	1e03      	subs	r3, r0, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e005      	b.n	8003cf8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b008      	add	sp, #32
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d08:	231e      	movs	r3, #30
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a83      	ldr	r2, [pc, #524]	; (8003f3c <UART_SetConfig+0x23c>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a7e      	ldr	r2, [pc, #504]	; (8003f40 <UART_SetConfig+0x240>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a75      	ldr	r2, [pc, #468]	; (8003f44 <UART_SetConfig+0x244>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7c:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <UART_SetConfig+0x248>)
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2203      	movs	r2, #3
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d00d      	beq.n	8003da4 <UART_SetConfig+0xa4>
 8003d88:	d81b      	bhi.n	8003dc2 <UART_SetConfig+0xc2>
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d014      	beq.n	8003db8 <UART_SetConfig+0xb8>
 8003d8e:	d818      	bhi.n	8003dc2 <UART_SetConfig+0xc2>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <UART_SetConfig+0x9a>
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d00a      	beq.n	8003dae <UART_SetConfig+0xae>
 8003d98:	e013      	b.n	8003dc2 <UART_SetConfig+0xc2>
 8003d9a:	231f      	movs	r3, #31
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e012      	b.n	8003dca <UART_SetConfig+0xca>
 8003da4:	231f      	movs	r3, #31
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2202      	movs	r2, #2
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	e00d      	b.n	8003dca <UART_SetConfig+0xca>
 8003dae:	231f      	movs	r3, #31
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2204      	movs	r2, #4
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e008      	b.n	8003dca <UART_SetConfig+0xca>
 8003db8:	231f      	movs	r3, #31
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e003      	b.n	8003dca <UART_SetConfig+0xca>
 8003dc2:	231f      	movs	r3, #31
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d15c      	bne.n	8003e90 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8003dd6:	231f      	movs	r3, #31
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d015      	beq.n	8003e0c <UART_SetConfig+0x10c>
 8003de0:	dc18      	bgt.n	8003e14 <UART_SetConfig+0x114>
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d00d      	beq.n	8003e02 <UART_SetConfig+0x102>
 8003de6:	dc15      	bgt.n	8003e14 <UART_SetConfig+0x114>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <UART_SetConfig+0xf2>
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d005      	beq.n	8003dfc <UART_SetConfig+0xfc>
 8003df0:	e010      	b.n	8003e14 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7ff f973 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]
        break;
 8003dfa:	e012      	b.n	8003e22 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dfc:	4b53      	ldr	r3, [pc, #332]	; (8003f4c <UART_SetConfig+0x24c>)
 8003dfe:	61bb      	str	r3, [r7, #24]
        break;
 8003e00:	e00f      	b.n	8003e22 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e02:	f7ff f90b 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8003e06:	0003      	movs	r3, r0
 8003e08:	61bb      	str	r3, [r7, #24]
        break;
 8003e0a:	e00a      	b.n	8003e22 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	61bb      	str	r3, [r7, #24]
        break;
 8003e12:	e006      	b.n	8003e22 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e18:	231e      	movs	r3, #30
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
        break;
 8003e20:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d100      	bne.n	8003e2a <UART_SetConfig+0x12a>
 8003e28:	e07a      	b.n	8003f20 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	005a      	lsls	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	18d2      	adds	r2, r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f7fc f96d 	bl	800011c <__udivsi3>
 8003e42:	0003      	movs	r3, r0
 8003e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d91c      	bls.n	8003e86 <UART_SetConfig+0x186>
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d217      	bcs.n	8003e86 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	200e      	movs	r0, #14
 8003e5c:	183b      	adds	r3, r7, r0
 8003e5e:	210f      	movs	r1, #15
 8003e60:	438a      	bics	r2, r1
 8003e62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b299      	uxth	r1, r3
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	183a      	adds	r2, r7, r0
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	183a      	adds	r2, r7, r0
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	e04c      	b.n	8003f20 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8003e86:	231e      	movs	r3, #30
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e047      	b.n	8003f20 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e90:	231f      	movs	r3, #31
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d015      	beq.n	8003ec6 <UART_SetConfig+0x1c6>
 8003e9a:	dc18      	bgt.n	8003ece <UART_SetConfig+0x1ce>
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d00d      	beq.n	8003ebc <UART_SetConfig+0x1bc>
 8003ea0:	dc15      	bgt.n	8003ece <UART_SetConfig+0x1ce>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <UART_SetConfig+0x1ac>
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d005      	beq.n	8003eb6 <UART_SetConfig+0x1b6>
 8003eaa:	e010      	b.n	8003ece <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7ff f916 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	61bb      	str	r3, [r7, #24]
        break;
 8003eb4:	e012      	b.n	8003edc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb6:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <UART_SetConfig+0x24c>)
 8003eb8:	61bb      	str	r3, [r7, #24]
        break;
 8003eba:	e00f      	b.n	8003edc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ebc:	f7ff f8ae 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	61bb      	str	r3, [r7, #24]
        break;
 8003ec4:	e00a      	b.n	8003edc <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e006      	b.n	8003edc <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed2:	231e      	movs	r3, #30
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
        break;
 8003eda:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01e      	beq.n	8003f20 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	085a      	lsrs	r2, r3, #1
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	18d2      	adds	r2, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	f7fc f912 	bl	800011c <__udivsi3>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	d90a      	bls.n	8003f18 <UART_SetConfig+0x218>
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	025b      	lsls	r3, r3, #9
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d205      	bcs.n	8003f18 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	e003      	b.n	8003f20 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8003f18:	231e      	movs	r3, #30
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f2c:	231e      	movs	r3, #30
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b008      	add	sp, #32
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	ffff69f3 	.word	0xffff69f3
 8003f40:	ffffcfff 	.word	0xffffcfff
 8003f44:	fffff4ff 	.word	0xfffff4ff
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	007a1200 	.word	0x007a1200

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <UART_AdvFeatureConfig+0x144>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4013      	ands	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a43      	ldr	r2, [pc, #268]	; (8004098 <UART_AdvFeatureConfig+0x148>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a3b      	ldr	r2, [pc, #236]	; (800409c <UART_AdvFeatureConfig+0x14c>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <UART_AdvFeatureConfig+0x150>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <UART_AdvFeatureConfig+0x154>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2220      	movs	r2, #32
 8004008:	4013      	ands	r3, r2
 800400a:	d00b      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <UART_AdvFeatureConfig+0x158>)
 8004014:	4013      	ands	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	4013      	ands	r3, r2
 800402c:	d01d      	beq.n	800406a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <UART_AdvFeatureConfig+0x15c>)
 8004036:	4013      	ands	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	035b      	lsls	r3, r3, #13
 800404e:	429a      	cmp	r2, r3
 8004050:	d10b      	bne.n	800406a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <UART_AdvFeatureConfig+0x160>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	4013      	ands	r3, r2
 8004072:	d00b      	beq.n	800408c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a0e      	ldr	r2, [pc, #56]	; (80040b4 <UART_AdvFeatureConfig+0x164>)
 800407c:	4013      	ands	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}
 8004094:	ffff7fff 	.word	0xffff7fff
 8004098:	fffdffff 	.word	0xfffdffff
 800409c:	fffeffff 	.word	0xfffeffff
 80040a0:	fffbffff 	.word	0xfffbffff
 80040a4:	ffffefff 	.word	0xffffefff
 80040a8:	ffffdfff 	.word	0xffffdfff
 80040ac:	ffefffff 	.word	0xffefffff
 80040b0:	ff9fffff 	.word	0xff9fffff
 80040b4:	fff7ffff 	.word	0xfff7ffff

080040b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b092      	sub	sp, #72	; 0x48
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2284      	movs	r2, #132	; 0x84
 80040c4:	2100      	movs	r1, #0
 80040c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c8:	f7fe f8e0 	bl	800228c <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	4013      	ands	r3, r2
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d12c      	bne.n	8004138 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	0391      	lsls	r1, r2, #14
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4a46      	ldr	r2, [pc, #280]	; (8004200 <UART_CheckIdleState+0x148>)
 80040e8:	9200      	str	r2, [sp, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f000 f88c 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d021      	beq.n	8004138 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80040fe:	2301      	movs	r3, #1
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	438a      	bics	r2, r1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2278      	movs	r2, #120	; 0x78
 8004130:	2100      	movs	r1, #0
 8004132:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e05f      	b.n	80041f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2204      	movs	r2, #4
 8004140:	4013      	ands	r3, r2
 8004142:	2b04      	cmp	r3, #4
 8004144:	d146      	bne.n	80041d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	03d1      	lsls	r1, r2, #15
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <UART_CheckIdleState+0x148>)
 8004150:	9200      	str	r2, [sp, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	f000 f858 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d03b      	beq.n	80041d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415c:	f3ef 8310 	mrs	r3, PRIMASK
 8004160:	60fb      	str	r3, [r7, #12]
  return(result);
 8004162:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
 8004166:	2301      	movs	r3, #1
 8004168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f383 8810 	msr	PRIMASK, r3
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4921      	ldr	r1, [pc, #132]	; (8004204 <UART_CheckIdleState+0x14c>)
 800417e:	400a      	ands	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418e:	f3ef 8310 	mrs	r3, PRIMASK
 8004192:	61bb      	str	r3, [r7, #24]
  return(result);
 8004194:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	633b      	str	r3, [r7, #48]	; 0x30
 8004198:	2301      	movs	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f383 8810 	msr	PRIMASK, r3
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	438a      	bics	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	2120      	movs	r1, #32
 80041c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2278      	movs	r2, #120	; 0x78
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e011      	b.n	80041f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	2120      	movs	r1, #32
 80041e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2278      	movs	r2, #120	; 0x78
 80041f2:	2100      	movs	r1, #0
 80041f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b010      	add	sp, #64	; 0x40
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	01ffffff 	.word	0x01ffffff
 8004204:	fffffedf 	.word	0xfffffedf

08004208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	1dfb      	adds	r3, r7, #7
 8004216:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004218:	e051      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	3301      	adds	r3, #1
 800421e:	d04e      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004220:	f7fe f834 	bl	800228c <HAL_GetTick>
 8004224:	0002      	movs	r2, r0
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e051      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2204      	movs	r2, #4
 8004242:	4013      	ands	r3, r2
 8004244:	d03b      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0xb6>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d038      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0xb6>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d035      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2208      	movs	r2, #8
 800425a:	4013      	ands	r3, r2
 800425c:	2b08      	cmp	r3, #8
 800425e:	d111      	bne.n	8004284 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	0018      	movs	r0, r3
 800426c:	f000 f83c 	bl	80042e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2284      	movs	r2, #132	; 0x84
 8004274:	2108      	movs	r1, #8
 8004276:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2278      	movs	r2, #120	; 0x78
 800427c:	2100      	movs	r1, #0
 800427e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e02c      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	401a      	ands	r2, r3
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	429a      	cmp	r2, r3
 8004296:	d112      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f000 f81f 	bl	80042e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2284      	movs	r2, #132	; 0x84
 80042ae:	2120      	movs	r1, #32
 80042b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2278      	movs	r2, #120	; 0x78
 80042b6:	2100      	movs	r1, #0
 80042b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e00f      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	425a      	negs	r2, r3
 80042ce:	4153      	adcs	r3, r2
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	001a      	movs	r2, r3
 80042d4:	1dfb      	adds	r3, r7, #7
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d09e      	beq.n	800421a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b004      	add	sp, #16
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f0:	f3ef 8310 	mrs	r3, PRIMASK
 80042f4:	617b      	str	r3, [r7, #20]
  return(result);
 80042f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4926      	ldr	r1, [pc, #152]	; (80043ac <UART_EndRxTransfer+0xc4>)
 8004312:	400a      	ands	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004322:	f3ef 8310 	mrs	r3, PRIMASK
 8004326:	623b      	str	r3, [r7, #32]
  return(result);
 8004328:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
 800432c:	2301      	movs	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2101      	movs	r1, #1
 8004344:	438a      	bics	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f383 8810 	msr	PRIMASK, r3
}
 8004352:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004358:	2b01      	cmp	r3, #1
 800435a:	d118      	bne.n	800438e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435c:	f3ef 8310 	mrs	r3, PRIMASK
 8004360:	60bb      	str	r3, [r7, #8]
  return(result);
 8004362:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004366:	2301      	movs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2110      	movs	r1, #16
 800437e:	438a      	bics	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	2120      	movs	r1, #32
 8004394:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b00e      	add	sp, #56	; 0x38
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	fffffedf 	.word	0xfffffedf

080043b0 <__assert_func>:
 80043b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80043b2:	0014      	movs	r4, r2
 80043b4:	001a      	movs	r2, r3
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <__assert_func+0x2c>)
 80043b8:	0005      	movs	r5, r0
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	000e      	movs	r6, r1
 80043be:	68d8      	ldr	r0, [r3, #12]
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <__assert_func+0x30>)
 80043c2:	2c00      	cmp	r4, #0
 80043c4:	d101      	bne.n	80043ca <__assert_func+0x1a>
 80043c6:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <__assert_func+0x34>)
 80043c8:	001c      	movs	r4, r3
 80043ca:	4907      	ldr	r1, [pc, #28]	; (80043e8 <__assert_func+0x38>)
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	9402      	str	r4, [sp, #8]
 80043d0:	002b      	movs	r3, r5
 80043d2:	9600      	str	r6, [sp, #0]
 80043d4:	f000 f8b2 	bl	800453c <fiprintf>
 80043d8:	f000 f9b4 	bl	8004744 <abort>
 80043dc:	200000e8 	.word	0x200000e8
 80043e0:	080056f4 	.word	0x080056f4
 80043e4:	0800572f 	.word	0x0800572f
 80043e8:	08005701 	.word	0x08005701

080043ec <std>:
 80043ec:	2300      	movs	r3, #0
 80043ee:	b510      	push	{r4, lr}
 80043f0:	0004      	movs	r4, r0
 80043f2:	6003      	str	r3, [r0, #0]
 80043f4:	6043      	str	r3, [r0, #4]
 80043f6:	6083      	str	r3, [r0, #8]
 80043f8:	8181      	strh	r1, [r0, #12]
 80043fa:	6643      	str	r3, [r0, #100]	; 0x64
 80043fc:	81c2      	strh	r2, [r0, #14]
 80043fe:	6103      	str	r3, [r0, #16]
 8004400:	6143      	str	r3, [r0, #20]
 8004402:	6183      	str	r3, [r0, #24]
 8004404:	0019      	movs	r1, r3
 8004406:	2208      	movs	r2, #8
 8004408:	305c      	adds	r0, #92	; 0x5c
 800440a:	f000 f90f 	bl	800462c <memset>
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <std+0x50>)
 8004410:	6224      	str	r4, [r4, #32]
 8004412:	6263      	str	r3, [r4, #36]	; 0x24
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <std+0x54>)
 8004416:	62a3      	str	r3, [r4, #40]	; 0x28
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <std+0x58>)
 800441a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <std+0x5c>)
 800441e:	6323      	str	r3, [r4, #48]	; 0x30
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <std+0x60>)
 8004422:	429c      	cmp	r4, r3
 8004424:	d005      	beq.n	8004432 <std+0x46>
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <std+0x64>)
 8004428:	429c      	cmp	r4, r3
 800442a:	d002      	beq.n	8004432 <std+0x46>
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <std+0x68>)
 800442e:	429c      	cmp	r4, r3
 8004430:	d103      	bne.n	800443a <std+0x4e>
 8004432:	0020      	movs	r0, r4
 8004434:	3058      	adds	r0, #88	; 0x58
 8004436:	f000 f979 	bl	800472c <__retarget_lock_init_recursive>
 800443a:	bd10      	pop	{r4, pc}
 800443c:	08004595 	.word	0x08004595
 8004440:	080045bd 	.word	0x080045bd
 8004444:	080045f5 	.word	0x080045f5
 8004448:	08004621 	.word	0x08004621
 800444c:	20000360 	.word	0x20000360
 8004450:	200003c8 	.word	0x200003c8
 8004454:	20000430 	.word	0x20000430

08004458 <stdio_exit_handler>:
 8004458:	b510      	push	{r4, lr}
 800445a:	4a03      	ldr	r2, [pc, #12]	; (8004468 <stdio_exit_handler+0x10>)
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <stdio_exit_handler+0x14>)
 800445e:	4804      	ldr	r0, [pc, #16]	; (8004470 <stdio_exit_handler+0x18>)
 8004460:	f000 f87c 	bl	800455c <_fwalk_sglue>
 8004464:	bd10      	pop	{r4, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	20000090 	.word	0x20000090
 800446c:	08004fed 	.word	0x08004fed
 8004470:	2000009c 	.word	0x2000009c

08004474 <cleanup_stdio>:
 8004474:	6841      	ldr	r1, [r0, #4]
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <cleanup_stdio+0x30>)
 8004478:	b510      	push	{r4, lr}
 800447a:	0004      	movs	r4, r0
 800447c:	4299      	cmp	r1, r3
 800447e:	d001      	beq.n	8004484 <cleanup_stdio+0x10>
 8004480:	f000 fdb4 	bl	8004fec <_fflush_r>
 8004484:	68a1      	ldr	r1, [r4, #8]
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <cleanup_stdio+0x34>)
 8004488:	4299      	cmp	r1, r3
 800448a:	d002      	beq.n	8004492 <cleanup_stdio+0x1e>
 800448c:	0020      	movs	r0, r4
 800448e:	f000 fdad 	bl	8004fec <_fflush_r>
 8004492:	68e1      	ldr	r1, [r4, #12]
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <cleanup_stdio+0x38>)
 8004496:	4299      	cmp	r1, r3
 8004498:	d002      	beq.n	80044a0 <cleanup_stdio+0x2c>
 800449a:	0020      	movs	r0, r4
 800449c:	f000 fda6 	bl	8004fec <_fflush_r>
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	20000360 	.word	0x20000360
 80044a8:	200003c8 	.word	0x200003c8
 80044ac:	20000430 	.word	0x20000430

080044b0 <global_stdio_init.part.0>:
 80044b0:	b510      	push	{r4, lr}
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <global_stdio_init.part.0+0x28>)
 80044b4:	4a09      	ldr	r2, [pc, #36]	; (80044dc <global_stdio_init.part.0+0x2c>)
 80044b6:	2104      	movs	r1, #4
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	4809      	ldr	r0, [pc, #36]	; (80044e0 <global_stdio_init.part.0+0x30>)
 80044bc:	2200      	movs	r2, #0
 80044be:	f7ff ff95 	bl	80043ec <std>
 80044c2:	2201      	movs	r2, #1
 80044c4:	2109      	movs	r1, #9
 80044c6:	4807      	ldr	r0, [pc, #28]	; (80044e4 <global_stdio_init.part.0+0x34>)
 80044c8:	f7ff ff90 	bl	80043ec <std>
 80044cc:	2202      	movs	r2, #2
 80044ce:	2112      	movs	r1, #18
 80044d0:	4805      	ldr	r0, [pc, #20]	; (80044e8 <global_stdio_init.part.0+0x38>)
 80044d2:	f7ff ff8b 	bl	80043ec <std>
 80044d6:	bd10      	pop	{r4, pc}
 80044d8:	20000498 	.word	0x20000498
 80044dc:	08004459 	.word	0x08004459
 80044e0:	20000360 	.word	0x20000360
 80044e4:	200003c8 	.word	0x200003c8
 80044e8:	20000430 	.word	0x20000430

080044ec <__sfp_lock_acquire>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4802      	ldr	r0, [pc, #8]	; (80044f8 <__sfp_lock_acquire+0xc>)
 80044f0:	f000 f91d 	bl	800472e <__retarget_lock_acquire_recursive>
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200004a1 	.word	0x200004a1

080044fc <__sfp_lock_release>:
 80044fc:	b510      	push	{r4, lr}
 80044fe:	4802      	ldr	r0, [pc, #8]	; (8004508 <__sfp_lock_release+0xc>)
 8004500:	f000 f916 	bl	8004730 <__retarget_lock_release_recursive>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	200004a1 	.word	0x200004a1

0800450c <__sinit>:
 800450c:	b510      	push	{r4, lr}
 800450e:	0004      	movs	r4, r0
 8004510:	f7ff ffec 	bl	80044ec <__sfp_lock_acquire>
 8004514:	6a23      	ldr	r3, [r4, #32]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <__sinit+0x14>
 800451a:	f7ff ffef 	bl	80044fc <__sfp_lock_release>
 800451e:	bd10      	pop	{r4, pc}
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <__sinit+0x28>)
 8004522:	6223      	str	r3, [r4, #32]
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__sinit+0x2c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f6      	bne.n	800451a <__sinit+0xe>
 800452c:	f7ff ffc0 	bl	80044b0 <global_stdio_init.part.0>
 8004530:	e7f3      	b.n	800451a <__sinit+0xe>
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	08004475 	.word	0x08004475
 8004538:	20000498 	.word	0x20000498

0800453c <fiprintf>:
 800453c:	b40e      	push	{r1, r2, r3}
 800453e:	b517      	push	{r0, r1, r2, r4, lr}
 8004540:	4c05      	ldr	r4, [pc, #20]	; (8004558 <fiprintf+0x1c>)
 8004542:	ab05      	add	r3, sp, #20
 8004544:	cb04      	ldmia	r3!, {r2}
 8004546:	0001      	movs	r1, r0
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	f000 fa28 	bl	80049a0 <_vfiprintf_r>
 8004550:	bc1e      	pop	{r1, r2, r3, r4}
 8004552:	bc08      	pop	{r3}
 8004554:	b003      	add	sp, #12
 8004556:	4718      	bx	r3
 8004558:	200000e8 	.word	0x200000e8

0800455c <_fwalk_sglue>:
 800455c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800455e:	0014      	movs	r4, r2
 8004560:	2600      	movs	r6, #0
 8004562:	9000      	str	r0, [sp, #0]
 8004564:	9101      	str	r1, [sp, #4]
 8004566:	68a5      	ldr	r5, [r4, #8]
 8004568:	6867      	ldr	r7, [r4, #4]
 800456a:	3f01      	subs	r7, #1
 800456c:	d504      	bpl.n	8004578 <_fwalk_sglue+0x1c>
 800456e:	6824      	ldr	r4, [r4, #0]
 8004570:	2c00      	cmp	r4, #0
 8004572:	d1f8      	bne.n	8004566 <_fwalk_sglue+0xa>
 8004574:	0030      	movs	r0, r6
 8004576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004578:	89ab      	ldrh	r3, [r5, #12]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d908      	bls.n	8004590 <_fwalk_sglue+0x34>
 800457e:	220e      	movs	r2, #14
 8004580:	5eab      	ldrsh	r3, [r5, r2]
 8004582:	3301      	adds	r3, #1
 8004584:	d004      	beq.n	8004590 <_fwalk_sglue+0x34>
 8004586:	0029      	movs	r1, r5
 8004588:	9800      	ldr	r0, [sp, #0]
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	4798      	blx	r3
 800458e:	4306      	orrs	r6, r0
 8004590:	3568      	adds	r5, #104	; 0x68
 8004592:	e7ea      	b.n	800456a <_fwalk_sglue+0xe>

08004594 <__sread>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	000c      	movs	r4, r1
 8004598:	250e      	movs	r5, #14
 800459a:	5f49      	ldrsh	r1, [r1, r5]
 800459c:	f000 f874 	bl	8004688 <_read_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	db03      	blt.n	80045ac <__sread+0x18>
 80045a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045a6:	181b      	adds	r3, r3, r0
 80045a8:	6563      	str	r3, [r4, #84]	; 0x54
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <__sread+0x24>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	e7f9      	b.n	80045aa <__sread+0x16>
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	ffffefff 	.word	0xffffefff

080045bc <__swrite>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	001f      	movs	r7, r3
 80045c0:	898b      	ldrh	r3, [r1, #12]
 80045c2:	0005      	movs	r5, r0
 80045c4:	000c      	movs	r4, r1
 80045c6:	0016      	movs	r6, r2
 80045c8:	05db      	lsls	r3, r3, #23
 80045ca:	d505      	bpl.n	80045d8 <__swrite+0x1c>
 80045cc:	230e      	movs	r3, #14
 80045ce:	5ec9      	ldrsh	r1, [r1, r3]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2302      	movs	r3, #2
 80045d4:	f000 f844 	bl	8004660 <_lseek_r>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <__swrite+0x34>)
 80045dc:	0028      	movs	r0, r5
 80045de:	4013      	ands	r3, r2
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	0032      	movs	r2, r6
 80045e4:	230e      	movs	r3, #14
 80045e6:	5ee1      	ldrsh	r1, [r4, r3]
 80045e8:	003b      	movs	r3, r7
 80045ea:	f000 f861 	bl	80046b0 <_write_r>
 80045ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f0:	ffffefff 	.word	0xffffefff

080045f4 <__sseek>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	000c      	movs	r4, r1
 80045f8:	250e      	movs	r5, #14
 80045fa:	5f49      	ldrsh	r1, [r1, r5]
 80045fc:	f000 f830 	bl	8004660 <_lseek_r>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	1c42      	adds	r2, r0, #1
 8004604:	d103      	bne.n	800460e <__sseek+0x1a>
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <__sseek+0x28>)
 8004608:	4013      	ands	r3, r2
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	bd70      	pop	{r4, r5, r6, pc}
 800460e:	2280      	movs	r2, #128	; 0x80
 8004610:	0152      	lsls	r2, r2, #5
 8004612:	4313      	orrs	r3, r2
 8004614:	81a3      	strh	r3, [r4, #12]
 8004616:	6560      	str	r0, [r4, #84]	; 0x54
 8004618:	e7f8      	b.n	800460c <__sseek+0x18>
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	ffffefff 	.word	0xffffefff

08004620 <__sclose>:
 8004620:	b510      	push	{r4, lr}
 8004622:	230e      	movs	r3, #14
 8004624:	5ec9      	ldrsh	r1, [r1, r3]
 8004626:	f000 f809 	bl	800463c <_close_r>
 800462a:	bd10      	pop	{r4, pc}

0800462c <memset>:
 800462c:	0003      	movs	r3, r0
 800462e:	1882      	adds	r2, r0, r2
 8004630:	4293      	cmp	r3, r2
 8004632:	d100      	bne.n	8004636 <memset+0xa>
 8004634:	4770      	bx	lr
 8004636:	7019      	strb	r1, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	e7f9      	b.n	8004630 <memset+0x4>

0800463c <_close_r>:
 800463c:	2300      	movs	r3, #0
 800463e:	b570      	push	{r4, r5, r6, lr}
 8004640:	4d06      	ldr	r5, [pc, #24]	; (800465c <_close_r+0x20>)
 8004642:	0004      	movs	r4, r0
 8004644:	0008      	movs	r0, r1
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f7fc f943 	bl	80008d2 <_close>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d103      	bne.n	8004658 <_close_r+0x1c>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d000      	beq.n	8004658 <_close_r+0x1c>
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	2000049c 	.word	0x2000049c

08004660 <_lseek_r>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	0004      	movs	r4, r0
 8004664:	0008      	movs	r0, r1
 8004666:	0011      	movs	r1, r2
 8004668:	001a      	movs	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	4d05      	ldr	r5, [pc, #20]	; (8004684 <_lseek_r+0x24>)
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fc f950 	bl	8000914 <_lseek>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d103      	bne.n	8004680 <_lseek_r+0x20>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d000      	beq.n	8004680 <_lseek_r+0x20>
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	2000049c 	.word	0x2000049c

08004688 <_read_r>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	0004      	movs	r4, r0
 800468c:	0008      	movs	r0, r1
 800468e:	0011      	movs	r1, r2
 8004690:	001a      	movs	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	4d05      	ldr	r5, [pc, #20]	; (80046ac <_read_r+0x24>)
 8004696:	602b      	str	r3, [r5, #0]
 8004698:	f7fc f8e2 	bl	8000860 <_read>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d103      	bne.n	80046a8 <_read_r+0x20>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d000      	beq.n	80046a8 <_read_r+0x20>
 80046a6:	6023      	str	r3, [r4, #0]
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	2000049c 	.word	0x2000049c

080046b0 <_write_r>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	0004      	movs	r4, r0
 80046b4:	0008      	movs	r0, r1
 80046b6:	0011      	movs	r1, r2
 80046b8:	001a      	movs	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	4d05      	ldr	r5, [pc, #20]	; (80046d4 <_write_r+0x24>)
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc f8eb 	bl	800089a <_write>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d103      	bne.n	80046d0 <_write_r+0x20>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d000      	beq.n	80046d0 <_write_r+0x20>
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	2000049c 	.word	0x2000049c

080046d8 <__errno>:
 80046d8:	4b01      	ldr	r3, [pc, #4]	; (80046e0 <__errno+0x8>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	4770      	bx	lr
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	200000e8 	.word	0x200000e8

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	2600      	movs	r6, #0
 80046e8:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x38>)
 80046ea:	4d0d      	ldr	r5, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	2600      	movs	r6, #0
 80046f6:	f000 fe3d 	bl	8005374 <_init>
 80046fa:	4c0a      	ldr	r4, [pc, #40]	; (8004724 <__libc_init_array+0x40>)
 80046fc:	4d0a      	ldr	r5, [pc, #40]	; (8004728 <__libc_init_array+0x44>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	42a6      	cmp	r6, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	00b3      	lsls	r3, r6, #2
 800470a:	58eb      	ldr	r3, [r5, r3]
 800470c:	4798      	blx	r3
 800470e:	3601      	adds	r6, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	00b3      	lsls	r3, r6, #2
 8004714:	58eb      	ldr	r3, [r5, r3]
 8004716:	4798      	blx	r3
 8004718:	3601      	adds	r6, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	08005c00 	.word	0x08005c00
 8004720:	08005c00 	.word	0x08005c00
 8004724:	08005c04 	.word	0x08005c04
 8004728:	08005c00 	.word	0x08005c00

0800472c <__retarget_lock_init_recursive>:
 800472c:	4770      	bx	lr

0800472e <__retarget_lock_acquire_recursive>:
 800472e:	4770      	bx	lr

08004730 <__retarget_lock_release_recursive>:
 8004730:	4770      	bx	lr

08004732 <memcpy>:
 8004732:	2300      	movs	r3, #0
 8004734:	b510      	push	{r4, lr}
 8004736:	429a      	cmp	r2, r3
 8004738:	d100      	bne.n	800473c <memcpy+0xa>
 800473a:	bd10      	pop	{r4, pc}
 800473c:	5ccc      	ldrb	r4, [r1, r3]
 800473e:	54c4      	strb	r4, [r0, r3]
 8004740:	3301      	adds	r3, #1
 8004742:	e7f8      	b.n	8004736 <memcpy+0x4>

08004744 <abort>:
 8004744:	2006      	movs	r0, #6
 8004746:	b510      	push	{r4, lr}
 8004748:	f000 fd4c 	bl	80051e4 <raise>
 800474c:	2001      	movs	r0, #1
 800474e:	f7fc f87b 	bl	8000848 <_exit>
	...

08004754 <_free_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	0005      	movs	r5, r0
 8004758:	2900      	cmp	r1, #0
 800475a:	d010      	beq.n	800477e <_free_r+0x2a>
 800475c:	1f0c      	subs	r4, r1, #4
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da00      	bge.n	8004766 <_free_r+0x12>
 8004764:	18e4      	adds	r4, r4, r3
 8004766:	0028      	movs	r0, r5
 8004768:	f000 f8e2 	bl	8004930 <__malloc_lock>
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <_free_r+0x90>)
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <_free_r+0x2c>
 8004774:	6063      	str	r3, [r4, #4]
 8004776:	6014      	str	r4, [r2, #0]
 8004778:	0028      	movs	r0, r5
 800477a:	f000 f8e1 	bl	8004940 <__malloc_unlock>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	42a3      	cmp	r3, r4
 8004782:	d908      	bls.n	8004796 <_free_r+0x42>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	1821      	adds	r1, r4, r0
 8004788:	428b      	cmp	r3, r1
 800478a:	d1f3      	bne.n	8004774 <_free_r+0x20>
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	1809      	adds	r1, r1, r0
 8004792:	6021      	str	r1, [r4, #0]
 8004794:	e7ee      	b.n	8004774 <_free_r+0x20>
 8004796:	001a      	movs	r2, r3
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <_free_r+0x4e>
 800479e:	42a3      	cmp	r3, r4
 80047a0:	d9f9      	bls.n	8004796 <_free_r+0x42>
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	1850      	adds	r0, r2, r1
 80047a6:	42a0      	cmp	r0, r4
 80047a8:	d10b      	bne.n	80047c2 <_free_r+0x6e>
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	1809      	adds	r1, r1, r0
 80047ae:	1850      	adds	r0, r2, r1
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	4283      	cmp	r3, r0
 80047b4:	d1e0      	bne.n	8004778 <_free_r+0x24>
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	1841      	adds	r1, r0, r1
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	6053      	str	r3, [r2, #4]
 80047c0:	e7da      	b.n	8004778 <_free_r+0x24>
 80047c2:	42a0      	cmp	r0, r4
 80047c4:	d902      	bls.n	80047cc <_free_r+0x78>
 80047c6:	230c      	movs	r3, #12
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	e7d5      	b.n	8004778 <_free_r+0x24>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	1821      	adds	r1, r4, r0
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d103      	bne.n	80047dc <_free_r+0x88>
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	1809      	adds	r1, r1, r0
 80047da:	6021      	str	r1, [r4, #0]
 80047dc:	6063      	str	r3, [r4, #4]
 80047de:	6054      	str	r4, [r2, #4]
 80047e0:	e7ca      	b.n	8004778 <_free_r+0x24>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	200004a4 	.word	0x200004a4

080047e8 <sbrk_aligned>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4e0f      	ldr	r6, [pc, #60]	; (8004828 <sbrk_aligned+0x40>)
 80047ec:	000d      	movs	r5, r1
 80047ee:	6831      	ldr	r1, [r6, #0]
 80047f0:	0004      	movs	r4, r0
 80047f2:	2900      	cmp	r1, #0
 80047f4:	d102      	bne.n	80047fc <sbrk_aligned+0x14>
 80047f6:	f000 fd15 	bl	8005224 <_sbrk_r>
 80047fa:	6030      	str	r0, [r6, #0]
 80047fc:	0029      	movs	r1, r5
 80047fe:	0020      	movs	r0, r4
 8004800:	f000 fd10 	bl	8005224 <_sbrk_r>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d00a      	beq.n	800481e <sbrk_aligned+0x36>
 8004808:	2303      	movs	r3, #3
 800480a:	1cc5      	adds	r5, r0, #3
 800480c:	439d      	bics	r5, r3
 800480e:	42a8      	cmp	r0, r5
 8004810:	d007      	beq.n	8004822 <sbrk_aligned+0x3a>
 8004812:	1a29      	subs	r1, r5, r0
 8004814:	0020      	movs	r0, r4
 8004816:	f000 fd05 	bl	8005224 <_sbrk_r>
 800481a:	3001      	adds	r0, #1
 800481c:	d101      	bne.n	8004822 <sbrk_aligned+0x3a>
 800481e:	2501      	movs	r5, #1
 8004820:	426d      	negs	r5, r5
 8004822:	0028      	movs	r0, r5
 8004824:	bd70      	pop	{r4, r5, r6, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	200004a8 	.word	0x200004a8

0800482c <_malloc_r>:
 800482c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800482e:	2203      	movs	r2, #3
 8004830:	1ccb      	adds	r3, r1, #3
 8004832:	4393      	bics	r3, r2
 8004834:	3308      	adds	r3, #8
 8004836:	0006      	movs	r6, r0
 8004838:	001f      	movs	r7, r3
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d238      	bcs.n	80048b0 <_malloc_r+0x84>
 800483e:	270c      	movs	r7, #12
 8004840:	42b9      	cmp	r1, r7
 8004842:	d837      	bhi.n	80048b4 <_malloc_r+0x88>
 8004844:	0030      	movs	r0, r6
 8004846:	f000 f873 	bl	8004930 <__malloc_lock>
 800484a:	4b38      	ldr	r3, [pc, #224]	; (800492c <_malloc_r+0x100>)
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	001c      	movs	r4, r3
 8004852:	2c00      	cmp	r4, #0
 8004854:	d133      	bne.n	80048be <_malloc_r+0x92>
 8004856:	0039      	movs	r1, r7
 8004858:	0030      	movs	r0, r6
 800485a:	f7ff ffc5 	bl	80047e8 <sbrk_aligned>
 800485e:	0004      	movs	r4, r0
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d15e      	bne.n	8004922 <_malloc_r+0xf6>
 8004864:	9b00      	ldr	r3, [sp, #0]
 8004866:	681c      	ldr	r4, [r3, #0]
 8004868:	0025      	movs	r5, r4
 800486a:	2d00      	cmp	r5, #0
 800486c:	d14e      	bne.n	800490c <_malloc_r+0xe0>
 800486e:	2c00      	cmp	r4, #0
 8004870:	d051      	beq.n	8004916 <_malloc_r+0xea>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0029      	movs	r1, r5
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	0030      	movs	r0, r6
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	f000 fcd2 	bl	8005224 <_sbrk_r>
 8004880:	9b01      	ldr	r3, [sp, #4]
 8004882:	4283      	cmp	r3, r0
 8004884:	d147      	bne.n	8004916 <_malloc_r+0xea>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	0030      	movs	r0, r6
 800488a:	1aff      	subs	r7, r7, r3
 800488c:	0039      	movs	r1, r7
 800488e:	f7ff ffab 	bl	80047e8 <sbrk_aligned>
 8004892:	3001      	adds	r0, #1
 8004894:	d03f      	beq.n	8004916 <_malloc_r+0xea>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	19db      	adds	r3, r3, r7
 800489a:	6023      	str	r3, [r4, #0]
 800489c:	9b00      	ldr	r3, [sp, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d040      	beq.n	8004926 <_malloc_r+0xfa>
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	42a2      	cmp	r2, r4
 80048a8:	d133      	bne.n	8004912 <_malloc_r+0xe6>
 80048aa:	2200      	movs	r2, #0
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	e014      	b.n	80048da <_malloc_r+0xae>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dac5      	bge.n	8004840 <_malloc_r+0x14>
 80048b4:	230c      	movs	r3, #12
 80048b6:	2500      	movs	r5, #0
 80048b8:	6033      	str	r3, [r6, #0]
 80048ba:	0028      	movs	r0, r5
 80048bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048be:	6821      	ldr	r1, [r4, #0]
 80048c0:	1bc9      	subs	r1, r1, r7
 80048c2:	d420      	bmi.n	8004906 <_malloc_r+0xda>
 80048c4:	290b      	cmp	r1, #11
 80048c6:	d918      	bls.n	80048fa <_malloc_r+0xce>
 80048c8:	19e2      	adds	r2, r4, r7
 80048ca:	6027      	str	r7, [r4, #0]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d112      	bne.n	80048f6 <_malloc_r+0xca>
 80048d0:	9b00      	ldr	r3, [sp, #0]
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	6011      	str	r1, [r2, #0]
 80048d8:	6053      	str	r3, [r2, #4]
 80048da:	0030      	movs	r0, r6
 80048dc:	0025      	movs	r5, r4
 80048de:	f000 f82f 	bl	8004940 <__malloc_unlock>
 80048e2:	2207      	movs	r2, #7
 80048e4:	350b      	adds	r5, #11
 80048e6:	1d23      	adds	r3, r4, #4
 80048e8:	4395      	bics	r5, r2
 80048ea:	1aea      	subs	r2, r5, r3
 80048ec:	429d      	cmp	r5, r3
 80048ee:	d0e4      	beq.n	80048ba <_malloc_r+0x8e>
 80048f0:	1b5b      	subs	r3, r3, r5
 80048f2:	50a3      	str	r3, [r4, r2]
 80048f4:	e7e1      	b.n	80048ba <_malloc_r+0x8e>
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	e7ec      	b.n	80048d4 <_malloc_r+0xa8>
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d1d5      	bne.n	80048ac <_malloc_r+0x80>
 8004900:	9b00      	ldr	r3, [sp, #0]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e7e9      	b.n	80048da <_malloc_r+0xae>
 8004906:	0023      	movs	r3, r4
 8004908:	6864      	ldr	r4, [r4, #4]
 800490a:	e7a2      	b.n	8004852 <_malloc_r+0x26>
 800490c:	002c      	movs	r4, r5
 800490e:	686d      	ldr	r5, [r5, #4]
 8004910:	e7ab      	b.n	800486a <_malloc_r+0x3e>
 8004912:	0013      	movs	r3, r2
 8004914:	e7c4      	b.n	80048a0 <_malloc_r+0x74>
 8004916:	230c      	movs	r3, #12
 8004918:	0030      	movs	r0, r6
 800491a:	6033      	str	r3, [r6, #0]
 800491c:	f000 f810 	bl	8004940 <__malloc_unlock>
 8004920:	e7cb      	b.n	80048ba <_malloc_r+0x8e>
 8004922:	6027      	str	r7, [r4, #0]
 8004924:	e7d9      	b.n	80048da <_malloc_r+0xae>
 8004926:	605b      	str	r3, [r3, #4]
 8004928:	deff      	udf	#255	; 0xff
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	200004a4 	.word	0x200004a4

08004930 <__malloc_lock>:
 8004930:	b510      	push	{r4, lr}
 8004932:	4802      	ldr	r0, [pc, #8]	; (800493c <__malloc_lock+0xc>)
 8004934:	f7ff fefb 	bl	800472e <__retarget_lock_acquire_recursive>
 8004938:	bd10      	pop	{r4, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	200004a0 	.word	0x200004a0

08004940 <__malloc_unlock>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4802      	ldr	r0, [pc, #8]	; (800494c <__malloc_unlock+0xc>)
 8004944:	f7ff fef4 	bl	8004730 <__retarget_lock_release_recursive>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	200004a0 	.word	0x200004a0

08004950 <__sfputc_r>:
 8004950:	6893      	ldr	r3, [r2, #8]
 8004952:	b510      	push	{r4, lr}
 8004954:	3b01      	subs	r3, #1
 8004956:	6093      	str	r3, [r2, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	da04      	bge.n	8004966 <__sfputc_r+0x16>
 800495c:	6994      	ldr	r4, [r2, #24]
 800495e:	42a3      	cmp	r3, r4
 8004960:	db07      	blt.n	8004972 <__sfputc_r+0x22>
 8004962:	290a      	cmp	r1, #10
 8004964:	d005      	beq.n	8004972 <__sfputc_r+0x22>
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	1c58      	adds	r0, r3, #1
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	7019      	strb	r1, [r3, #0]
 800496e:	0008      	movs	r0, r1
 8004970:	bd10      	pop	{r4, pc}
 8004972:	f000 fb66 	bl	8005042 <__swbuf_r>
 8004976:	0001      	movs	r1, r0
 8004978:	e7f9      	b.n	800496e <__sfputc_r+0x1e>

0800497a <__sfputs_r>:
 800497a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497c:	0006      	movs	r6, r0
 800497e:	000f      	movs	r7, r1
 8004980:	0014      	movs	r4, r2
 8004982:	18d5      	adds	r5, r2, r3
 8004984:	42ac      	cmp	r4, r5
 8004986:	d101      	bne.n	800498c <__sfputs_r+0x12>
 8004988:	2000      	movs	r0, #0
 800498a:	e007      	b.n	800499c <__sfputs_r+0x22>
 800498c:	7821      	ldrb	r1, [r4, #0]
 800498e:	003a      	movs	r2, r7
 8004990:	0030      	movs	r0, r6
 8004992:	f7ff ffdd 	bl	8004950 <__sfputc_r>
 8004996:	3401      	adds	r4, #1
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d1f3      	bne.n	8004984 <__sfputs_r+0xa>
 800499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049a0 <_vfiprintf_r>:
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	b0a1      	sub	sp, #132	; 0x84
 80049a4:	000f      	movs	r7, r1
 80049a6:	0015      	movs	r5, r2
 80049a8:	001e      	movs	r6, r3
 80049aa:	9003      	str	r0, [sp, #12]
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d004      	beq.n	80049ba <_vfiprintf_r+0x1a>
 80049b0:	6a03      	ldr	r3, [r0, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <_vfiprintf_r+0x1a>
 80049b6:	f7ff fda9 	bl	800450c <__sinit>
 80049ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049bc:	07db      	lsls	r3, r3, #31
 80049be:	d405      	bmi.n	80049cc <_vfiprintf_r+0x2c>
 80049c0:	89bb      	ldrh	r3, [r7, #12]
 80049c2:	059b      	lsls	r3, r3, #22
 80049c4:	d402      	bmi.n	80049cc <_vfiprintf_r+0x2c>
 80049c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80049c8:	f7ff feb1 	bl	800472e <__retarget_lock_acquire_recursive>
 80049cc:	89bb      	ldrh	r3, [r7, #12]
 80049ce:	071b      	lsls	r3, r3, #28
 80049d0:	d502      	bpl.n	80049d8 <_vfiprintf_r+0x38>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d113      	bne.n	8004a00 <_vfiprintf_r+0x60>
 80049d8:	0039      	movs	r1, r7
 80049da:	9803      	ldr	r0, [sp, #12]
 80049dc:	f000 fb74 	bl	80050c8 <__swsetup_r>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d00d      	beq.n	8004a00 <_vfiprintf_r+0x60>
 80049e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e6:	07db      	lsls	r3, r3, #31
 80049e8:	d503      	bpl.n	80049f2 <_vfiprintf_r+0x52>
 80049ea:	2001      	movs	r0, #1
 80049ec:	4240      	negs	r0, r0
 80049ee:	b021      	add	sp, #132	; 0x84
 80049f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f2:	89bb      	ldrh	r3, [r7, #12]
 80049f4:	059b      	lsls	r3, r3, #22
 80049f6:	d4f8      	bmi.n	80049ea <_vfiprintf_r+0x4a>
 80049f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80049fa:	f7ff fe99 	bl	8004730 <__retarget_lock_release_recursive>
 80049fe:	e7f4      	b.n	80049ea <_vfiprintf_r+0x4a>
 8004a00:	2300      	movs	r3, #0
 8004a02:	ac08      	add	r4, sp, #32
 8004a04:	6163      	str	r3, [r4, #20]
 8004a06:	3320      	adds	r3, #32
 8004a08:	7663      	strb	r3, [r4, #25]
 8004a0a:	3310      	adds	r3, #16
 8004a0c:	76a3      	strb	r3, [r4, #26]
 8004a0e:	9607      	str	r6, [sp, #28]
 8004a10:	002e      	movs	r6, r5
 8004a12:	7833      	ldrb	r3, [r6, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <_vfiprintf_r+0x7c>
 8004a18:	2b25      	cmp	r3, #37	; 0x25
 8004a1a:	d148      	bne.n	8004aae <_vfiprintf_r+0x10e>
 8004a1c:	1b73      	subs	r3, r6, r5
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	42ae      	cmp	r6, r5
 8004a22:	d00b      	beq.n	8004a3c <_vfiprintf_r+0x9c>
 8004a24:	002a      	movs	r2, r5
 8004a26:	0039      	movs	r1, r7
 8004a28:	9803      	ldr	r0, [sp, #12]
 8004a2a:	f7ff ffa6 	bl	800497a <__sfputs_r>
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d100      	bne.n	8004a34 <_vfiprintf_r+0x94>
 8004a32:	e0af      	b.n	8004b94 <_vfiprintf_r+0x1f4>
 8004a34:	6963      	ldr	r3, [r4, #20]
 8004a36:	9a05      	ldr	r2, [sp, #20]
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	7833      	ldrb	r3, [r6, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d100      	bne.n	8004a44 <_vfiprintf_r+0xa4>
 8004a42:	e0a7      	b.n	8004b94 <_vfiprintf_r+0x1f4>
 8004a44:	2201      	movs	r2, #1
 8004a46:	2300      	movs	r3, #0
 8004a48:	4252      	negs	r2, r2
 8004a4a:	6062      	str	r2, [r4, #4]
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	3254      	adds	r2, #84	; 0x54
 8004a50:	1852      	adds	r2, r2, r1
 8004a52:	1c75      	adds	r5, r6, #1
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	60e3      	str	r3, [r4, #12]
 8004a58:	60a3      	str	r3, [r4, #8]
 8004a5a:	7013      	strb	r3, [r2, #0]
 8004a5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a5e:	4b59      	ldr	r3, [pc, #356]	; (8004bc4 <_vfiprintf_r+0x224>)
 8004a60:	2205      	movs	r2, #5
 8004a62:	0018      	movs	r0, r3
 8004a64:	7829      	ldrb	r1, [r5, #0]
 8004a66:	9305      	str	r3, [sp, #20]
 8004a68:	f000 fbee 	bl	8005248 <memchr>
 8004a6c:	1c6e      	adds	r6, r5, #1
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d11f      	bne.n	8004ab2 <_vfiprintf_r+0x112>
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	06d3      	lsls	r3, r2, #27
 8004a76:	d504      	bpl.n	8004a82 <_vfiprintf_r+0xe2>
 8004a78:	2353      	movs	r3, #83	; 0x53
 8004a7a:	a904      	add	r1, sp, #16
 8004a7c:	185b      	adds	r3, r3, r1
 8004a7e:	2120      	movs	r1, #32
 8004a80:	7019      	strb	r1, [r3, #0]
 8004a82:	0713      	lsls	r3, r2, #28
 8004a84:	d504      	bpl.n	8004a90 <_vfiprintf_r+0xf0>
 8004a86:	2353      	movs	r3, #83	; 0x53
 8004a88:	a904      	add	r1, sp, #16
 8004a8a:	185b      	adds	r3, r3, r1
 8004a8c:	212b      	movs	r1, #43	; 0x2b
 8004a8e:	7019      	strb	r1, [r3, #0]
 8004a90:	782b      	ldrb	r3, [r5, #0]
 8004a92:	2b2a      	cmp	r3, #42	; 0x2a
 8004a94:	d016      	beq.n	8004ac4 <_vfiprintf_r+0x124>
 8004a96:	002e      	movs	r6, r5
 8004a98:	2100      	movs	r1, #0
 8004a9a:	200a      	movs	r0, #10
 8004a9c:	68e3      	ldr	r3, [r4, #12]
 8004a9e:	7832      	ldrb	r2, [r6, #0]
 8004aa0:	1c75      	adds	r5, r6, #1
 8004aa2:	3a30      	subs	r2, #48	; 0x30
 8004aa4:	2a09      	cmp	r2, #9
 8004aa6:	d94e      	bls.n	8004b46 <_vfiprintf_r+0x1a6>
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d111      	bne.n	8004ad0 <_vfiprintf_r+0x130>
 8004aac:	e017      	b.n	8004ade <_vfiprintf_r+0x13e>
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7af      	b.n	8004a12 <_vfiprintf_r+0x72>
 8004ab2:	9b05      	ldr	r3, [sp, #20]
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	1ac0      	subs	r0, r0, r3
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4083      	lsls	r3, r0
 8004abc:	4313      	orrs	r3, r2
 8004abe:	0035      	movs	r5, r6
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	e7cc      	b.n	8004a5e <_vfiprintf_r+0xbe>
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	1d19      	adds	r1, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	9107      	str	r1, [sp, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db01      	blt.n	8004ad4 <_vfiprintf_r+0x134>
 8004ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad2:	e004      	b.n	8004ade <_vfiprintf_r+0x13e>
 8004ad4:	425b      	negs	r3, r3
 8004ad6:	60e3      	str	r3, [r4, #12]
 8004ad8:	2302      	movs	r3, #2
 8004ada:	4313      	orrs	r3, r2
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	7833      	ldrb	r3, [r6, #0]
 8004ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae2:	d10a      	bne.n	8004afa <_vfiprintf_r+0x15a>
 8004ae4:	7873      	ldrb	r3, [r6, #1]
 8004ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ae8:	d135      	bne.n	8004b56 <_vfiprintf_r+0x1b6>
 8004aea:	9b07      	ldr	r3, [sp, #28]
 8004aec:	3602      	adds	r6, #2
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	9207      	str	r2, [sp, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	db2b      	blt.n	8004b50 <_vfiprintf_r+0x1b0>
 8004af8:	9309      	str	r3, [sp, #36]	; 0x24
 8004afa:	4d33      	ldr	r5, [pc, #204]	; (8004bc8 <_vfiprintf_r+0x228>)
 8004afc:	2203      	movs	r2, #3
 8004afe:	0028      	movs	r0, r5
 8004b00:	7831      	ldrb	r1, [r6, #0]
 8004b02:	f000 fba1 	bl	8005248 <memchr>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d006      	beq.n	8004b18 <_vfiprintf_r+0x178>
 8004b0a:	2340      	movs	r3, #64	; 0x40
 8004b0c:	1b40      	subs	r0, r0, r5
 8004b0e:	4083      	lsls	r3, r0
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	3601      	adds	r6, #1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	7831      	ldrb	r1, [r6, #0]
 8004b1a:	2206      	movs	r2, #6
 8004b1c:	482b      	ldr	r0, [pc, #172]	; (8004bcc <_vfiprintf_r+0x22c>)
 8004b1e:	1c75      	adds	r5, r6, #1
 8004b20:	7621      	strb	r1, [r4, #24]
 8004b22:	f000 fb91 	bl	8005248 <memchr>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d043      	beq.n	8004bb2 <_vfiprintf_r+0x212>
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <_vfiprintf_r+0x230>)
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d125      	bne.n	8004b7c <_vfiprintf_r+0x1dc>
 8004b30:	2207      	movs	r2, #7
 8004b32:	9b07      	ldr	r3, [sp, #28]
 8004b34:	3307      	adds	r3, #7
 8004b36:	4393      	bics	r3, r2
 8004b38:	3308      	adds	r3, #8
 8004b3a:	9307      	str	r3, [sp, #28]
 8004b3c:	6963      	ldr	r3, [r4, #20]
 8004b3e:	9a04      	ldr	r2, [sp, #16]
 8004b40:	189b      	adds	r3, r3, r2
 8004b42:	6163      	str	r3, [r4, #20]
 8004b44:	e764      	b.n	8004a10 <_vfiprintf_r+0x70>
 8004b46:	4343      	muls	r3, r0
 8004b48:	002e      	movs	r6, r5
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	e7a6      	b.n	8004a9e <_vfiprintf_r+0xfe>
 8004b50:	2301      	movs	r3, #1
 8004b52:	425b      	negs	r3, r3
 8004b54:	e7d0      	b.n	8004af8 <_vfiprintf_r+0x158>
 8004b56:	2300      	movs	r3, #0
 8004b58:	200a      	movs	r0, #10
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	6063      	str	r3, [r4, #4]
 8004b60:	7831      	ldrb	r1, [r6, #0]
 8004b62:	1c75      	adds	r5, r6, #1
 8004b64:	3930      	subs	r1, #48	; 0x30
 8004b66:	2909      	cmp	r1, #9
 8004b68:	d903      	bls.n	8004b72 <_vfiprintf_r+0x1d2>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0c5      	beq.n	8004afa <_vfiprintf_r+0x15a>
 8004b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b70:	e7c3      	b.n	8004afa <_vfiprintf_r+0x15a>
 8004b72:	4342      	muls	r2, r0
 8004b74:	002e      	movs	r6, r5
 8004b76:	2301      	movs	r3, #1
 8004b78:	1852      	adds	r2, r2, r1
 8004b7a:	e7f1      	b.n	8004b60 <_vfiprintf_r+0x1c0>
 8004b7c:	aa07      	add	r2, sp, #28
 8004b7e:	9200      	str	r2, [sp, #0]
 8004b80:	0021      	movs	r1, r4
 8004b82:	003a      	movs	r2, r7
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <_vfiprintf_r+0x234>)
 8004b86:	9803      	ldr	r0, [sp, #12]
 8004b88:	e000      	b.n	8004b8c <_vfiprintf_r+0x1ec>
 8004b8a:	bf00      	nop
 8004b8c:	9004      	str	r0, [sp, #16]
 8004b8e:	9b04      	ldr	r3, [sp, #16]
 8004b90:	3301      	adds	r3, #1
 8004b92:	d1d3      	bne.n	8004b3c <_vfiprintf_r+0x19c>
 8004b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b96:	07db      	lsls	r3, r3, #31
 8004b98:	d405      	bmi.n	8004ba6 <_vfiprintf_r+0x206>
 8004b9a:	89bb      	ldrh	r3, [r7, #12]
 8004b9c:	059b      	lsls	r3, r3, #22
 8004b9e:	d402      	bmi.n	8004ba6 <_vfiprintf_r+0x206>
 8004ba0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004ba2:	f7ff fdc5 	bl	8004730 <__retarget_lock_release_recursive>
 8004ba6:	89bb      	ldrh	r3, [r7, #12]
 8004ba8:	065b      	lsls	r3, r3, #25
 8004baa:	d500      	bpl.n	8004bae <_vfiprintf_r+0x20e>
 8004bac:	e71d      	b.n	80049ea <_vfiprintf_r+0x4a>
 8004bae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004bb0:	e71d      	b.n	80049ee <_vfiprintf_r+0x4e>
 8004bb2:	aa07      	add	r2, sp, #28
 8004bb4:	9200      	str	r2, [sp, #0]
 8004bb6:	0021      	movs	r1, r4
 8004bb8:	003a      	movs	r2, r7
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <_vfiprintf_r+0x234>)
 8004bbc:	9803      	ldr	r0, [sp, #12]
 8004bbe:	f000 f87b 	bl	8004cb8 <_printf_i>
 8004bc2:	e7e3      	b.n	8004b8c <_vfiprintf_r+0x1ec>
 8004bc4:	08005730 	.word	0x08005730
 8004bc8:	08005736 	.word	0x08005736
 8004bcc:	0800573a 	.word	0x0800573a
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	0800497b 	.word	0x0800497b

08004bd8 <_printf_common>:
 8004bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bda:	0016      	movs	r6, r2
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	688a      	ldr	r2, [r1, #8]
 8004be0:	690b      	ldr	r3, [r1, #16]
 8004be2:	000c      	movs	r4, r1
 8004be4:	9000      	str	r0, [sp, #0]
 8004be6:	4293      	cmp	r3, r2
 8004be8:	da00      	bge.n	8004bec <_printf_common+0x14>
 8004bea:	0013      	movs	r3, r2
 8004bec:	0022      	movs	r2, r4
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	3243      	adds	r2, #67	; 0x43
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d001      	beq.n	8004bfc <_printf_common+0x24>
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	6033      	str	r3, [r6, #0]
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	069b      	lsls	r3, r3, #26
 8004c00:	d502      	bpl.n	8004c08 <_printf_common+0x30>
 8004c02:	6833      	ldr	r3, [r6, #0]
 8004c04:	3302      	adds	r3, #2
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	0015      	movs	r5, r2
 8004c0e:	401d      	ands	r5, r3
 8004c10:	421a      	tst	r2, r3
 8004c12:	d027      	beq.n	8004c64 <_printf_common+0x8c>
 8004c14:	0023      	movs	r3, r4
 8004c16:	3343      	adds	r3, #67	; 0x43
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	1e5a      	subs	r2, r3, #1
 8004c1c:	4193      	sbcs	r3, r2
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	0692      	lsls	r2, r2, #26
 8004c22:	d430      	bmi.n	8004c86 <_printf_common+0xae>
 8004c24:	0022      	movs	r2, r4
 8004c26:	9901      	ldr	r1, [sp, #4]
 8004c28:	9800      	ldr	r0, [sp, #0]
 8004c2a:	9d08      	ldr	r5, [sp, #32]
 8004c2c:	3243      	adds	r2, #67	; 0x43
 8004c2e:	47a8      	blx	r5
 8004c30:	3001      	adds	r0, #1
 8004c32:	d025      	beq.n	8004c80 <_printf_common+0xa8>
 8004c34:	2206      	movs	r2, #6
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	2500      	movs	r5, #0
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d105      	bne.n	8004c4c <_printf_common+0x74>
 8004c40:	6833      	ldr	r3, [r6, #0]
 8004c42:	68e5      	ldr	r5, [r4, #12]
 8004c44:	1aed      	subs	r5, r5, r3
 8004c46:	43eb      	mvns	r3, r5
 8004c48:	17db      	asrs	r3, r3, #31
 8004c4a:	401d      	ands	r5, r3
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	6922      	ldr	r2, [r4, #16]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	dd01      	ble.n	8004c58 <_printf_common+0x80>
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	18ed      	adds	r5, r5, r3
 8004c58:	2600      	movs	r6, #0
 8004c5a:	42b5      	cmp	r5, r6
 8004c5c:	d120      	bne.n	8004ca0 <_printf_common+0xc8>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	e010      	b.n	8004c84 <_printf_common+0xac>
 8004c62:	3501      	adds	r5, #1
 8004c64:	68e3      	ldr	r3, [r4, #12]
 8004c66:	6832      	ldr	r2, [r6, #0]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	42ab      	cmp	r3, r5
 8004c6c:	ddd2      	ble.n	8004c14 <_printf_common+0x3c>
 8004c6e:	0022      	movs	r2, r4
 8004c70:	2301      	movs	r3, #1
 8004c72:	9901      	ldr	r1, [sp, #4]
 8004c74:	9800      	ldr	r0, [sp, #0]
 8004c76:	9f08      	ldr	r7, [sp, #32]
 8004c78:	3219      	adds	r2, #25
 8004c7a:	47b8      	blx	r7
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d1f0      	bne.n	8004c62 <_printf_common+0x8a>
 8004c80:	2001      	movs	r0, #1
 8004c82:	4240      	negs	r0, r0
 8004c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c86:	2030      	movs	r0, #48	; 0x30
 8004c88:	18e1      	adds	r1, r4, r3
 8004c8a:	3143      	adds	r1, #67	; 0x43
 8004c8c:	7008      	strb	r0, [r1, #0]
 8004c8e:	0021      	movs	r1, r4
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	3145      	adds	r1, #69	; 0x45
 8004c94:	7809      	ldrb	r1, [r1, #0]
 8004c96:	18a2      	adds	r2, r4, r2
 8004c98:	3243      	adds	r2, #67	; 0x43
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	7011      	strb	r1, [r2, #0]
 8004c9e:	e7c1      	b.n	8004c24 <_printf_common+0x4c>
 8004ca0:	0022      	movs	r2, r4
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	9901      	ldr	r1, [sp, #4]
 8004ca6:	9800      	ldr	r0, [sp, #0]
 8004ca8:	9f08      	ldr	r7, [sp, #32]
 8004caa:	321a      	adds	r2, #26
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d0e6      	beq.n	8004c80 <_printf_common+0xa8>
 8004cb2:	3601      	adds	r6, #1
 8004cb4:	e7d1      	b.n	8004c5a <_printf_common+0x82>
	...

08004cb8 <_printf_i>:
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cba:	b08b      	sub	sp, #44	; 0x2c
 8004cbc:	9206      	str	r2, [sp, #24]
 8004cbe:	000a      	movs	r2, r1
 8004cc0:	3243      	adds	r2, #67	; 0x43
 8004cc2:	9307      	str	r3, [sp, #28]
 8004cc4:	9005      	str	r0, [sp, #20]
 8004cc6:	9204      	str	r2, [sp, #16]
 8004cc8:	7e0a      	ldrb	r2, [r1, #24]
 8004cca:	000c      	movs	r4, r1
 8004ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cce:	2a78      	cmp	r2, #120	; 0x78
 8004cd0:	d809      	bhi.n	8004ce6 <_printf_i+0x2e>
 8004cd2:	2a62      	cmp	r2, #98	; 0x62
 8004cd4:	d80b      	bhi.n	8004cee <_printf_i+0x36>
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	d100      	bne.n	8004cdc <_printf_i+0x24>
 8004cda:	e0be      	b.n	8004e5a <_printf_i+0x1a2>
 8004cdc:	497c      	ldr	r1, [pc, #496]	; (8004ed0 <_printf_i+0x218>)
 8004cde:	9103      	str	r1, [sp, #12]
 8004ce0:	2a58      	cmp	r2, #88	; 0x58
 8004ce2:	d100      	bne.n	8004ce6 <_printf_i+0x2e>
 8004ce4:	e093      	b.n	8004e0e <_printf_i+0x156>
 8004ce6:	0026      	movs	r6, r4
 8004ce8:	3642      	adds	r6, #66	; 0x42
 8004cea:	7032      	strb	r2, [r6, #0]
 8004cec:	e022      	b.n	8004d34 <_printf_i+0x7c>
 8004cee:	0010      	movs	r0, r2
 8004cf0:	3863      	subs	r0, #99	; 0x63
 8004cf2:	2815      	cmp	r0, #21
 8004cf4:	d8f7      	bhi.n	8004ce6 <_printf_i+0x2e>
 8004cf6:	f7fb fa07 	bl	8000108 <__gnu_thumb1_case_shi>
 8004cfa:	0016      	.short	0x0016
 8004cfc:	fff6001f 	.word	0xfff6001f
 8004d00:	fff6fff6 	.word	0xfff6fff6
 8004d04:	001ffff6 	.word	0x001ffff6
 8004d08:	fff6fff6 	.word	0xfff6fff6
 8004d0c:	fff6fff6 	.word	0xfff6fff6
 8004d10:	003600a3 	.word	0x003600a3
 8004d14:	fff60083 	.word	0xfff60083
 8004d18:	00b4fff6 	.word	0x00b4fff6
 8004d1c:	0036fff6 	.word	0x0036fff6
 8004d20:	fff6fff6 	.word	0xfff6fff6
 8004d24:	0087      	.short	0x0087
 8004d26:	0026      	movs	r6, r4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	3642      	adds	r6, #66	; 0x42
 8004d2c:	1d11      	adds	r1, r2, #4
 8004d2e:	6019      	str	r1, [r3, #0]
 8004d30:	6813      	ldr	r3, [r2, #0]
 8004d32:	7033      	strb	r3, [r6, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0a2      	b.n	8004e7e <_printf_i+0x1c6>
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	6809      	ldr	r1, [r1, #0]
 8004d3c:	1d02      	adds	r2, r0, #4
 8004d3e:	060d      	lsls	r5, r1, #24
 8004d40:	d50b      	bpl.n	8004d5a <_printf_i+0xa2>
 8004d42:	6805      	ldr	r5, [r0, #0]
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	2d00      	cmp	r5, #0
 8004d48:	da03      	bge.n	8004d52 <_printf_i+0x9a>
 8004d4a:	232d      	movs	r3, #45	; 0x2d
 8004d4c:	9a04      	ldr	r2, [sp, #16]
 8004d4e:	426d      	negs	r5, r5
 8004d50:	7013      	strb	r3, [r2, #0]
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <_printf_i+0x218>)
 8004d54:	270a      	movs	r7, #10
 8004d56:	9303      	str	r3, [sp, #12]
 8004d58:	e01b      	b.n	8004d92 <_printf_i+0xda>
 8004d5a:	6805      	ldr	r5, [r0, #0]
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	0649      	lsls	r1, r1, #25
 8004d60:	d5f1      	bpl.n	8004d46 <_printf_i+0x8e>
 8004d62:	b22d      	sxth	r5, r5
 8004d64:	e7ef      	b.n	8004d46 <_printf_i+0x8e>
 8004d66:	680d      	ldr	r5, [r1, #0]
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	1d08      	adds	r0, r1, #4
 8004d6c:	6018      	str	r0, [r3, #0]
 8004d6e:	062e      	lsls	r6, r5, #24
 8004d70:	d501      	bpl.n	8004d76 <_printf_i+0xbe>
 8004d72:	680d      	ldr	r5, [r1, #0]
 8004d74:	e003      	b.n	8004d7e <_printf_i+0xc6>
 8004d76:	066d      	lsls	r5, r5, #25
 8004d78:	d5fb      	bpl.n	8004d72 <_printf_i+0xba>
 8004d7a:	680d      	ldr	r5, [r1, #0]
 8004d7c:	b2ad      	uxth	r5, r5
 8004d7e:	4b54      	ldr	r3, [pc, #336]	; (8004ed0 <_printf_i+0x218>)
 8004d80:	2708      	movs	r7, #8
 8004d82:	9303      	str	r3, [sp, #12]
 8004d84:	2a6f      	cmp	r2, #111	; 0x6f
 8004d86:	d000      	beq.n	8004d8a <_printf_i+0xd2>
 8004d88:	3702      	adds	r7, #2
 8004d8a:	0023      	movs	r3, r4
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	3343      	adds	r3, #67	; 0x43
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	db03      	blt.n	8004da2 <_printf_i+0xea>
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	438a      	bics	r2, r1
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	d102      	bne.n	8004dac <_printf_i+0xf4>
 8004da6:	9e04      	ldr	r6, [sp, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <_printf_i+0x10e>
 8004dac:	9e04      	ldr	r6, [sp, #16]
 8004dae:	0028      	movs	r0, r5
 8004db0:	0039      	movs	r1, r7
 8004db2:	f7fb fa39 	bl	8000228 <__aeabi_uidivmod>
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	3e01      	subs	r6, #1
 8004dba:	5c5b      	ldrb	r3, [r3, r1]
 8004dbc:	7033      	strb	r3, [r6, #0]
 8004dbe:	002b      	movs	r3, r5
 8004dc0:	0005      	movs	r5, r0
 8004dc2:	429f      	cmp	r7, r3
 8004dc4:	d9f3      	bls.n	8004dae <_printf_i+0xf6>
 8004dc6:	2f08      	cmp	r7, #8
 8004dc8:	d109      	bne.n	8004dde <_printf_i+0x126>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	07db      	lsls	r3, r3, #31
 8004dce:	d506      	bpl.n	8004dde <_printf_i+0x126>
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	dc02      	bgt.n	8004dde <_printf_i+0x126>
 8004dd8:	2330      	movs	r3, #48	; 0x30
 8004dda:	3e01      	subs	r6, #1
 8004ddc:	7033      	strb	r3, [r6, #0]
 8004dde:	9b04      	ldr	r3, [sp, #16]
 8004de0:	1b9b      	subs	r3, r3, r6
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	9b07      	ldr	r3, [sp, #28]
 8004de6:	0021      	movs	r1, r4
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	9805      	ldr	r0, [sp, #20]
 8004dec:	9b06      	ldr	r3, [sp, #24]
 8004dee:	aa09      	add	r2, sp, #36	; 0x24
 8004df0:	f7ff fef2 	bl	8004bd8 <_printf_common>
 8004df4:	3001      	adds	r0, #1
 8004df6:	d147      	bne.n	8004e88 <_printf_i+0x1d0>
 8004df8:	2001      	movs	r0, #1
 8004dfa:	4240      	negs	r0, r0
 8004dfc:	b00b      	add	sp, #44	; 0x2c
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	2220      	movs	r2, #32
 8004e02:	6809      	ldr	r1, [r1, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	6022      	str	r2, [r4, #0]
 8004e08:	2278      	movs	r2, #120	; 0x78
 8004e0a:	4932      	ldr	r1, [pc, #200]	; (8004ed4 <_printf_i+0x21c>)
 8004e0c:	9103      	str	r1, [sp, #12]
 8004e0e:	0021      	movs	r1, r4
 8004e10:	3145      	adds	r1, #69	; 0x45
 8004e12:	700a      	strb	r2, [r1, #0]
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	c920      	ldmia	r1!, {r5}
 8004e1a:	0610      	lsls	r0, r2, #24
 8004e1c:	d402      	bmi.n	8004e24 <_printf_i+0x16c>
 8004e1e:	0650      	lsls	r0, r2, #25
 8004e20:	d500      	bpl.n	8004e24 <_printf_i+0x16c>
 8004e22:	b2ad      	uxth	r5, r5
 8004e24:	6019      	str	r1, [r3, #0]
 8004e26:	07d3      	lsls	r3, r2, #31
 8004e28:	d502      	bpl.n	8004e30 <_printf_i+0x178>
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	2710      	movs	r7, #16
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	d1a9      	bne.n	8004d8a <_printf_i+0xd2>
 8004e36:	2220      	movs	r2, #32
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	e7a4      	b.n	8004d8a <_printf_i+0xd2>
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	680d      	ldr	r5, [r1, #0]
 8004e44:	1d10      	adds	r0, r2, #4
 8004e46:	6949      	ldr	r1, [r1, #20]
 8004e48:	6018      	str	r0, [r3, #0]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	062e      	lsls	r6, r5, #24
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0x19c>
 8004e50:	6019      	str	r1, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <_printf_i+0x1a2>
 8004e54:	066d      	lsls	r5, r5, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0x198>
 8004e58:	8019      	strh	r1, [r3, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9e04      	ldr	r6, [sp, #16]
 8004e5e:	6123      	str	r3, [r4, #16]
 8004e60:	e7c0      	b.n	8004de4 <_printf_i+0x12c>
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	1d11      	adds	r1, r2, #4
 8004e66:	6019      	str	r1, [r3, #0]
 8004e68:	6816      	ldr	r6, [r2, #0]
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	0030      	movs	r0, r6
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	f000 f9ea 	bl	8005248 <memchr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d001      	beq.n	8004e7c <_printf_i+0x1c4>
 8004e78:	1b80      	subs	r0, r0, r6
 8004e7a:	6060      	str	r0, [r4, #4]
 8004e7c:	6863      	ldr	r3, [r4, #4]
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	2300      	movs	r3, #0
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	7013      	strb	r3, [r2, #0]
 8004e86:	e7ad      	b.n	8004de4 <_printf_i+0x12c>
 8004e88:	0032      	movs	r2, r6
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	9906      	ldr	r1, [sp, #24]
 8004e8e:	9805      	ldr	r0, [sp, #20]
 8004e90:	9d07      	ldr	r5, [sp, #28]
 8004e92:	47a8      	blx	r5
 8004e94:	3001      	adds	r0, #1
 8004e96:	d0af      	beq.n	8004df8 <_printf_i+0x140>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079b      	lsls	r3, r3, #30
 8004e9c:	d415      	bmi.n	8004eca <_printf_i+0x212>
 8004e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea0:	68e0      	ldr	r0, [r4, #12]
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	daaa      	bge.n	8004dfc <_printf_i+0x144>
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	e7a8      	b.n	8004dfc <_printf_i+0x144>
 8004eaa:	0022      	movs	r2, r4
 8004eac:	2301      	movs	r3, #1
 8004eae:	9906      	ldr	r1, [sp, #24]
 8004eb0:	9805      	ldr	r0, [sp, #20]
 8004eb2:	9e07      	ldr	r6, [sp, #28]
 8004eb4:	3219      	adds	r2, #25
 8004eb6:	47b0      	blx	r6
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d09d      	beq.n	8004df8 <_printf_i+0x140>
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dcf0      	bgt.n	8004eaa <_printf_i+0x1f2>
 8004ec8:	e7e9      	b.n	8004e9e <_printf_i+0x1e6>
 8004eca:	2500      	movs	r5, #0
 8004ecc:	e7f7      	b.n	8004ebe <_printf_i+0x206>
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	08005741 	.word	0x08005741
 8004ed4:	08005752 	.word	0x08005752

08004ed8 <__sflush_r>:
 8004ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eda:	898b      	ldrh	r3, [r1, #12]
 8004edc:	0005      	movs	r5, r0
 8004ede:	000c      	movs	r4, r1
 8004ee0:	071a      	lsls	r2, r3, #28
 8004ee2:	d45c      	bmi.n	8004f9e <__sflush_r+0xc6>
 8004ee4:	684a      	ldr	r2, [r1, #4]
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	dc04      	bgt.n	8004ef4 <__sflush_r+0x1c>
 8004eea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	dc01      	bgt.n	8004ef4 <__sflush_r+0x1c>
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ef4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004ef6:	2f00      	cmp	r7, #0
 8004ef8:	d0fa      	beq.n	8004ef0 <__sflush_r+0x18>
 8004efa:	2200      	movs	r2, #0
 8004efc:	2080      	movs	r0, #128	; 0x80
 8004efe:	682e      	ldr	r6, [r5, #0]
 8004f00:	602a      	str	r2, [r5, #0]
 8004f02:	001a      	movs	r2, r3
 8004f04:	0140      	lsls	r0, r0, #5
 8004f06:	6a21      	ldr	r1, [r4, #32]
 8004f08:	4002      	ands	r2, r0
 8004f0a:	4203      	tst	r3, r0
 8004f0c:	d034      	beq.n	8004f78 <__sflush_r+0xa0>
 8004f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	075b      	lsls	r3, r3, #29
 8004f14:	d506      	bpl.n	8004f24 <__sflush_r+0x4c>
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	1ac0      	subs	r0, r0, r3
 8004f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <__sflush_r+0x4c>
 8004f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f22:	1ac0      	subs	r0, r0, r3
 8004f24:	0002      	movs	r2, r0
 8004f26:	2300      	movs	r3, #0
 8004f28:	0028      	movs	r0, r5
 8004f2a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004f2c:	6a21      	ldr	r1, [r4, #32]
 8004f2e:	47b8      	blx	r7
 8004f30:	89a2      	ldrh	r2, [r4, #12]
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d106      	bne.n	8004f44 <__sflush_r+0x6c>
 8004f36:	6829      	ldr	r1, [r5, #0]
 8004f38:	291d      	cmp	r1, #29
 8004f3a:	d82c      	bhi.n	8004f96 <__sflush_r+0xbe>
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <__sflush_r+0x110>)
 8004f3e:	410b      	asrs	r3, r1
 8004f40:	07db      	lsls	r3, r3, #31
 8004f42:	d428      	bmi.n	8004f96 <__sflush_r+0xbe>
 8004f44:	2300      	movs	r3, #0
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	04d2      	lsls	r2, r2, #19
 8004f4e:	d505      	bpl.n	8004f5c <__sflush_r+0x84>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <__sflush_r+0x82>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d100      	bne.n	8004f5c <__sflush_r+0x84>
 8004f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5e:	602e      	str	r6, [r5, #0]
 8004f60:	2900      	cmp	r1, #0
 8004f62:	d0c5      	beq.n	8004ef0 <__sflush_r+0x18>
 8004f64:	0023      	movs	r3, r4
 8004f66:	3344      	adds	r3, #68	; 0x44
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	d002      	beq.n	8004f72 <__sflush_r+0x9a>
 8004f6c:	0028      	movs	r0, r5
 8004f6e:	f7ff fbf1 	bl	8004754 <_free_r>
 8004f72:	2000      	movs	r0, #0
 8004f74:	6360      	str	r0, [r4, #52]	; 0x34
 8004f76:	e7bc      	b.n	8004ef2 <__sflush_r+0x1a>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	0028      	movs	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	d1c6      	bne.n	8004f10 <__sflush_r+0x38>
 8004f82:	682b      	ldr	r3, [r5, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0c3      	beq.n	8004f10 <__sflush_r+0x38>
 8004f88:	2b1d      	cmp	r3, #29
 8004f8a:	d001      	beq.n	8004f90 <__sflush_r+0xb8>
 8004f8c:	2b16      	cmp	r3, #22
 8004f8e:	d101      	bne.n	8004f94 <__sflush_r+0xbc>
 8004f90:	602e      	str	r6, [r5, #0]
 8004f92:	e7ad      	b.n	8004ef0 <__sflush_r+0x18>
 8004f94:	89a2      	ldrh	r2, [r4, #12]
 8004f96:	2340      	movs	r3, #64	; 0x40
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	e7a9      	b.n	8004ef2 <__sflush_r+0x1a>
 8004f9e:	690e      	ldr	r6, [r1, #16]
 8004fa0:	2e00      	cmp	r6, #0
 8004fa2:	d0a5      	beq.n	8004ef0 <__sflush_r+0x18>
 8004fa4:	680f      	ldr	r7, [r1, #0]
 8004fa6:	600e      	str	r6, [r1, #0]
 8004fa8:	1bba      	subs	r2, r7, r6
 8004faa:	9201      	str	r2, [sp, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	079b      	lsls	r3, r3, #30
 8004fb0:	d100      	bne.n	8004fb4 <__sflush_r+0xdc>
 8004fb2:	694a      	ldr	r2, [r1, #20]
 8004fb4:	60a2      	str	r2, [r4, #8]
 8004fb6:	9b01      	ldr	r3, [sp, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dd99      	ble.n	8004ef0 <__sflush_r+0x18>
 8004fbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fbe:	0032      	movs	r2, r6
 8004fc0:	001f      	movs	r7, r3
 8004fc2:	0028      	movs	r0, r5
 8004fc4:	9b01      	ldr	r3, [sp, #4]
 8004fc6:	6a21      	ldr	r1, [r4, #32]
 8004fc8:	47b8      	blx	r7
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	dc06      	bgt.n	8004fdc <__sflush_r+0x104>
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	89a2      	ldrh	r2, [r4, #12]
 8004fd4:	4240      	negs	r0, r0
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	e78a      	b.n	8004ef2 <__sflush_r+0x1a>
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	1836      	adds	r6, r6, r0
 8004fe0:	1a1b      	subs	r3, r3, r0
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	e7e7      	b.n	8004fb6 <__sflush_r+0xde>
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	dfbffffe 	.word	0xdfbffffe

08004fec <_fflush_r>:
 8004fec:	690b      	ldr	r3, [r1, #16]
 8004fee:	b570      	push	{r4, r5, r6, lr}
 8004ff0:	0005      	movs	r5, r0
 8004ff2:	000c      	movs	r4, r1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <_fflush_r+0x12>
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	0028      	movs	r0, r5
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d004      	beq.n	800500c <_fflush_r+0x20>
 8005002:	6a03      	ldr	r3, [r0, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <_fflush_r+0x20>
 8005008:	f7ff fa80 	bl	800450c <__sinit>
 800500c:	220c      	movs	r2, #12
 800500e:	5ea3      	ldrsh	r3, [r4, r2]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f1      	beq.n	8004ff8 <_fflush_r+0xc>
 8005014:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005016:	07d2      	lsls	r2, r2, #31
 8005018:	d404      	bmi.n	8005024 <_fflush_r+0x38>
 800501a:	059b      	lsls	r3, r3, #22
 800501c:	d402      	bmi.n	8005024 <_fflush_r+0x38>
 800501e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005020:	f7ff fb85 	bl	800472e <__retarget_lock_acquire_recursive>
 8005024:	0028      	movs	r0, r5
 8005026:	0021      	movs	r1, r4
 8005028:	f7ff ff56 	bl	8004ed8 <__sflush_r>
 800502c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800502e:	0005      	movs	r5, r0
 8005030:	07db      	lsls	r3, r3, #31
 8005032:	d4e2      	bmi.n	8004ffa <_fflush_r+0xe>
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	059b      	lsls	r3, r3, #22
 8005038:	d4df      	bmi.n	8004ffa <_fflush_r+0xe>
 800503a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503c:	f7ff fb78 	bl	8004730 <__retarget_lock_release_recursive>
 8005040:	e7db      	b.n	8004ffa <_fflush_r+0xe>

08005042 <__swbuf_r>:
 8005042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005044:	0006      	movs	r6, r0
 8005046:	000d      	movs	r5, r1
 8005048:	0014      	movs	r4, r2
 800504a:	2800      	cmp	r0, #0
 800504c:	d004      	beq.n	8005058 <__swbuf_r+0x16>
 800504e:	6a03      	ldr	r3, [r0, #32]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <__swbuf_r+0x16>
 8005054:	f7ff fa5a 	bl	800450c <__sinit>
 8005058:	69a3      	ldr	r3, [r4, #24]
 800505a:	60a3      	str	r3, [r4, #8]
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	071b      	lsls	r3, r3, #28
 8005060:	d528      	bpl.n	80050b4 <__swbuf_r+0x72>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d025      	beq.n	80050b4 <__swbuf_r+0x72>
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	b2ef      	uxtb	r7, r5
 800506e:	1ac0      	subs	r0, r0, r3
 8005070:	6963      	ldr	r3, [r4, #20]
 8005072:	b2ed      	uxtb	r5, r5
 8005074:	4283      	cmp	r3, r0
 8005076:	dc05      	bgt.n	8005084 <__swbuf_r+0x42>
 8005078:	0021      	movs	r1, r4
 800507a:	0030      	movs	r0, r6
 800507c:	f7ff ffb6 	bl	8004fec <_fflush_r>
 8005080:	2800      	cmp	r0, #0
 8005082:	d11d      	bne.n	80050c0 <__swbuf_r+0x7e>
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	3001      	adds	r0, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	60a3      	str	r3, [r4, #8]
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	6022      	str	r2, [r4, #0]
 8005092:	701f      	strb	r7, [r3, #0]
 8005094:	6963      	ldr	r3, [r4, #20]
 8005096:	4283      	cmp	r3, r0
 8005098:	d004      	beq.n	80050a4 <__swbuf_r+0x62>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	07db      	lsls	r3, r3, #31
 800509e:	d507      	bpl.n	80050b0 <__swbuf_r+0x6e>
 80050a0:	2d0a      	cmp	r5, #10
 80050a2:	d105      	bne.n	80050b0 <__swbuf_r+0x6e>
 80050a4:	0021      	movs	r1, r4
 80050a6:	0030      	movs	r0, r6
 80050a8:	f7ff ffa0 	bl	8004fec <_fflush_r>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d107      	bne.n	80050c0 <__swbuf_r+0x7e>
 80050b0:	0028      	movs	r0, r5
 80050b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b4:	0021      	movs	r1, r4
 80050b6:	0030      	movs	r0, r6
 80050b8:	f000 f806 	bl	80050c8 <__swsetup_r>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d0d3      	beq.n	8005068 <__swbuf_r+0x26>
 80050c0:	2501      	movs	r5, #1
 80050c2:	426d      	negs	r5, r5
 80050c4:	e7f4      	b.n	80050b0 <__swbuf_r+0x6e>
	...

080050c8 <__swsetup_r>:
 80050c8:	4b30      	ldr	r3, [pc, #192]	; (800518c <__swsetup_r+0xc4>)
 80050ca:	b570      	push	{r4, r5, r6, lr}
 80050cc:	0005      	movs	r5, r0
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	000c      	movs	r4, r1
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d004      	beq.n	80050e0 <__swsetup_r+0x18>
 80050d6:	6a03      	ldr	r3, [r0, #32]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <__swsetup_r+0x18>
 80050dc:	f7ff fa16 	bl	800450c <__sinit>
 80050e0:	230c      	movs	r3, #12
 80050e2:	5ee2      	ldrsh	r2, [r4, r3]
 80050e4:	b293      	uxth	r3, r2
 80050e6:	0711      	lsls	r1, r2, #28
 80050e8:	d423      	bmi.n	8005132 <__swsetup_r+0x6a>
 80050ea:	06d9      	lsls	r1, r3, #27
 80050ec:	d407      	bmi.n	80050fe <__swsetup_r+0x36>
 80050ee:	2309      	movs	r3, #9
 80050f0:	2001      	movs	r0, #1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	3337      	adds	r3, #55	; 0x37
 80050f6:	4313      	orrs	r3, r2
 80050f8:	81a3      	strh	r3, [r4, #12]
 80050fa:	4240      	negs	r0, r0
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	075b      	lsls	r3, r3, #29
 8005100:	d513      	bpl.n	800512a <__swsetup_r+0x62>
 8005102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005104:	2900      	cmp	r1, #0
 8005106:	d008      	beq.n	800511a <__swsetup_r+0x52>
 8005108:	0023      	movs	r3, r4
 800510a:	3344      	adds	r3, #68	; 0x44
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <__swsetup_r+0x4e>
 8005110:	0028      	movs	r0, r5
 8005112:	f7ff fb1f 	bl	8004754 <_free_r>
 8005116:	2300      	movs	r3, #0
 8005118:	6363      	str	r3, [r4, #52]	; 0x34
 800511a:	2224      	movs	r2, #36	; 0x24
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	4393      	bics	r3, r2
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	2300      	movs	r3, #0
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	6923      	ldr	r3, [r4, #16]
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	2308      	movs	r3, #8
 800512c:	89a2      	ldrh	r2, [r4, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	6923      	ldr	r3, [r4, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <__swsetup_r+0x88>
 8005138:	21a0      	movs	r1, #160	; 0xa0
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	0089      	lsls	r1, r1, #2
 8005140:	0092      	lsls	r2, r2, #2
 8005142:	400b      	ands	r3, r1
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <__swsetup_r+0x88>
 8005148:	0021      	movs	r1, r4
 800514a:	0028      	movs	r0, r5
 800514c:	f000 f8b0 	bl	80052b0 <__smakebuf_r>
 8005150:	220c      	movs	r2, #12
 8005152:	5ea3      	ldrsh	r3, [r4, r2]
 8005154:	2001      	movs	r0, #1
 8005156:	001a      	movs	r2, r3
 8005158:	b299      	uxth	r1, r3
 800515a:	4002      	ands	r2, r0
 800515c:	4203      	tst	r3, r0
 800515e:	d00f      	beq.n	8005180 <__swsetup_r+0xb8>
 8005160:	2200      	movs	r2, #0
 8005162:	60a2      	str	r2, [r4, #8]
 8005164:	6962      	ldr	r2, [r4, #20]
 8005166:	4252      	negs	r2, r2
 8005168:	61a2      	str	r2, [r4, #24]
 800516a:	2000      	movs	r0, #0
 800516c:	6922      	ldr	r2, [r4, #16]
 800516e:	4282      	cmp	r2, r0
 8005170:	d1c4      	bne.n	80050fc <__swsetup_r+0x34>
 8005172:	0609      	lsls	r1, r1, #24
 8005174:	d5c2      	bpl.n	80050fc <__swsetup_r+0x34>
 8005176:	2240      	movs	r2, #64	; 0x40
 8005178:	4313      	orrs	r3, r2
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	3801      	subs	r0, #1
 800517e:	e7bd      	b.n	80050fc <__swsetup_r+0x34>
 8005180:	0788      	lsls	r0, r1, #30
 8005182:	d400      	bmi.n	8005186 <__swsetup_r+0xbe>
 8005184:	6962      	ldr	r2, [r4, #20]
 8005186:	60a2      	str	r2, [r4, #8]
 8005188:	e7ef      	b.n	800516a <__swsetup_r+0xa2>
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	200000e8 	.word	0x200000e8

08005190 <_raise_r>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	0004      	movs	r4, r0
 8005194:	000d      	movs	r5, r1
 8005196:	291f      	cmp	r1, #31
 8005198:	d904      	bls.n	80051a4 <_raise_r+0x14>
 800519a:	2316      	movs	r3, #22
 800519c:	6003      	str	r3, [r0, #0]
 800519e:	2001      	movs	r0, #1
 80051a0:	4240      	negs	r0, r0
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <_raise_r+0x24>
 80051aa:	008a      	lsls	r2, r1, #2
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d108      	bne.n	80051c6 <_raise_r+0x36>
 80051b4:	0020      	movs	r0, r4
 80051b6:	f000 f831 	bl	800521c <_getpid_r>
 80051ba:	002a      	movs	r2, r5
 80051bc:	0001      	movs	r1, r0
 80051be:	0020      	movs	r0, r4
 80051c0:	f000 f81a 	bl	80051f8 <_kill_r>
 80051c4:	e7ed      	b.n	80051a2 <_raise_r+0x12>
 80051c6:	2000      	movs	r0, #0
 80051c8:	2a01      	cmp	r2, #1
 80051ca:	d0ea      	beq.n	80051a2 <_raise_r+0x12>
 80051cc:	1c51      	adds	r1, r2, #1
 80051ce:	d103      	bne.n	80051d8 <_raise_r+0x48>
 80051d0:	2316      	movs	r3, #22
 80051d2:	3001      	adds	r0, #1
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	e7e4      	b.n	80051a2 <_raise_r+0x12>
 80051d8:	2400      	movs	r4, #0
 80051da:	0028      	movs	r0, r5
 80051dc:	601c      	str	r4, [r3, #0]
 80051de:	4790      	blx	r2
 80051e0:	0020      	movs	r0, r4
 80051e2:	e7de      	b.n	80051a2 <_raise_r+0x12>

080051e4 <raise>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <raise+0x10>)
 80051e8:	0001      	movs	r1, r0
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	f7ff ffd0 	bl	8005190 <_raise_r>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	200000e8 	.word	0x200000e8

080051f8 <_kill_r>:
 80051f8:	2300      	movs	r3, #0
 80051fa:	b570      	push	{r4, r5, r6, lr}
 80051fc:	4d06      	ldr	r5, [pc, #24]	; (8005218 <_kill_r+0x20>)
 80051fe:	0004      	movs	r4, r0
 8005200:	0008      	movs	r0, r1
 8005202:	0011      	movs	r1, r2
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	f7fb fb0f 	bl	8000828 <_kill>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d103      	bne.n	8005216 <_kill_r+0x1e>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d000      	beq.n	8005216 <_kill_r+0x1e>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	2000049c 	.word	0x2000049c

0800521c <_getpid_r>:
 800521c:	b510      	push	{r4, lr}
 800521e:	f7fb fafd 	bl	800081c <_getpid>
 8005222:	bd10      	pop	{r4, pc}

08005224 <_sbrk_r>:
 8005224:	2300      	movs	r3, #0
 8005226:	b570      	push	{r4, r5, r6, lr}
 8005228:	4d06      	ldr	r5, [pc, #24]	; (8005244 <_sbrk_r+0x20>)
 800522a:	0004      	movs	r4, r0
 800522c:	0008      	movs	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fb fb7c 	bl	800092c <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d103      	bne.n	8005240 <_sbrk_r+0x1c>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d000      	beq.n	8005240 <_sbrk_r+0x1c>
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	2000049c 	.word	0x2000049c

08005248 <memchr>:
 8005248:	b2c9      	uxtb	r1, r1
 800524a:	1882      	adds	r2, r0, r2
 800524c:	4290      	cmp	r0, r2
 800524e:	d101      	bne.n	8005254 <memchr+0xc>
 8005250:	2000      	movs	r0, #0
 8005252:	4770      	bx	lr
 8005254:	7803      	ldrb	r3, [r0, #0]
 8005256:	428b      	cmp	r3, r1
 8005258:	d0fb      	beq.n	8005252 <memchr+0xa>
 800525a:	3001      	adds	r0, #1
 800525c:	e7f6      	b.n	800524c <memchr+0x4>
	...

08005260 <__swhatbuf_r>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	000e      	movs	r6, r1
 8005264:	001d      	movs	r5, r3
 8005266:	230e      	movs	r3, #14
 8005268:	5ec9      	ldrsh	r1, [r1, r3]
 800526a:	0014      	movs	r4, r2
 800526c:	b096      	sub	sp, #88	; 0x58
 800526e:	2900      	cmp	r1, #0
 8005270:	da0c      	bge.n	800528c <__swhatbuf_r+0x2c>
 8005272:	89b2      	ldrh	r2, [r6, #12]
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	0011      	movs	r1, r2
 8005278:	4019      	ands	r1, r3
 800527a:	421a      	tst	r2, r3
 800527c:	d013      	beq.n	80052a6 <__swhatbuf_r+0x46>
 800527e:	2100      	movs	r1, #0
 8005280:	3b40      	subs	r3, #64	; 0x40
 8005282:	2000      	movs	r0, #0
 8005284:	6029      	str	r1, [r5, #0]
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	b016      	add	sp, #88	; 0x58
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	466a      	mov	r2, sp
 800528e:	f000 f84d 	bl	800532c <_fstat_r>
 8005292:	2800      	cmp	r0, #0
 8005294:	dbed      	blt.n	8005272 <__swhatbuf_r+0x12>
 8005296:	23f0      	movs	r3, #240	; 0xf0
 8005298:	9901      	ldr	r1, [sp, #4]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	4019      	ands	r1, r3
 800529e:	4b03      	ldr	r3, [pc, #12]	; (80052ac <__swhatbuf_r+0x4c>)
 80052a0:	18c9      	adds	r1, r1, r3
 80052a2:	424b      	negs	r3, r1
 80052a4:	4159      	adcs	r1, r3
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	e7ea      	b.n	8005282 <__swhatbuf_r+0x22>
 80052ac:	ffffe000 	.word	0xffffe000

080052b0 <__smakebuf_r>:
 80052b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b2:	2602      	movs	r6, #2
 80052b4:	898b      	ldrh	r3, [r1, #12]
 80052b6:	0005      	movs	r5, r0
 80052b8:	000c      	movs	r4, r1
 80052ba:	4233      	tst	r3, r6
 80052bc:	d006      	beq.n	80052cc <__smakebuf_r+0x1c>
 80052be:	0023      	movs	r3, r4
 80052c0:	3347      	adds	r3, #71	; 0x47
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	2301      	movs	r3, #1
 80052c8:	6163      	str	r3, [r4, #20]
 80052ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80052cc:	466a      	mov	r2, sp
 80052ce:	ab01      	add	r3, sp, #4
 80052d0:	f7ff ffc6 	bl	8005260 <__swhatbuf_r>
 80052d4:	9900      	ldr	r1, [sp, #0]
 80052d6:	0007      	movs	r7, r0
 80052d8:	0028      	movs	r0, r5
 80052da:	f7ff faa7 	bl	800482c <_malloc_r>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d108      	bne.n	80052f4 <__smakebuf_r+0x44>
 80052e2:	220c      	movs	r2, #12
 80052e4:	5ea3      	ldrsh	r3, [r4, r2]
 80052e6:	059a      	lsls	r2, r3, #22
 80052e8:	d4ef      	bmi.n	80052ca <__smakebuf_r+0x1a>
 80052ea:	2203      	movs	r2, #3
 80052ec:	4393      	bics	r3, r2
 80052ee:	431e      	orrs	r6, r3
 80052f0:	81a6      	strh	r6, [r4, #12]
 80052f2:	e7e4      	b.n	80052be <__smakebuf_r+0xe>
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	89a2      	ldrh	r2, [r4, #12]
 80052f8:	6020      	str	r0, [r4, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	6120      	str	r0, [r4, #16]
 8005302:	6163      	str	r3, [r4, #20]
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00c      	beq.n	8005324 <__smakebuf_r+0x74>
 800530a:	0028      	movs	r0, r5
 800530c:	230e      	movs	r3, #14
 800530e:	5ee1      	ldrsh	r1, [r4, r3]
 8005310:	f000 f81e 	bl	8005350 <_isatty_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	d005      	beq.n	8005324 <__smakebuf_r+0x74>
 8005318:	2303      	movs	r3, #3
 800531a:	89a2      	ldrh	r2, [r4, #12]
 800531c:	439a      	bics	r2, r3
 800531e:	3b02      	subs	r3, #2
 8005320:	4313      	orrs	r3, r2
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	433b      	orrs	r3, r7
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e7ce      	b.n	80052ca <__smakebuf_r+0x1a>

0800532c <_fstat_r>:
 800532c:	2300      	movs	r3, #0
 800532e:	b570      	push	{r4, r5, r6, lr}
 8005330:	4d06      	ldr	r5, [pc, #24]	; (800534c <_fstat_r+0x20>)
 8005332:	0004      	movs	r4, r0
 8005334:	0008      	movs	r0, r1
 8005336:	0011      	movs	r1, r2
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	f7fb fad4 	bl	80008e6 <_fstat>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	d103      	bne.n	800534a <_fstat_r+0x1e>
 8005342:	682b      	ldr	r3, [r5, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d000      	beq.n	800534a <_fstat_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	2000049c 	.word	0x2000049c

08005350 <_isatty_r>:
 8005350:	2300      	movs	r3, #0
 8005352:	b570      	push	{r4, r5, r6, lr}
 8005354:	4d06      	ldr	r5, [pc, #24]	; (8005370 <_isatty_r+0x20>)
 8005356:	0004      	movs	r4, r0
 8005358:	0008      	movs	r0, r1
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	f7fb fad1 	bl	8000902 <_isatty>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d103      	bne.n	800536c <_isatty_r+0x1c>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d000      	beq.n	800536c <_isatty_r+0x1c>
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	bd70      	pop	{r4, r5, r6, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	2000049c 	.word	0x2000049c

08005374 <_init>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr

08005380 <_fini>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr
